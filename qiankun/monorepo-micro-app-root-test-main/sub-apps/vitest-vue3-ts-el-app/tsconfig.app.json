{
	"extends": "@vue/tsconfig/tsconfig.dom.json",
	"include": [
		"types/*.d.ts",
		"src/*.ts",
		"src/**/*.ts",
		"src/**/*.d.ts",
		"src/**/*.tsx",
		"src/*.vue",
		"src/**/*.vue",
		"src/**/*.md",
		"mock/**/*.ts"
	],
	/*** 不进行类型检查的文件 ***/
	// ts 排除的文件, "exclude"默认情况下会排除node_modules，bower_components，jspm_packages和<outDir>目录
	"exclude": [
		"node_modules",
		"dist",
		"cypress",
		"src/**/__tests__/*",
		"tests/**/*",
		"coverage",
		"scripts",
		"**/*.js",
		"**/**/*.js",
		".{idea,git,cache,output,temp}"
	],
	"compilerOptions": {
		/*** 模块解析选项 ***/
		/*
		 * 指定编译输出目标ECMAScript版本：
		 * "ES3"（默认）， "ES5"， "ES6"/ "ES2015"， "ES2016"， "ES2017"或 "ESNext"
		 * "ESNext"最新的生成目标列表为 ES proposed features
		 */
		"target": "ESNext",
		/*
		 * 指定采用的模块系统 module：
		 * "None"， "CommonJS"， "AMD"， "System"， "UMD"， "ES6"或 "ES2015"
		 * target === "ES6" ? "ES6" : "commonjs"
		 */
		"module": "ESNext",

		// 通过从以前的编译中读取/写入信息到磁盘上的文件来启用增量编译
		"incremental": true,

		"useDefineForClassFields": true,
		// 不把符号链接解析为其真实路径；将符号链接文件视为真正的文件
		"preserveSymlinks": false,

		// 根（root）文件夹列表，表示运行时组合工程结构的内容
		"rootDir": "./",
		// 一般设置tsconfig.json 所在目录
		// 将多个目录放在一个虚拟目录下，用于运行时，即编译后引入文件的位置可能发生变化，这也设置可以虚拟src和out在同一个目录下，不用再去改变路径也不会报错
		// "rootDirs": ["src","out"],
		/* 仅用来控制输出的目录结构 --outDir
		 * 输出目录，即 tsc 编译后的文件输出的文件夹路径（基于tsconfig.json文件的相对路径）
		 */
		"outDir": "./dist",
		// 仅支持 "amd" 和 "system" 模块
		// 将输出文件合并为一个文件。合并的顺序是根据传入编译器的文件顺序、<reference``>和 import的文件顺序决定的
		// "outFile": "./",
		// 生成相应的 .d.ts文件
		"declaration": true,
		// 生成声明文件'.d.ts'的输出路径
		"declarationDir": "./dist/types",
		// "plugins": [{ "name": "typescript-plugin-css-modules" }],
		"plugins": [
			// 转换输出 js 文件中的路径
			{ "transform": "typescript-transform-paths" },
			// 转换输出 .d.ts 文件中的路径
			{ "transform": "typescript-transform-paths", "afterDeclarations": true }
		],
		// 用于帮助TypeScript快速确定引用工程的输出文件位置
		"composite": true,
		// 默认所有可见的"@types"包会在编译过程中被包含进来， 而typeRoots指定要包含的类型声明文件路径列表（仅以下路径的包），

		/* 指定模块解析策略: // classic, node, node16, nodenext, bundler,
		 * module === "AMD" or "System" or "ES6" ? "Classic" : "Node"
		 * 'node' 用于 Node.js 的 CommonJS 实现, node16 / nodenext: 强制要求使用相对路径模块时必须写扩展名
		 * ts5.0 新增了个新的模块解析策略：bundler。解决的最大痛点：
		 * 使用 exports 声明类型的同时，使用相对路径模块可以不写扩展名
		 * Bundler mode
		 */
		"moduleResolution": "Bundler",
		"allowImportingTsExtensions": true,
		// 支持导入 json 模块
		"resolveJsonModule": true,
		// 支持 CommonJS 和 ES 模块之间的互操作性,  CommonJS/AMD/UMD 模块导入兼容
		"esModuleInterop": true,
		"isolatedModules": true,

		/** Linting 
		/* 以严格模式解析, 是否启用所有严格类型检查选项，
		 * 启用 --strict相当于启用 --noImplicitAny, --noImplicitThis, --alwaysStrict， --strictNullChecks和 --strictFunctionTypes和--strictPropertyInitialization。
		 */
		"strict": true,
		// 以严格模式解析并为每个源文件生成 "use strict"语句
		// "alwaysStrict": true,
		// "strictFunctionTypes": true, // 禁用函数参数双向协变检查
		// 确保类的非undefined属性已经在构造函数里初始化。若要令此选项生效，需要同时启用--strictNullChecks。
		// "strictPropertyInitialization": false,
		// 在严格的 null检查模式下， null和 undefined值不包含在任何类型里，只允许用它们自己和 any来赋值（有个例外， undefined可以赋值到 void）
		"strictNullChecks": false,
		// Enable strict 'bind', 'call', and 'apply' methods on functions.
		"strictBindCallApply": true,
		// 允许编译器编译JS，JSX文件
		"allowJs": true,
		// 禁用在函数类型里对泛型签名进行严格检查。
		"noStrictGenericChecks": false,
		// 若有未使用的局部变量则抛错
		"noUnusedLocals": false,
		// 若有未使用的参数则抛错
		"noUnusedParameters": false,
		// 报告switch语句的fallthrough错误。（即，不允许switch的case语句贯穿）
		"noFallthroughCasesInSwitch": true,
		// 不是函数的所有返回路径都有返回值时报错。
		"noImplicitReturns": true,
		// 保留 const和 enum声明
		"preserveConstEnums": true,
		// 保留watch模式下过时的控制台输出
		"preserveWatchOutput": false,
		// 忽略库的默认声明文件的类型检查
		"skipDefaultLibCheck": false,
		// 删除所有注释，除了以 /!*开头的版权信息
		"removeComments": true,
		// 不对具有 /** @internal */ JSDoc注解的代码生成代码
		"stripInternal": true,
		// 阻止对对象字面量的额外属性检查
		"suppressExcessPropertyErrors": false,

		// 允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。
		// module === "system" 或 设置了esModuleInterop 且 module 不为 es2015 / esnext
		"allowSyntheticDefaultImports": true,
		// 忽略 this/any 的类型检查（当 this表达式的值为 any类型的时候，生成一个错误）
		// "noImplicitThis": false,
		// 在表达式和声明上有隐含的 any类型时报错
		"noImplicitAny": false,
		// 显示错误信息时使用的语言，比如：en-us
		// "locale": "cn-zh",
		// --project 编译指定目录下的项目。这个目录应该包含一个 tsconfig.json文件来管理编译。
		// --reactNamespace	string	"React"	当目标为生成 "react" JSX时，指定 createElement和 __spread的调用对象

		// "maxNodeModuleJsDepth": 0,
		// node_modules依赖的最大搜索深度并加载JavaScript文件。仅适用于 --allowJs
		// 不报告执行不到的代码错误
		"allowUnreachableCode": false,
		// 不报告未使用的标签错误。
		"allowUnusedLabels": false,
		// 在 .js文件中报告错误。与 --allowJs配合使用
		"checkJs": false,
		// 在.tsx文件里支持JSX "React"或"Preserve",
		"jsx": "preserve",
		"jsxFactory": "h", // JSX时，使用的JSX工厂函数，比如 React.createElement或 h
		"jsxFragmentFactory": "Fragment",

		/* 默认注入的库为：
		 * 对--target ES5：DOM，ES5，ScriptHost
		 * 对--target ES6：DOM，ES6，DOM.Iterable，ScriptHost
		 * 编译过程中需要引入的库文件的列表。注意：如果--lib没有指定,默认注入的库的列表
		 */
		"lib": ["DOM", "DOM.Iterable", "ESNext", "ScriptHost"],
		"typeRoots": ["node_modules/@types", "./types"],
		// types设置typeRoots目录下需要包括在编译之中的类型模块。默认情况下，该目录下的所有类型模块，都会自动包括在编译之中
		// 如不设置此项，默认会加载全部能找到的 node_modules/@types/xxx 包， 全局引入"element-plus/global"
		"types": ["vite/client", "node", "vue", "lodash-es"],
		// 根路径, 非绝对地址的模块会基于这个目录去解析，默认值是当前目录
		"baseUrl": ".",
		/* 配置具体如何解析 require/import 的导入，
		 * 模块名到基于 baseUrl的路径映射的列表（指定特殊模块的路径）
		 * 路径映射，与 baseUrl 关联
		 * 如使用jq时不想使用默认版本，而需要手动指定版本，可进行如下配置
		 */
		"paths": {
			"@/*": ["./src/*"],
			// "#/*": ["types/*"],
			"types/*": ["./types/*"],
			"tests/*": ["./tests/*"],
			"public/*": ["./public/*"]
		},
		// 不包含默认的库文件（ lib.d.ts）
		"noLib": false,

		/*** Source Map 相关配置项 ***/
		// 生成相应的 .map文件， 可用于 debug 的 sourceMap, 与inlineSourceMap二选一
		"sourceMap": true,
		// "inlineSourceMap": false, // 生成单个sourcemaps文件，而不是将每sourcemaps生成不同的文件。
		// "inlineSources": false, // 将代码与sourcemaps生成到一个文件中，要求同时设置了 --inlineSourceMap或 --sourceMap属性

		// 指定调试器应该找到 TypeScript 文件而不是源文件的位置。当TypeScript文件的位置是在运行时指定时使用此标记。路径信息会被加到 sourceMap里
		"sourceRoot": "./",

		/*
		 * 解析非相对模块名的基准目录，默认是当前目录
		 * 为调试器指定指定sourcemap映射文件的路径，而不是使用生成时的路径。
		 * 当.map文件是在运行时指定的，并不同于 js文件的地址时使用这个标记。
		 * 指定的路径会嵌入到 sourceMap里告诉调试器到哪里去找它们。
		 */
		"mapRoot": "./",

		/*** 实验性选项 ***/
		// 启用实验性的ES装饰器
		"experimentalDecorators": true,
		// 给源码里的装饰器声明加上设计类型元数据
		"emitDecoratorMetadata": true,

		/** 其他选项 **/
		// 禁止对同一个文件的不一致的引用。
		"forceConsistentCasingInFileNames": true,
		// 打印输出文件名字
		"listEmittedFiles": true,
		// 打印编译的文件(包括引用的声明文件)
		"listFiles": true,
		// 不在输出文件中生成用户自定义的帮助函数代码，如 __extends。
		"noEmitHelpers": false,
		// 报错时不生成输出文件
		"noEmitOnError": false,
		// 不截短错误消息
		"noErrorTruncation": false,
		// 忽略所有的声明文件（ *.d.ts）的类型检查 (跳过库声明文件的类型检查), 在上游仓库修复好之前暂时缓解错误
		"skipLibCheck": true,
		/* 设置是否输出 js 文件，一般是设置为 false，将打包等工作交给 Webpack 等工具
		 * 为true时, 不生成输出文件，这个一般比较少用,这个build目录下将没有任何文件,
		 * 但是会进行编译,有错误会抛出
		 */
		"noEmit": true,
		// 从tslib导入辅助工具函数(helper 函数), 比如 __extends， __rest等
		"importHelpers": true,
		// 当生成文件时指定行结束符： "crlf"（windows）或 "lf"（unix）
		"newLine": "lf",
		// 给错误和消息设置样式，使用颜色和上下文。
		"pretty": true,
		// 将每个文件作为单独的模块（与“ts.transpileModule”类似）。
		// 提供额外的一些语法检查，如文件没有模块导出会报错
		// "isolatedModules": true,
		// 显示诊断信息
		"diagnostics": true,
		// 显示详细的诊段信息
		"extendedDiagnostics": false,
		//	禁用JavaScript工程体积大小的限制
		"disableSizeLimit": false,
		// 在输出文件的开头加入BOM头（UTF-8 Byte Order Mark）
		"emitBOM": false,
		// 模块输出中不包含"use strict"指令
		"noImplicitUseStrict": false,
		// 不把 /// <reference``>或模块导入的文件加到编译文件列表。
		"noResolve": false,
		// 生成模块解析日志信息
		"traceResolution": false,
		// watch		在监视模式下运行编译器。会监视输出文件，在它们改变时重新编译。监视文件和目录的具体实现可以通过环境变量进行配置。
		// 打印编译器版本号
		"version": true
	},
	"vueCompilerOptions": {
		"target": 3
	}
}
