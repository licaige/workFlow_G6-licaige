

// 二进制数转字符串。给定一个介于0和1之间的实数（如0.72），类型为double，打印它的二进制表达式。
// 如果该数字无法精确地用32位以内的二进制表示，则打印“ERROR”。


// 方案  
// 每次将实数乘以 2，将此时的整数部分添加到二进制表示的末尾，
// 然后将整数部分置为 0，重复
// 直到小数部分为0


// 比如 0.625计算
// 0.625*2 = 1.25    1.25 => 0.25  res = 1
// 0.25*2  = 0.5     0.5 => 0.5    res = 10
// 0.5*2  = 1.0     1.0 => 0.0    res = 101
// 此时num为0  得到res = 101 
// 故0.625二进制为 0.101

var printBin = function (num) {

    // 需要用32位内二进制表示 需要限定res长度
    // 比如0.1无法精确用二进制表示
    let res = '0.'


    while (num !== 0 && res.length <= 32) {
        num *= 2

        // 判断整数部分
        let int = Math.floor(num)

        if (int == 1) {
            res += "1"
            // 去除整数部分
            num -= 1
        }
        else if (int == 0) {
            res += "0"
        }

    }

    return res.length <= 32 ? str : 'ERROR'
};


console.log(printBin(0.625));