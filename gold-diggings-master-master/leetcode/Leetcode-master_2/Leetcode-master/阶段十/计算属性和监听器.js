//设计模式不同
//Computed 是一种声明式的解决方案，我们只需要告诉 vue 某个属性的构成方法，就可以一劳永逸的放手不管了。
//Watch 是一种命令式的解决方案，我们需要自己处理 vue 某个属性依赖要素的变化，根据变化重置这个属性。
//Computed 的响应是 deep 的响应，即在计算过程中用到的对象的属性发生变化，是可以被监听到的。
//然而，一旦 Computed 没有在模板中使用，vue 是不会为我们计算 Computed 内容的。
//Watch 的响应默认为非 deep 的响应，即观测的是某个对象的字面量。当然，我们可以为 Watch 设置 deep 响应类型或是监听其属性。
// computed 的缓存功能
//computed计算属性是用来声明式的描述一个值依赖了其它的值，当所依赖的值或者变量改变时，计算属性也会跟着改变；
//根据一个现有数据去生成一个新数据，并且这两个数据会永久的建立关系，还会建立缓存，当无关数据改变的时候，不会重新计算而是直接使用缓存中的值
//有两个方法:get 和 set 当计算属性改变时会触发set函数




/**两者的使用应当是互补的：
在获得较为简单的属性，且用于展示时，用 computed 可以简化书写。
在进行比较复杂的异步操作，或有比较明显的副作用时，用 watch 逻辑更清晰。
另外，需要注意的是，watch 的计算早于同依赖的 computed。 */