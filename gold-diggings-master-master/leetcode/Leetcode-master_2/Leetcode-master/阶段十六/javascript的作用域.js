/**

javascript有全局作用域和函数作用域，全局最大的作用域是script标签包裹的部分，函数作用域可以访问全局作用域的变量，全局作用域不能访问函数作用域的变量。

词法环境：说白了就是编写代码时候决定的，是固定不变的作用域js遵循此作用域（写在哪就是找那里的作用域，例如箭头函数）



在 ES5 之前，javascript 只有函数作用域而没有块级作用域的。即，在 if 或者 for 花括号中的变量实际在外层是可以被访问的。

for(var i = 0; i < 10; i++){var j=123}
console.log(j) // 123;
不过使用 ES6 的 let 和 const 之后，就可以实现块级作用域了。

而函数作用域通过其作用域链的关系，可以实现变量的封装防止污染。子层的函数可以访问父级以及全局的变量，但反过来则不行。这样子层函数中的变量就与外层隔绝开了。

var a = 1;
function b(){
	var b = 2;
	console.log(a);
	function c(){
		// 内部可以访问外部，而外层访问不到内部
		var a = 4;
		var c = 3;
		console.log(a); // 4 不会污染
		console.log(b); // 2
	}
	c();
}

console.log(b());
console.log(a);


js是使用的词法作用域，所以当代码被加载时作用域已经被限定。
作用域只会引用当前作用域用到的 上层作用域的变量 其他没用到的将会随该函数一起推出调用栈

*/