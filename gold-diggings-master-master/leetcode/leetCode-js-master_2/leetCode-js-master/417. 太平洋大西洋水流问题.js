/**
 * Created by admin on 2018/12/24.
 */

/**给定一个 m x n 的非负整数矩阵来表示一片大陆上各个单元格的高度。“太平洋”处于大陆的左边界和上边界，
 * 而“大西洋”处于大陆的右边界和下边界。
 * 规定水流只能按照上、下、左、右四个方向流动，且只能从高到低或者在同等高度上流动。
 * 请找出那些水流既可以流动到“太平洋”，又能流动到“大西洋”的陆地单元的坐标。
 * 提示：
 * 输出坐标的顺序不重要
 * m 和 n 都小于150
 *
 * 给定下面的 5x5 矩阵:
 * 太平洋 ~   ~   ~   ~   ~
 * ~  1   2   2   3  (5) *
 * ~  3   2   3  (4) (4) *
 * ~  2   4  (5)  3   1  *
 * ~ (6) (7)  1   4   5  *
 * ~ (5)  1   1   2   4  *
 * *   *   *   *   * 大西洋
 * 返回:
 * [[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] (上图中带括号的单元).
 */

/**生成2个矩阵，一个表示，L2R可行的点，一个表示R2L可行的点
 * 取2者的交集，都可行的的点为可以左右流动的点
 *
 * 如何确定可以流到指定地点的点？
 * 以L2R为例，最右边和最下面的肯定可以，从这些点开始dfs遍历，就可以得到L2R可行的点
 *
 * 注意：matrix不一定是正方形；matrix可能为空；
 * @param {number[][]} matrix
 * @return {number[][]}
 */
var pacificAtlantic = function (matrix) {
    let res = [];
    let L2R = [];
    let R2L = [];
    if (!matrix.length) return [];
    const dfs = (m, x, y, visited, pre) => {
        if (x < 0 || y < 0 || x >= m.length || y >= m[0].length || visited[x][y] || m[x][y] < pre) return;

        visited[x][y] = 1;
        dfs(m, x + 1, y, visited, matrix[x][y]);
        dfs(m, x - 1, y, visited, matrix[x][y]);
        dfs(m, x, y + 1, visited, matrix[x][y]);
        dfs(m, x, y - 1, visited, matrix[x][y]);
    };

    for (let i = 0, len = matrix.length; i < len; i++) {
        L2R.push(new Array(matrix[0].length));
        R2L.push(new Array(matrix[0].length));
    }

    for (let i = 0, m = matrix.length; i < m; i++) {
        dfs(matrix, i, 0, R2L, matrix[i][0]);
        dfs(matrix, i, matrix[0].length - 1, L2R, matrix[i][matrix[0].length - 1]);
    }
    for (let i = 0, n = matrix[0].length; i < n; i++) {
        dfs(matrix, 0, i, R2L, matrix[0][i]);
        dfs(matrix, matrix.length - 1, i, L2R, matrix[matrix.length - 1][i]);
    }

    for (let i = 0, m = matrix.length; i < m; i++) {
        for (let j = 0, n = matrix[0].length; j < n; j++) {
            if (L2R[i][j] && R2L[i][j]) res.push([i, j])
        }
    }

    console.log(res);
    return res;
};



var matrix = [
    [1, 2, 2, 3, 5],
    [3, 2, 3, 4, 4],
    [2, 4, 5, 3, 1],
    [6, 7, 1, 4, 5],
    [5, 1, 1, 2, 4],
];

matrix = [
    [19,16,16,12,14,0,17,11,2,0,18,9,13,16,8,8,8,13,17,9,16,9,4,7,1,19,10,7,0,15],
    [0,11,4,14,9,0,6,13,16,5,19,9,4,5,4,12,0,13,0,7,9,12,13,15,3,7,4,9,15,1],
    [13,14,12,12,12,16,6,15,13,1,8,9,11,14,14,10,19,11,10,0,5,18,4,12,7,13,17,15,18,1],
    [16,14,19,5,8,2,11,17,7,1,4,6,5,18,7,15,6,19,18,12,1,14,2,2,0,9,15,14,13,19],
    [17,4,12,9,12,10,12,10,4,5,12,7,2,12,18,10,10,8,6,1,5,13,10,3,5,3,11,4,8,11],
    [8,19,18,9,6,2,7,3,19,6,0,17,9,12,11,1,15,11,18,1,8,11,1,11,16,7,8,17,15,0],
    [7,0,5,11,1,7,12,18,12,1,5,2,11,7,18,12,0,11,9,18,5,2,3,1,1,1,8,14,19,5],
    [2,14,2,16,17,19,10,16,1,16,16,3,19,12,13,17,19,12,16,10,16,8,16,12,6,12,13,17,9,12],
    [8,1,10,5,7,0,15,19,8,15,4,12,18,18,13,11,5,2,8,3,15,4,3,7,7,14,15,11,6,16],
    [0,5,13,19,1,1,2,4,16,2,16,9,15,15,10,10,18,11,17,1,5,14,5,19,7,0,13,7,13,7],
    [11,6,16,12,4,2,9,11,17,19,12,10,6,16,17,5,1,18,19,7,15,1,14,0,3,19,7,3,4,13],
    [4,11,8,10,10,19,7,18,4,2,2,14,6,9,18,14,2,16,5,3,19,17,4,3,7,1,12,2,4,3],
    [14,16,3,11,13,13,6,16,18,0,17,19,4,1,14,12,4,17,5,19,8,13,15,3,15,4,1,14,12,10],
    [13,2,12,2,16,12,19,10,19,12,19,14,12,17,16,3,13,7,3,15,16,7,10,15,14,10,6,5,2,18]
]

pacificAtlantic(matrix)