/**
 * Created by doit on 2020/8/15.
 */

/**给定一个整数 n，返回 n! 结果尾数中零的数量。
 *
 * 示例 1:
 * 输入: 3
 * 输出: 0
 * 解释: 3! = 6, 尾数中没有零。
 *
 * 示例 2:
 * 输入: 5
 * 输出: 1
 * 解释: 5! = 120, 尾数中有 1 个零.
 * 说明: 你算法的时间复杂度应为 O(log n) 。
 */

/**只计算尾数中的0，产生0只有 2 * 5， 4 * 5，6 * 5，8 * 5
 * 看来只有偶数和5可以产生尾数0，偶数肯定多余5的数量，因此数有多少个5就可以了
 * 似乎  (n / 5) 取整数就是结果？
 *
 * 测试，输入，结果错误 - -!
 *
 * 原来 25 的时候结果为6，为什么？
 *
 * 考虑 (25 及其倍数 50) * 4 = 100， 125 * 8 = 1000， 5^n * 2^n = 1e+n
 *
 * 这些时候会多出0
 *
 * 所以这种情况必须考虑进来
 *
 * @param {number} n
 * @return {number}
 */
var trailingZeroes = function (n) {
    let res = 0;

    while (n >= 5) {
        res += n / 5 | 0;
        n /= 5;
    }

    return res;
};

