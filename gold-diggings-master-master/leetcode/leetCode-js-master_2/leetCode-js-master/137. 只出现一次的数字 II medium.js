/**
 * Created by doit on 2019/4/15.
 */

/**给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现了一次的元素。
 *
 *说明：
 *
 *你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？
 *
 *示例 1:
 *
 *输入: [2,2,3,2]
 *输出: 3
 *示例 2:
 *
 *输入: [0,1,0,1,0,1,99]
 *输出: 99
 */

/**道理我都懂，但是这么写是什么鬼系列。。。
 * 思路的关键点在于设计一个出现3次就归0的模式
 * 出现一次的数字保存在b01
 * 出现两次的数字保存在a10
 * 出现三次就归零
 *
 * -1 & any = any
 * any & ~any = 0
 *
 * @param {number[]} nums
 * @return {number}
 */
var singleNumber = function(nums) {
    let a10 = 0;
    let b01 = 0;

    // 即使看了评论，我也不清楚a,b究竟是什么鬼玩意

    nums.forEach(n => {
        //状态转换
        b01 = (b01 ^ n) & ~a10;
        a10 = (a10 ^ n) & ~b01;
    });

    return b01;
};

console.log(singleNumber([1, 1, 1, 2, 2, 2, 99]));