/**
 * Created by doit on 2020/6/10.
 */

/**给定一个二维平面，平面上有 n 个点，求最多有多少个点在同一条直线上。
 * 示例 1:
 * 输入: [[1,1],[2,2],[3,3]]
 * 输出: 3
 * 解释:
 * ^
 * |
 * |        o
 * |     o
 * |  o  
 * +------------->
 * 0  1  2  3  4
 *
 * 示例 2:
 * 输入: [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]
 * 输出: 4
 * 解释:
 * ^
 * |
 * |  o
 * |     o        o
 * |        o
 * |  o        o
 * +------------------->
 * 0  1  2  3  4  5  6
 */

/**暴力解法：每次取一个点，计算与其共线的最多点的数量
 * 计算完所有点，那么最多的点就出来了。
 *
 * 难点：
 * 1.判断共线需要计算斜率，那么斜率精度会不准(最大公约数解决)
 * 2.重复的点如何处理
 *
 * @param {number[][]} points
 * @return {number}
 */
var maxPoints = function (points) {
    if (points.length < 3) return points.length;

    let max = 0;
    for (let i = 0; i < points.length; i++) {
        let [x1, y1] = points[i];

        let newKs = {}; //记录以[x1, y1]为起点，有多少个点与其共线
        let same = 1;   //与[x1, y1]重合的点数量
        let tempMax = 1;

        //对于已经计算过的点，可以不用重复计算，故j可以从 i + 1开始
        for (let j = i + 1; j < points.length; j++) {
            // if (i === j) continue;
            let [x2, y2] = points[j];
            let [dx, dy] = [x1 - x2, y1 - y2];
            if (dx === 0 && dy === 0) {
                same++;
                continue;
            }
            let d = Math.abs(_gcd(dx, dy));
            if (d !== 0) {
                dx /= d;
                dy /= d;
            }
            if (dx === 0) dy = 1;   //平行于Y轴就是共线，防止出现 '1/0' '2/0'这种，计算成不共线
            if (dy === 0) dx = 1;   //同上
            let k = `${dx * dy < 0 ? '-' : ''}${Math.abs(dx)}/${Math.abs(dy)}`;

            let gradient = newKs[k];

            newKs[k] = !gradient ? 2 : gradient + 1;
            tempMax = Math.max(tempMax, newKs[k]);
        }
        max = Math.max(max, tempMax + same - 1);    //减去重复的自己
    }


    function _gcd(x, y) {
        if (!y) return x;
        return _gcd(y, x % y);
    }

    return max;
};

let test = [
    [[[1, 1], [3, 2], [5, 3], [4, 1], [2, 3], [1, 4]], 4],
    [[[1, 1], [1, 1], [2, 3]], 3],
    [[[1, 1], [1, 1], [1, 1]], 3],
    [[[1, 1], [1, 1], [0, 0], [3, 4], [4, 5], [5, 6], [7, 8], [8, 9]], 5],
    [[[1, 1], [1, 1], [2, 2], [2, 2]], 4],
    [[[15, 12], [9, 10], [-16, 3], [-15, 15], [11, -10], [-5, 20], [-3, -15], [-11, -8], [-8, -3], [3, 6], [15, -14], [-16, -18], [-6, -8], [14, 9], [-1, -7], [-1, -2], [3, 11], [6, 20], [10, -7], [0, 14], [19, -18], [-10, -15], [-17, -1], [8, 7], [20, -18], [-4, -9], [-9, 16], [10, 14], [-14, -15], [-2, -10], [-18, 9], [7, -5], [-12, 11], [-17, -6], [5, -17], [-2, -20], [15, -2], [-5, -16], [1, -20], [19, -12], [-14, -1], [18, 10], [1, -20], [-15, 19], [-18, 13], [13, -3], [-16, -17], [1, 0], [20, -18], [7, 19], [1, -6], [-7, -11], [7, 1], [-15, 12], [-1, 7], [-3, -13], [-11, 2], [-17, -5], [-12, -14], [15, -3], [15, -11], [7, 3], [19, 7], [-15, 19], [10, -14], [-14, 5], [0, -1], [-12, -4], [4, 18], [7, -3], [-5, -3], [1, -11], [1, -1], [2, 16], [6, -6], [-17, 9], [14, 3], [-13, 8], [-9, 14], [-5, -1], [-18, -17], [9, -10], [19, 19], [16, 7], [3, 7], [-18, -12], [-11, 12], [-15, 20], [-3, 4], [-18, 1], [13, 17], [-16, -15], [-9, -9], [15, 8], [19, -9], [9, -17]], 6],
];

test.forEach(t => {
    if (maxPoints(t[0]) !== t[1]) {
        console.log(maxPoints(t[0]), t[1]);
    }
})














