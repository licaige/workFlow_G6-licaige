// 力扣（LeetCode）：https://leetcode-cn.com/problems/sort-colors

// 给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。
// 此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。

// 注意:不能使用代码库中的排序函数来解决这道题。

// 示例:
// 输入: [2,0,2,1,1,0]
// 输出: [0,0,1,1,2,2]


// 方法一：一个直观的解决方案是使用计数排序的两趟扫描算法。首先，迭代计算出0、1 和 2 元素的个数，然后按照0、1、2的排序，重写当前数组。


// 方法二：两次遍历
// 第一次遍历把所有 0 交换到前面
// 第二次遍历把所有 2 交换到后面


// 方法三：
// 在遍历的时候将为0(最小)的元素先删除然后加入到数组开头，
// 在遍历的时候将为2(最大)的元素先删除然后加入到数组末尾，
// 此时需要注意遍历的下标和数组长度变化需要作相应调整。




// 方法四：借鉴原地快排的思想，使用双指针和游标 i
// 如果 nums[i] 等于 0 就和左指针交换
// 如果 nums[i] 等于 2 就和右指针交换
// 如果 nums[i] 等于 1 就遍历游标
var sortColors = function(nums) {
  let left = 0
  let right = nums.length - 1
  let i = 0

  while(i <= right) {
      if (nums[i] === 0) {
          [nums[i], nums[left]] = [nums[left], nums[i]]
          left++
          i++
      } else if (nums[i] === 2) {
          [nums[i], nums[right]] = [nums[right], nums[i]]
          right--
      } else {
          i++
      }
  }
  return nums
};
