(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{427:function(t,s,e){t.exports=e.p+"assets/img/cssom1.20f49104.png"},591:function(t,s,e){"use strict";e.r(s);var a=e(45),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"cssom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cssom"}},[t._v("#")]),t._v(" CSSOM")]),t._v(" "),a("p",[t._v("CSSOM 是 CSS 的对象模型，在 W3C 标准中，它包含两个部分：描述样式表和规则等 CSS 的模型部分（CSSOM），和元素视图相关的 View 部分（CSSOM View）。")]),t._v(" "),a("p",[t._v("CSSOM View 相当于扩展的 DOM 的 API，在实际使用中，CSSOM View 比 CSSOM 更常用一些，因为我们很少需要用代码去动态地管理样式表。")]),t._v(" "),a("h2",{attrs:{id:"cssom-样式和规则模型部分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cssom-样式和规则模型部分"}},[t._v("#")]),t._v(" CSSOM 样式和规则模型部分")]),t._v(" "),a("p",[t._v("CSS 中样式表的模型，可以让我们直接使用 CSSOM API 去操作它们生成的样式表。")]),t._v(" "),a("h3",{attrs:{id:"document-stylesheets"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#document-stylesheets"}},[t._v("#")]),t._v(" document.styleSheets")]),t._v(" "),a("p",[t._v("document.styleSheets 属性表示文档中的所有样式表，这是一个只读的列表，我们可以用方括号运算符下标访问样式表，也可以使用 item 方法来访问，它有 length 属性表示文档中的样式表数量")]),t._v(" "),a("p",[a("strong",[t._v("样式表只能使用 style 标签或者 link 标签创建，无法用 CSSOM API 来创建样式表，但是我们可以修改样式表中的内容。")]),t._v(" 因为在文档的样式表加载时，一个 CSSStyleSheet 对象由浏览器自动创建并插入至文档的 Document.styleSheets 列表中。由于样式表列表不能直接修改，我们没有什么有效的手段去手动创建一个新的 CSSStyleSheet 对象（不过 Constructable Stylesheet Objects 很快会来到 web 平台，而且 Blink 早已支持）。需要创建新的样式表就直接在文档中插入 style 或 link 元素吧。")]),t._v(" "),a("p",[t._v("document.styleSheets 返回的是一个 StyleSheetList（CSSStyleSheet[]），CSSStyleSheet 接口代表了一个样式表，并允许检查和编辑样式表中的规则列表，它继承自父类型 "),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/StyleSheet",target:"_blank",rel:"noopener noreferrer"}},[t._v("StyleSheet"),a("OutboundLink")],1),t._v("。一个 CSS 样式表包含了一组表示规则的 CSSRule 对象。每条 CSS 规则可以通过与之相关联的对象进行操作，这些规则被包含在 CSSRuleList 内，可以通过样式表的 cssRules (en-US) 属性获取。")]),t._v(" "),a("p",[t._v("CSSStyleSheet 获取 cssRules 属性返回一个实时的 CSSRuleList，其中包含组成样式表的 CSSRule 对象的一个最新列表。CSSStyleRule 表示一条 CSS 样式规则。它实现了 CSSRule 接口，它由两个属性：selectorText 和 style。")]),t._v(" "),a("p",[t._v("selectorText 部分是一个字符串。")]),t._v(" "),a("p",[t._v("style 部分是一个样式表，它跟我们元素的 style 属性是一样的类型，所以我们可以像修改内联样式一样，直接改变属性修改规则中的具体 CSS 属性定义，也可以使用 cssText 这样的工具属性。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("document.styleSheets -> StyleSheetList（CSSStyleSheet[]）->CSSStyleSheet.cssRules -> CSSRuleList（CSSStyleRule[]）-> CSSStyleRule实现了CSSRule 接口，它由两个属性selectorText 和 style\n")])])]),a("h4",{attrs:{id:"cssstylesheet-insertrule"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cssstylesheet-insertrule"}},[t._v("#")]),t._v(" CSSStyleSheet.insertRule()")]),t._v(" "),a("p",[t._v("用来给当前样式表插入新的样式规则")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("styleSheets"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertRule")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'p {color: pink;}'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("尽管 insertRule() 是 CSSStyleSheet 的一个方法，但它实际插入的地方是 CSSStyleSheet.cssRules 的内部 CSSRuleList。")]),t._v(" "),a("h4",{attrs:{id:"cssstylesheet-deleterule"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cssstylesheet-deleterule"}},[t._v("#")]),t._v(" CSSStyleSheet.deleteRule()")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("styleSheets"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("deleteRule")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h4",{attrs:{id:"cssrules-下的操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cssrules-下的操作"}},[t._v("#")]),t._v(" cssRules 下的操作")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("styleSheets"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertRule")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'div {color: blue;}'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" cssStyleRule "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("styleSheets"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cssRules"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回值：{selectorText: 'div', style: CSSStyleDeclaration, styleMap: StylePropertyMap, type: 1, cssText: 'div { color: blue; }', …}")]),t._v("\ncssStyleRule"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fontWeight "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bold'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 就像我们在 DOM 上修改样式一样")]),t._v("\n")])])]),a("h3",{attrs:{id:"window-getcomputedstyle-element-pseudoelt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#window-getcomputedstyle-element-pseudoelt"}},[t._v("#")]),t._v(" window.getComputedStyle(element, [pseudoElt])")]),t._v(" "),a("p",[t._v("CSSOM 还提供了一个非常重要的方法，来获取一个元素最终经过 CSS 计算得到的属性：")]),t._v(" "),a("p",[t._v("语法："),a("code",[t._v("window.getComputedStyle(element, [pseudoElt])")])]),t._v(" "),a("p",[t._v("第一个参数就是我们要获取属性的元素，第二个参数是可选的，用于选择伪元素。返回值 style 是一个实时的 CSSStyleDeclaration 对象，当元素的样式更改时，它会自动更新本身。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" demo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'demo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" style "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getComputedStyle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("demo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 例如：可以获取demo元素的滚动属性来判断它是否可滚动")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不过这个判断只是说明元素的样式属性规定元素是否可滚动，但是当前元素是否真的有滚动条，还得看具体的元素中的内容有没有溢出")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("style"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("overflowY "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hidden'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//还有另外一个写法是：document.defaultView.getComputedStyle(demo)，解决在 firefox3.6 上访问子框架内的样式")]),t._v("\n")])])]),a("h2",{attrs:{id:"cssom-view"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cssom-view"}},[t._v("#")]),t._v(" CSSOM View")]),t._v(" "),a("p",[t._v("CSSOM View 这一部分的 API 可以视为 DOM API 的扩展，它在原本的 Element 接口上，添加了显示相关的功能。")]),t._v(" "),a("h3",{attrs:{id:"窗口-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#窗口-api"}},[t._v("#")]),t._v(" 窗口 API")]),t._v(" "),a("p",[t._v("窗口 API 用于操作浏览器窗口的位置、尺寸等：")]),t._v(" "),a("ul",[a("li",[t._v("moveTo(x, y) 窗口移动到屏幕的特定坐标")]),t._v(" "),a("li",[t._v("moveBy(x, y) 窗口移动特定距离")]),t._v(" "),a("li",[t._v("resizeTo(x, y) 改变窗口大小到特定尺寸")]),t._v(" "),a("li",[t._v("resizeBy(x, y) 改变窗口大小特定尺寸")])]),t._v(" "),a("p",[t._v("关于 moveTo 等以上属性不生效的问题可以看一下此回答"),a("a",{attrs:{href:"https://stackoverflow.com/questions/38527683/javascript-window-moveby-not-working",target:"_blank",rel:"noopener noreferrer"}},[t._v("javascript-window-moveby-not-working"),a("OutboundLink")],1),t._v("，看一下此示例："),a("a",{attrs:{href:"https://www.w3schools.com/jsref/tryit.asp?filename=tryjsref_win_moveto",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.w3schools.com/jsref/tryit.asp?filename=tryjsref_win_moveto"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("此外，窗口 API 还规定了 window.open() 的第三个参数：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'about:blank'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'_blank'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'width=100,height=100,left=100,right=100'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("不过，一些游览器处于安全考虑没有实现，也不适用于移动端浏览器。")]),t._v(" "),a("h3",{attrs:{id:"滚动-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#滚动-api"}},[t._v("#")]),t._v(" 滚动 API")]),t._v(" "),a("p",[t._v("要想理解滚动，首先我们必须要建立一个概念，在 PC 时代，浏览器可视区域的滚动和内部元素的滚动关系是比较模糊的，但是在移动端越来越重要的今天，两者必须分开看待，两者的性能和行为都有区别。")]),t._v(" "),a("h4",{attrs:{id:"视口滚动-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#视口滚动-api"}},[t._v("#")]),t._v(" 视口滚动 API")]),t._v(" "),a("p",[t._v("可视区域（视口）滚动行为由 window 对象上的一组 API 控制：")]),t._v(" "),a("ul",[a("li",[t._v("scrollX 视口的属性，表示 X 方向上的当前滚动距离，有别名 pageXOffset")]),t._v(" "),a("li",[t._v("scrollY 视口的属性，表示 Y 方向上的当前滚动距离，有别名 pageYOffset")]),t._v(" "),a("li",[t._v("scroll(x, y) 使得页面滚动到特定的位置，有别名 scrollTo，"),a("strong",[t._v("支持传入配置型参数 {top, left}")])]),t._v(" "),a("li",[t._v("scrollBy(x, y) 使得页面滚动特定的距离，支持传入配置型参数 {top, left}")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("scroll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 相当于")]),t._v("\nwindow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("scroll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  top"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  left"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  behavior"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'smooth'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// behavior 表示滚动行为，支持参数：smooth (平滑滚动)，instant (瞬间滚动)，默认值 auto，效果视浏览器而定")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("通过这些属性和方法，我们可以读取视口的滚动位置和操纵视口滚动。不过，要想监听视口滚动事件，需要在 document 对象上绑定事件监听函数。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'scroll'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("scrollY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h4",{attrs:{id:"元素滚动-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#元素滚动-api"}},[t._v("#")]),t._v(" 元素滚动 API")]),t._v(" "),a("p",[t._v("在 Element 接口中为了支持滚动，加入了以下 API：")]),t._v(" "),a("ul",[a("li",[t._v("scrollTop 元素的属性，可以"),a("strong",[t._v("获取或设置")]),t._v("一个元素的内容在垂直方向（Y 方向）的滚动距离，这里的滚动指的是元素内部的滚动。")])]),t._v(" "),a("p",[t._v("一个元素的 scrollTop 值 是这个元素的内容顶部（卷起来的）到它的视口可见内容（的顶部）的距离的度量。当一个元素的内容没有产生垂直方向的滚动条，那么它的 scrollTop 值为 0。")]),t._v(" "),a("ul",[a("li",[t._v("scrollLeft 元素的属性，可以"),a("strong",[t._v("获取或设置")]),t._v("元素滚动条到元素左边（X 方向）的距离")]),t._v(" "),a("li",[t._v("scrollWidth 元素的属性，表示元素内部的滚动内容的宽度，一般来说会大于等于元素的宽度")])]),t._v(" "),a("p",[t._v("scrollWidth 值等于元素在不使用水平滚动条的情况下适合视口中的所有内容所需的最小宽度。 宽度的测量方式与 clientWidth 相同："),a("strong",[t._v("它包含元素的内边距，但不包括边框，外边距或垂直滚动条（如果存在）")]),t._v("。 它还可以包括伪元素的宽度，例如::before 或::after。 如果元素的内容可以完全展示而不需要水平滚动条，则其 scrollWidth 等于 clientWidth")]),t._v(" "),a("ul",[a("li",[t._v("scrollHeight 元素的属性，表示元素内部的滚动内容的高度（包括由于溢出导致视图中不可见的内容），一般来说会大于等于元素的高度")]),t._v(" "),a("li",[t._v("scroll(x, y) 使元素中的内容滚动到特定的位置，有别名 scrollTo，支持传入配置型参数 {top, left}")]),t._v(" "),a("li",[t._v("scrollBy(x, y) 使元素中的内容滚动一段距离，支持传入配置型参数 {top, left}")]),t._v(" "),a("li",[t._v("scrollIntoView(argument) 滚动元素所在的父元素，使得元素滚动到可见区域，可以通过 argument 来指定滚到中间、开始或者就近。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("scrollIntoView")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等同于 element.scrollIntoView(true)")]),t._v("\nelement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("scrollIntoView")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("alignToTop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Boolean 型参数")]),t._v("\nelement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("scrollIntoView")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("scrollIntoViewOptions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Object 型参数")]),t._v("\n")])])]),a("p",[t._v("参数：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v('alignToTop 是一个 Boolean，如果为 true，元素的顶端将和其所在滚动区的可视区域的顶端对齐。相应的 scrollIntoViewOptions: {block: "start", inline: "nearest"}。这是这个参数的默认值。如果为 false，元素的底端将和其所在滚动区的可视区域的底端对齐。相应的 scrollIntoViewOptions: {block: "end", inline: "nearest"}。')])]),t._v(" "),a("li",[a("p",[t._v('scrollIntoViewOptions 是一个对象，包含 behavior、block、inline。其中 block 定义垂直方向的对齐 "start", "center", "end", 或 "nearest"之一。默认为 "start"。inline 定义水平方向的对齐，“start"，“center”， “end” 或 “nearest” 之一，默认为 “nearest”。')])])]),t._v(" "),a("p",[t._v("除此之外，可滚动的元素也支持 scroll 事件，在元素上监听它的事件即可：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" demo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'demo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ndemo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'scroll'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("scrollTop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"布局-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布局-api"}},[t._v("#")]),t._v(" 布局 API")]),t._v(" "),a("h4",{attrs:{id:"全局布局信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全局布局信息"}},[t._v("#")]),t._v(" 全局布局信息")]),t._v(" "),a("p",[t._v("window 对象上提供了一些全局的尺寸信息，它是通过属性来提供的。")]),t._v(" "),a("p",[a("img",{attrs:{src:e(427),alt:""}})]),t._v(" "),a("p",[t._v("虽然 window 有这么多相关信息，主要使用的是 innerHeight、innerWidth 和 devicePixelRatio 三个属性。")]),t._v(" "),a("h4",{attrs:{id:"元素布局信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#元素布局信息"}},[t._v("#")]),t._v(" 元素布局信息")]),t._v(" "),a("p",[t._v("我们首先要消除“元素有宽高”这样的概念，事实上只有盒有宽和高，元素是没有的，元素产生盒，有些元素可能产生多个盒。所以我们获取宽高的对象应该是“盒”，于是 CSSOM View 为 Element 类添加了两个方法：")]),t._v(" "),a("ul",[a("li",[t._v("getClientRects()")])]),t._v(" "),a("p",[t._v("返回一个列表，里面包含元素对应的每一个盒所占据的客户端矩形区域，这里每一个矩形区域可以用 x，y，width，height 来获取他们的尺寸。")]),t._v(" "),a("p",[t._v("返回值是 ClientRect 对象集合，该对象是与该元素相关的 CSS 边框（元素设置边框后能出来几个矩形，就说明返回的列表 length 是几）。")]),t._v(" "),a("p",[t._v("起初，微软打算让这个方法给文本的每一行都返回一个 TextRectangle，但是，CSSOM 工作草案规定它应该给每个边框返回一个 ClientRect。因此，对于行内元素这两个定义是相同的，但是对于块级元素，Mozilla 只会返回一个矩形。（"),a("strong",[t._v("对于行内元素，元素内部的每一行都会有一个边框；对于块级元素，如果里面没有其他元素，一整块元素只有一个边框")]),t._v("）。")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://stackoverflow.com/questions/53684908/when-does-element-getclientrects-return-a-collection-of-multiple-objects",target:"_blank",rel:"noopener noreferrer"}},[t._v("一个 getClientRects 使用的答疑"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[t._v("getBoundingClientRect()")])]),t._v(" "),a("p",[t._v("这个 API 的设计更接近我们脑海中的元素盒的概念，它返回元素对应的所有盒的包裹的矩形区域。")]),t._v(" "),a("p",[t._v("返回值是一个 DOMRect 对象，是包含整个元素的最小矩形（包括 padding 和 border-width）。该对象使用 left、top、right、bottom、x、y、width 和 height 这几个以像素为单位的只读属性描述整个矩形的位置和大小。除了 width 和 height 以外的属性是相对于视图窗口的左上角来计算的。")]),t._v(" "),a("p",[t._v("以上两个 API 获取的矩形区域都是相对于视口的坐标，这意味着是受滚动影响的，如果我们要获取相对坐标，或者包含滚动区域的坐标，需要一点小技巧：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" offsetX "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("documentElement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBoundingClientRect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBoundingClientRect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y\n")])])]),a("h2",{attrs:{id:"一些元素尺寸区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一些元素尺寸区别"}},[t._v("#")]),t._v(" 一些元素尺寸区别")]),t._v(" "),a("h3",{attrs:{id:"元素宽度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#元素宽度"}},[t._v("#")]),t._v(" 元素宽度")]),t._v(" "),a("ul",[a("li",[t._v("clientWidth 元素内部的宽度，包括内边距（padding），但不包括边框（border）、外边距（margin）和垂直滚动条（如果存在）。对于内联元素以及没有 CSS 样式的元素 clientWidth 为 0。")]),t._v(" "),a("li",[t._v("offsetWidth 元素的布局宽度，一个典型的 offsetWidth 包含元素的边框 (border)、水平线上的内边距 (padding)、竖直方向滚动条 (scrollbar)（如果存在的话）、以及 CSS 设置的宽度 (width) 的值。各浏览器的 offsetWidth 可能有所不同，这个值是个四舍五入的整数，如果需要精确的小数，使用 getBoundingClientRect()")]),t._v(" "),a("li",[t._v("scrollWidth 元素内容的宽度，指元素在不使用水平滚动条的情况下适合视口中的所有内容所需的最小宽度。 宽度的测量方式与 clientWidth 相同："),a("strong",[t._v("它包含元素的内边距，但不包括边框，外边距或垂直滚动条（如果存在）")]),t._v("。 它还可以包括伪元素的宽度，例如::before 或::after。 如果元素的内容可以完整展示而不需要水平滚动条，则其 scrollWidth 等于 clientWidth")])]),t._v(" "),a("p",[t._v("元素的高度也类似。")]),t._v(" "),a("h3",{attrs:{id:"元素的定位"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#元素的定位"}},[t._v("#")]),t._v(" 元素的定位")]),t._v(" "),a("ul",[a("li",[t._v("clientTop 元素顶部边框的宽度，即 border-top 的宽度")]),t._v(" "),a("li",[t._v("offsetTop 元素外边框相对于其 offsetParent 元素的顶部内边距（边框内围）的距离")]),t._v(" "),a("li",[t._v("scrollTop 可以"),a("strong",[t._v("获取或设置")]),t._v("一个元素的内容在垂直方向（Y 方向）的滚动距离，这里的滚动指的是元素内部的滚动。")]),t._v(" "),a("li",[t._v("通过 getBoundingClientRect() 获取的元素尺寸中，top 或者 y 是元素布局尺寸（边框）到视口的距离")])]),t._v(" "),a("blockquote",[a("p",[t._v('HTMLElement.offsetParent，是一个只读属性，返回一个指向最近的（指包含层级上的最近）包含该元素的定位元素或者最近的 table, td, th, body 元素。当元素的 style.display 设置为 "none" 或者该元素的 style.position 被设为 "fixed"时，offsetParent 返回 null。')])]),t._v(" "),a("h2",{attrs:{id:"推荐阅读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#推荐阅读"}},[t._v("#")]),t._v(" 推荐阅读")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2009/09/find_element_s_position_using_javascript.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("用 Javascript 获取页面元素的位置"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.cnblogs.com/dong-xu/p/7150715.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("详细解析 JavaScript 获取元素的坐标"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=n.exports}}]);