(window.webpackJsonp=window.webpackJsonp||[]).push([[141],{616:function(e,t,o){"use strict";o.r(t);var _=o(45),v=Object(_.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"tsconfig-json-配置文件"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#tsconfig-json-配置文件"}},[e._v("#")]),e._v(" tsconfig.json 配置文件")]),e._v(" "),o("p",[e._v("tsconfig.json 是 TypeScript 项目的配置文件。如果一个目录下存在一个 tsconfig.json，则说明该目录是 TypeScript 项目的根目录。")]),e._v(" "),o("p",[e._v("通常 tsconfig.json 文件主要包含两部分内容："),o("strong",[e._v("指定待编译文件")]),e._v("和"),o("strong",[e._v("配置编译选项")]),e._v("。")]),e._v(" "),o("p",[e._v("在简单的练手时，我们可以使用 "),o("code",[e._v("tsc")]),e._v(" 命令编译少量的 TypeScript 文件，例如")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("tsc --outFile demo.js --target es3 --module amd index.ts\n")])])]),o("p",[e._v("但是如果实际开发的项目，就需要使用 tsconfig.json，把用到的配置都写进 tsconfig.json，这样就不用每次编译都手动输入配置，也方便团队协作开发。")]),e._v(" "),o("h2",{attrs:{id:"初始化-tsconfig-json"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#初始化-tsconfig-json"}},[e._v("#")]),e._v(" 初始化 tsconfig.json")]),e._v(" "),o("ol",[o("li",[e._v("手动在项目根目录（或其他目录）创建 tsconfig.json 文件并填写配置；")]),e._v(" "),o("li",[e._v("通过 "),o("code",[e._v("tsc --init")]),e._v(" 初始化 tsconfig.json 文件。")])]),e._v(" "),o("h2",{attrs:{id:"指定需要编译的目录"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#指定需要编译的目录"}},[e._v("#")]),e._v(" 指定需要编译的目录")]),e._v(" "),o("p",[e._v("在不指定输入文件的情况下执行 "),o("code",[e._v("tsc")]),e._v(" 命令，默认从当前目录开始编译，编译所有 "),o("code",[e._v(".ts")]),e._v(" 文件，并且从当前目录开始逐级向上级目录搜索查找 tsconfig.json 文件。")]),e._v(" "),o("p",[e._v("另外，"),o("code",[e._v("tsc")]),e._v(" 命令可以通过参数 "),o("code",[e._v("--project")]),e._v(" 或 "),o("code",[e._v("-p")]),e._v(" 指定需要编译的目录，该目录需要包含一个 tsconfig.json 文件（或者包含有效配置的 "),o("code",[e._v(".json")]),e._v(" 文件）。")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("/*\n  文件目录：\n  ├─src/\n  │  ├─index.ts\n  │  └─tsconfig.json\n  ├─package.json\n*/\n$ tsc --project src\n")])])]),o("p",[o("strong",[e._v("注意：tsconfig.json 文件可以是个空文件，那么所有默认的文件都会以默认配置选项编译。")])]),e._v(" "),o("h2",{attrs:{id:"tsconfig-json-配置介绍"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#tsconfig-json-配置介绍"}},[e._v("#")]),e._v(" tsconfig.json 配置介绍")]),e._v(" "),o("h3",{attrs:{id:"compileonsave"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#compileonsave"}},[e._v("#")]),e._v(" compileOnSave")]),e._v(" "),o("p",[o("code",[e._v("compileOnSave")]),e._v(" ：类型 "),o("code",[e._v("Boolean")]),e._v("，该属性是 tsconfig.json 的顶级属性，设置保存文件的时候自动编译，需要编辑器支持。")]),e._v(" "),o("h3",{attrs:{id:"compileroptions"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#compileroptions"}},[e._v("#")]),e._v(" compilerOptions")]),e._v(" "),o("p",[o("code",[e._v("compilerOptions")]),e._v(" ：类型 "),o("code",[e._v("Object")]),e._v("，配置编译选项")]),e._v(" "),o("p",[e._v("若 "),o("code",[e._v("compilerOptions")]),e._v(" 属性被忽略，则编译器会使用默认值。可以查看 "),o("a",{attrs:{href:"https://www.typescriptlang.org/docs/handbook/compiler-options.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("编译选项文档"),o("OutboundLink")],1)]),e._v(" "),o("h4",{attrs:{id:"项目选项"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#项目选项"}},[e._v("#")]),e._v(" 项目选项")]),e._v(" "),o("p",[e._v("这些选项用于配置项目的运行时期望、编译后的 JavaScript 的输出方式和位置，以及与现有 JavaScript 代码的集成级别。")]),e._v(" "),o("ul",[o("li",[e._v("target：类型 "),o("code",[e._v("String")]),e._v('，指定编译代码的目标，不同的目标将影响代码中使用的特性是否会被降级，可用的值有 ► "ES3"（默认值） ► "ES5" ► "ES6"/ "ES2015" ► "ES2016" ► "ES2017" ► "ES2018" ► "ES2019" ► "ES2020" ► "ESNext"')]),e._v(" "),o("li",[e._v("module：类型 "),o("code",[e._v("String")]),e._v("，指定生成哪个模块系统代码，可以为 "),o("code",[e._v('"None"')]),e._v("、"),o("code",[e._v('"CommonJS"')]),e._v("、"),o("code",[e._v('"AMD"')]),e._v("、"),o("code",[e._v('"System"')]),e._v("、"),o("code",[e._v('"UMD"')]),e._v("、"),o("code",[e._v('"ES6"')]),e._v("/"),o("code",[e._v('"ES2015"')]),e._v("、"),o("code",[e._v("ES2020")]),e._v("、"),o("code",[e._v("ES2022")]),e._v("、"),o("code",[e._v("ESNext")]),e._v("、"),o("code",[e._v("Node12")]),e._v(" 或者 "),o("code",[e._v("Nodenext")]),e._v("。默认值为 "),o("code",[e._v('target === "ES3" or "ES5" ? "CommonJS" : "ES6/ES2015"')])]),e._v(" "),o("li",[e._v("jsx：类型 "),o("code",[e._v('"react"|preserve|"react-native"|"react-jsx"|"react-jsxdev"')]),e._v("，在 .tsx 文件里支持 JSX，没有默认值")]),e._v(" "),o("li",[e._v("jsxFactory：类型 "),o("code",[e._v("String")]),e._v("，指定 "),o("code",[e._v('"jsx": "react"')]),e._v("时，使用的 JSX 工厂函数，比如 "),o("code",[e._v("React.createElement")]),e._v(" 或 "),o("code",[e._v("h")]),e._v("，配合 "),o("code",[e._v("jsx")]),e._v(" 属性一起用。默认值为 "),o("code",[e._v("React.createElement")])]),e._v(" "),o("li",[e._v("incremental：类型 "),o("code",[e._v("Boolean")]),e._v("，TS 编译器在第一次编译之后会生成一个储存编译信息的文件，第二次编译会在第一次的基础上进行增量编译，可以提高编译的速度。默认值分为两种情况，当 "),o("code",[e._v("composite")]),e._v(" 为 "),o("code",[e._v("true")]),e._v(" 时，默认值为 "),o("code",[e._v("true")]),e._v("，否则为 "),o("code",[e._v("false")])]),e._v(" "),o("li",[e._v("tsBuildInfoFile：类型 "),o("code",[e._v("String")]),e._v("，增量编译文件的存储位置，配合 "),o("code",[e._v("--incremental")]),e._v(" 一起使用")]),e._v(" "),o("li",[e._v("declaration：类型 "),o("code",[e._v("Boolean")]),e._v("，构建 ts 文件时是否生成相应的 "),o("code",[e._v(".d.ts")]),e._v(" 声明文件，开启后会自动生成声明文件，这些 "),o("code",[e._v(".d.ts")]),e._v("文件描述了模块导出的 API 类型，具体行为可以在 "),o("a",{attrs:{href:"https://www.typescriptlang.org/play?#code/C4TwDgpgBAtghmAKuCAGAPIgfFAvFAbwCgooBtAaygEsA7KCiEAewDMpEBdALg8s6IBfIkQDGzWgGdgUZnkIlSUOLwCMAGkWkARrwDkAJj1CxEycwA2EAHQXmAcwAUoSG1kBKIi+jwwq+b7IkBjebsxYlExuoezMAqRAA",target:"_blank",rel:"noopener noreferrer"}},[e._v("playground"),o("OutboundLink")],1),e._v(" 中编写代码，并在右侧的 .D.TS 观察输出。默认值分为两种情况，当 "),o("code",[e._v("composite")]),e._v(" 为 "),o("code",[e._v("true")]),e._v(" 时，默认值为 "),o("code",[e._v("true")]),e._v("，否则为 "),o("code",[e._v("false")])]),e._v(" "),o("li",[e._v("declarationDir：类型 "),o("code",[e._v("String")]),e._v("，指定生成的声明文件存放目录，默认输出路径为生成的目标文件相同位置")]),e._v(" "),o("li",[e._v("declarationMap：类型 "),o("code",[e._v("Boolean")]),e._v("，为声明文件生成 sourceMap，默认值为 "),o("code",[e._v("false")])]),e._v(" "),o("li",[e._v("emitDeclarationOnly：类型 "),o("code",[e._v("Boolean")]),e._v("，只生成声明文件，而不会生成 js 文件，默认值为 "),o("code",[e._v("false")])]),e._v(" "),o("li",[e._v("sourceMap：类型 "),o("code",[e._v("Boolean")]),e._v("，生成目标文件的 "),o("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Tools/Debugger/How_to/Use_a_source_map",target:"_blank",rel:"noopener noreferrer"}},[e._v("sourceMap 文件"),o("OutboundLink")],1),e._v("（.map 文件），这些文件允许调试器和其他工具在使用实际生成的 JavaScript 文件时，显示原始的 TypeScript 代码，默认值 "),o("code",[e._v("false")])]),e._v(" "),o("li",[e._v("lib：TS 需要引用的库，即声明文件包，es5 默认引用 DOM、ES5、ScriptHost，es6 默认引用 DOM、ES6、DOM.Iterable、ScriptHost。 如果需要使用 es 的高级版本特性，通常都需要配置，可能的值有： ► ES5 ► ES6 ► ES2015 ► ES7 ► ES2016 ► ES2017 ► ES2018 ► ESNext ► DOM ► DOM.Iterable ► WebWorker ► ScriptHost ► ES2015.Core ► ES2015.Collection ► ES2015.Generator ► ES2015.Iterable ► ES2015.Promise ► ES2015.Proxy ► ES2015.Reflect ► ES2015.Symbol ► ES2015.Symbol.WellKnown ► ES2016.Array.Include ► ES2017.object ► ES2017.Intl ► ES2017.SharedMemory ► ES2017.String ► ES2017.TypedArrays ► ES2018.Intl ► ES2018.Promise ► ES2018.RegExp ► ESNext.AsyncIterable ► ESNext.Array ► ESNext.Intl ► ESNext.Symbol，具体详情可在 "),o("a",{attrs:{href:"https://github.com/microsoft/TypeScript/tree/master/lib",target:"_blank",rel:"noopener noreferrer"}},[e._v("TypeScript 源码"),o("OutboundLink")],1),e._v("中查看完成列表。")]),e._v(" "),o("li",[e._v("project：类型 "),o("code",[e._v("String")]),e._v("，编译指定目录下的项目，这个目录应该包含一个 tsconfig.json 文件")]),e._v(" "),o("li",[e._v("composite：类型 "),o("code",[e._v("Boolean")]),e._v("，确保 TypeScript 可以确定在哪里可以找到引用项目的输出以编译项目。默认为 "),o("code",[e._v("true")]),e._v("。 "),o("a",{attrs:{href:"https://juejin.cn/post/6844904004615421966",target:"_blank",rel:"noopener noreferrer"}},[e._v("查看具体示例"),o("OutboundLink")],1)]),e._v(" "),o("li",[e._v("outDir：类型 "),o("code",[e._v("String")]),e._v("，指定输出目录，默认值为目标文件当前位置")]),e._v(" "),o("li",[e._v("outFile：类型 "),o("code",[e._v("String")]),e._v("，将多个相互依赖的文件生成一个文件，可以用在 AMD 模块中，即开启时应设置 "),o("code",[e._v('"module": "AMD"')])]),e._v(" "),o("li",[e._v("allowJs：类型 "),o("code",[e._v("Boolean")]),e._v(" ，允许编译器编译 JS 或 JSX 文件，默认值 "),o("code",[e._v("false")])]),e._v(" "),o("li",[e._v("checkJs：类型 "),o("code",[e._v("Boolean")]),e._v("，允许在 JS 文件中报错，通常与 allowJS 一起使用，默认值为 "),o("code",[e._v("false")])])]),e._v(" "),o("h4",{attrs:{id:"严格模式"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#严格模式"}},[e._v("#")]),e._v(" 严格模式")]),e._v(" "),o("p",[e._v("TypeScript 兼容 JavaScript 代码，默认选项允许相当大的灵活性来适应这些模式。在迁移 JavaScript 代码时，可以先暂时关闭一些严格模式的设置。在正式的 TypeScript 项目中，推荐开启 strict 设置启用更严格的类型检查，以减少错误的发生。")]),e._v(" "),o("ul",[o("li",[e._v("strict：类型 "),o("code",[e._v("Boolean")]),e._v("，开启所有严格的类型检查选项，启用 "),o("code",[e._v("--strict")]),e._v(" 相当于启用 "),o("code",[e._v("--noImplicitAny")]),e._v("、"),o("code",[e._v("--noImplicitThis")]),e._v("、"),o("code",[e._v("--alwaysStrict")]),e._v("、"),o("code",[e._v("--strictBindCallApply")]),e._v("、"),o("code",[e._v("--strictNullChecks")]),e._v("、"),o("code",[e._v("--strictFunctionTypes")]),e._v("、"),o("code",[e._v("--strictPropertyInitialization")]),e._v("，默认值为 false")]),e._v(" "),o("li",[e._v("alwaysStrict：类型 "),o("code",[e._v("Boolean")]),e._v("，保证编译出的文件是 ECMAScript 的严格模式并为每个源文件插入 "),o("code",[e._v('"use strict";')]),e._v(" 语句，默认值为 "),o("code",[e._v("false")])]),e._v(" "),o("li",[e._v("noImplicitAny：类型 "),o("code",[e._v("Boolean")]),e._v("不允许隐式的 any 类型，默认值为 "),o("code",[e._v("false")])]),e._v(" "),o("li",[e._v("strictNullChecks：类型 "),o("code",[e._v("Boolean")]),e._v("，更严格地检查 null 和 undefined 类型，不允许把 null、undefined 赋值给其他类型的变量，例如，数组的 find 方法的返回类型将是更严格的 "),o("code",[e._v("T | undefined")])]),e._v(" "),o("li",[e._v("strictFunctionTypes：类型 "),o("code",[e._v("Boolean")]),e._v("，开启时，不允许函数参数双向协变（参数的变型规则是，true 是逆变，false 是双向协变）")]),e._v(" "),o("li",[e._v("strictPropertyInitialization：类型 "),o("code",[e._v("Boolean")]),e._v("，类的实例属性必须初始化，"),o("code",[e._v("--strictNullChecks")]),e._v(" 必须启用此选项才能生效")]),e._v(" "),o("li",[e._v("strictBindCallApply：类型 "),o("code",[e._v("Boolean")]),e._v("，更严格的 bind/call/apply 检查，比如会检查参数的类型与函数类型是否一致。")]),e._v(" "),o("li",[e._v("noImplicitThis：类型 "),o("code",[e._v("Boolean")]),e._v("，不允许 this 有隐式 any 类型")])]),e._v(" "),o("h4",{attrs:{id:"额外检查"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#额外检查"}},[e._v("#")]),e._v(" 额外检查")]),e._v(" "),o("p",[e._v("TypeScript 支持一些额外的代码检查，在某种程度上介于编译器和静态分析工具之间。")]),e._v(" "),o("ul",[o("li",[e._v("noUnusedLocals：检查只声明但未使用的局部变量（只提示不报错）")]),e._v(" "),o("li",[e._v("noUnusedParameters：检查未使用的函数参数（只提示不报错）")]),e._v(" "),o("li",[e._v("noFallthroughCasesInSwitch：类型 "),o("code",[e._v("Boolean")]),e._v("，报告 switch 语句的 fallthrough 错误（即，不允许 switch 的 case 语句贯穿），开启后，如果 switch 语句的流程分支中没有 break 或 return，则会抛出错误，从而避免了意外的 switch 判断穿透导致的问题。默认值为 false")]),e._v(" "),o("li",[e._v("noImplicitReturns：类型 "),o("code",[e._v("Boolean")]),e._v("，当函数的所有返回路径代码都没有返回值时报错，即如果代码的逻辑分支中有返回，则所有的逻辑分支都应该有返回。默认值为 "),o("code",[e._v("false")])]),e._v(" "),o("li",[e._v("allowUmdGlobalAccess：类型 "),o("code",[e._v("Boolean")]),e._v("，允许在模块中用全局变量的方式访问 umd 模块，默认值为 "),o("code",[e._v("false")])]),e._v(" "),o("li",[e._v("allowUnreachableCode：类型 "),o("code",[e._v("Boolean")]),e._v("，不报告执行不到的代码错误，默认值为 "),o("code",[e._v("false")]),e._v("（不建议修改此选项）")]),e._v(" "),o("li",[e._v("allowUnusedLabels：类型 "),o("code",[e._v("Boolean")]),e._v("，不报告未使用的标签错误，默认为 "),o("code",[e._v("false")])])]),e._v(" "),o("h4",{attrs:{id:"模块解析"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#模块解析"}},[e._v("#")]),e._v(" 模块解析")]),e._v(" "),o("p",[e._v("模块解析部分的编译选项会影响代码中模块导入以及编译相关的配置。")]),e._v(" "),o("ul",[o("li",[e._v("moduleResolution：类型 "),o("code",[e._v("String")]),e._v("，模块解析策略，默认值为 "),o("code",[e._v('module === "AMD" or "UMD" or "System" or ES6/ES2015 ? "Classic" : "Node"')]),e._v("。在目前的新代码中，我们一般都是使用 Node，而不是用 Classic。具体的模块解析策略可以"),o("a",{attrs:{href:"https://www.typescriptlang.org/docs/handbook/module-resolution.html#module-resolution-strategies",target:"_blank",rel:"noopener noreferrer"}},[e._v("查看详情"),o("OutboundLink")],1)]),e._v(" "),o("li",[e._v("baseUrl：类型 "),o("code",[e._v("String")]),e._v("，解析非相对模块名的基准目录，默认是当前目录。实践证明，当 ts 中 import 引用非相对路径的模块，例如 "),o("code",[e._v('import "foo"')]),e._v("，ts 会首先查询 node_modules 目录，如果没有查找到需要的，就会根据 baseUrl 设置的路径目录查找该模块。可以查看"),o("a",{attrs:{href:"https://www.tslang.cn/docs/handbook/module-resolution.html#base-url",target:"_blank",rel:"noopener noreferrer"}},[e._v("模块解析文档"),o("OutboundLink")],1),e._v("了解详情")]),e._v(" "),o("li",[e._v("paths：类型 "),o("code",[e._v("Object")]),e._v("，基于 baseUrl 的路径映射列表，用来将模块路径重新映射到相对于 baseUrl 定位的其他路径配置。这里我们可以将 paths 理解为 webpack 的 alias 别名配置。默认值为 "),o("code",[e._v("{}")]),e._v("，查看"),o("a",{attrs:{href:"https://www.tslang.cn/docs/handbook/module-resolution.html#path-mapping",target:"_blank",rel:"noopener noreferrer"}},[e._v("模块解析文档"),o("OutboundLink")],1),e._v("了解详情")]),e._v(" "),o("li",[e._v("rootDir：类型 "),o("code",[e._v("String")]),e._v("，仅用来控制 "),o("code",[e._v("--outDir")]),e._v(" 输出的目录结构，默认值为基于 input 传入的文件列表计算来的公共根路径")]),e._v(" "),o("li",[e._v("rootDirs：类型 "),o("code",[e._v("Array<String>")]),e._v("，根（root）文件夹列表，可以指定多个目录作为根目录，这个选项允许编译器在这些“虚拟”目录中解析相对应的模块导入，就像他们被合并到同一个目录中一样，查看 "),o("a",{attrs:{href:"https://www.tslang.cn/docs/handbook/module-resolution.html#virtual-directories-with-rootdirs",target:"_blank",rel:"noopener noreferrer"}},[e._v("模块解析文档"),o("OutboundLink")],1),e._v(" 了解详情")]),e._v(" "),o("li",[e._v("typeRoots：类型 "),o("code",[e._v("Array<String>")]),e._v("，声明文件包根目录，默认是 node_modules/@types，如果 typeRoots 指定，则仅包括 typeRoots 下面的包。")]),e._v(" "),o("li",[e._v("types：类型 "),o("code",[e._v("Array<String>")]),e._v("，加载的声明文件包，默认情况下，所有的 typeRoots 包都将被包含在编译过程中。如果指定 types 属性，将仅检索指定名称的 @types 包。当 types 是 "),o("code",[e._v("[]")]),e._v(" 时，表示禁止自动包含任何 @types 包。可以"),o("a",{attrs:{href:"https://www.tslang.cn/docs/handbook/tsconfig-json.html#types-typeroots-and-types",target:"_blank",rel:"noopener noreferrer"}},[e._v("查看详情"),o("OutboundLink")],1),e._v("了解。")]),e._v(" "),o("li",[e._v("allowSyntheticDefaultImports：类型 "),o("code",[e._v("Boolean")]),e._v(" ，允许从没有设置默认导出的模块中默认导入，即使一个模块没有默认导出（"),o("code",[e._v("export default")]),e._v("），也可以在其他模块中像导入包含默认导出模块一样的方式导入这个模块。这并不影响代码的输出，仅为了类型检查。默认值有两种情况：1、 "),o("code",[e._v('module === "system"')]),e._v(" 或设置了 "),o("code",[e._v("esModuleInterop")]),e._v(" 且 "),o("code",[e._v("module")]),e._v(" 不为 "),o("code",[e._v("es2015")]),e._v("/"),o("code",[e._v("esnext")]),e._v(" 时，默认值为 "),o("code",[e._v("true")]),e._v("；2、其他情况下默认值为 "),o("code",[e._v("false")]),e._v("。具体含义可以查看"),o("a",{attrs:{href:"https://tasaid.com/blog/2019022017450863.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("TypeScript 中的多种 import 解义"),o("OutboundLink")],1)]),e._v(" "),o("li",[e._v("esModuleInterop：类型 "),o("code",[e._v("Boolean")]),e._v("，指的是 ES 模块的互操作性。在默认情况下，TypeScript 像 ES6 模块一样对待 CommonJS/AMD/UMD，但是此时的 TypeScript 代码转译会导致不符合 ES6 模块规范，不过，开启 esModuleInterop 后，这些问题都将得到修复。一般情况下，在启用 esModuleInterop 时，会同时启用 allowSyntheticDefaultImports。")])]),e._v(" "),o("h4",{attrs:{id:"source-maps"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#source-maps"}},[e._v("#")]),e._v(" Source Maps")]),e._v(" "),o("p",[e._v("为了支持丰富的调试工具并未开发人员提供有意义的崩溃报告，TypeScript 支持生成符合 JavaScript Source Map 标准的附加文件（即 .map 文件）")]),e._v(" "),o("ul",[o("li",[e._v("sourceRoot：类型 "),o("code",[e._v("String")]),e._v("，指定 TypeScript 源文件的路径，以便调试器定位。当 TypeScript 文件的位置是在运行时指定时使用此标记，路径信息会被加到 "),o("code",[e._v("sourceMap")]),e._v("里。默认值为 "),o("code",[e._v("false")])]),e._v(" "),o("li",[e._v("mapRoot：类型 "),o("code",[e._v("String")]),e._v("，为调试器指定 sourcemap 文件的路径，而不是使用生成的文件位置。当 .map 文件是在运行时指定的，并且不同于生成的目标文件地址时使用这个选项，指定的路径会嵌入到 sourceMap 里告诉调试器到哪里去找它们。")]),e._v(" "),o("li",[e._v("inlineSourceMap：类型 "),o("code",[e._v("Boolean")]),e._v("，生成单个 sourcemaps 文件，而不是将 sourcemaps 生成不同的文件。默认值为 "),o("code",[e._v("false")])]),e._v(" "),o("li",[e._v("inlineSources：类型 "),o("code",[e._v("Boolean")]),e._v("，生成目标文件的 inlineSource，inlineSource 会包含在生成的 js 文件中，默认为 "),o("code",[e._v("false")]),e._v("，设置为 "),o("code",[e._v("true")]),e._v(" 时要求同时设置 --inlineSourceMap 或 --sourceMap 属性")])]),e._v(" "),o("h4",{attrs:{id:"其他选项"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#其他选项"}},[e._v("#")]),e._v(" 其他选项")]),e._v(" "),o("ul",[o("li",[e._v("skipLibChcek：类型 "),o("code",[e._v("Boolean")]),e._v("，表示可以跳过检查声明文件，如果开启了这个选项，可以节省编译期的时间，但可能会牺牲类型系统的准确性，不过还是推荐设置为 "),o("code",[e._v("true")])]),e._v(" "),o("li",[e._v("diagnostics：类型 "),o("code",[e._v("Boolean")]),e._v("，打印诊断信息，默认值为 "),o("code",[e._v("false")])]),e._v(" "),o("li",[e._v("extendedDiagnostics：类型 "),o("code",[e._v("Boolean")]),e._v("，显示详细的诊断信息，默认值为 "),o("code",[e._v("false")])]),e._v(" "),o("li",[e._v("isolatedModules：类型 "),o("code",[e._v("Boolean")]),e._v('，将每个文件作为单独的模块（与 "ts.transpileModule" 类似），默认值为 '),o("code",[e._v("false")])]),e._v(" "),o("li",[e._v("forceConsistentCasingFileNames：类型 "),o("code",[e._v("Boolean")]),e._v("，禁止对同一文件使用大小写不一致的引用，TypeScript 对文件的大小写是敏感的，如果有一部分的开发人员在大小写敏感的系统开发，而另一部分的开发人员在大小写不敏感的系统开发，就可能出现问题。默认值为 "),o("code",[e._v("false")])]),e._v(" "),o("li",[e._v("removeComments：类型 "),o("code",[e._v("Boolean")]),e._v("，删除注释，除了以 "),o("code",[e._v("/!*")]),e._v("开头的版权信息，默认值为 "),o("code",[e._v("false")])]),e._v(" "),o("li",[e._v("noEmit：类型 "),o("code",[e._v("Boolean")]),e._v("，不输出文件，即编译后不会生成任何 JS 文件，默认为 false")]),e._v(" "),o("li",[e._v("noEmitOnError：类型 "),o("code",[e._v("Boolean")]),e._v("，发生错误时不输出任何文件，默认为 false")]),e._v(" "),o("li",[e._v("noEmitHelpers：类型 "),o("code",[e._v("Boolean")]),e._v("，不在输出文件中生成用户自定义的帮助函数，如 "),o("code",[e._v("__extends")]),e._v("，减小体积，需要额外安装，常配合 importHelpers 一起使用")]),e._v(" "),o("li",[e._v("importHelper：类型 "),o("code",[e._v("Boolean")]),e._v("，通过 tslib 引入 helper 函数（比如 extends,rest 等），文件必须是模块。tslib 是 TypeScript 运行时库，其中包含所有 TypeScript 辅助函数，需要安装 tslib 依赖。")]),e._v(" "),o("li",[e._v("disableSizeLimit：类型 "),o("code",[e._v("Boolean")]),e._v("，取消 JavaScript 代码体积大小不能超过 20M 的限制，默认为 "),o("code",[e._v("false")])]),e._v(" "),o("li",[e._v("downlevelIteration：类型 "),o("code",[e._v("Boolean")]),e._v("，降级遍历器实现，如果 "),o("code",[e._v("target")]),e._v(" 是 es3/5，那么遍历器会有降级的实现")]),e._v(" "),o("li",[e._v("listEmittedFiles：类型 "),o("code",[e._v("Boolean")]),e._v("，打印编译后生成的文件名称，默认值为 "),o("code",[e._v("false")])]),e._v(" "),o("li",[e._v("listFiles：类型 "),o("code",[e._v("Boolean")]),e._v("，在编译过程中打印文件名称（包括引用的声明文件），默认值为 "),o("code",[e._v("false")])]),e._v(" "),o("li",[e._v("locale：类型 "),o("code",[e._v("String")]),e._v(" 用于显示错误消息的语言环境，例如 zh-CN，默认值根据环境确定。")]),e._v(" "),o("li",[e._v("keyofStringOnly：类型 "),o("code",[e._v("Boolean")]),e._v("，设置 ts 的 keyof 关键字仅解析字符串值的属性名称（不解析数字或 symbol 属性），默认值为 "),o("code",[e._v("false")])])]),e._v(" "),o("h3",{attrs:{id:"exclude"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#exclude"}},[e._v("#")]),e._v(" exclude")]),e._v(" "),o("p",[o("code",[e._v("exclude")]),e._v("：类型："),o("code",[e._v("Array<string>")]),e._v("，指定编译器需要排除的文件或文件夹列表。可以排除 "),o("code",[e._v("include")]),e._v(" 包含的文件路径，但是不能排除 file 直接指定的文件。")]),e._v(" "),o("p",[o("code",[e._v("exclude")]),e._v(" 属性默认不包括 node_modules。")]),e._v(" "),o("p",[e._v("支持 glob 通配符")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("*")]),e._v(" 匹配 0 或 多个字符（不包括目录分隔符）")]),e._v(" "),o("li",[o("code",[e._v("?")]),e._v(" 匹配一个任意字符（不包括目录分隔符）")]),e._v(" "),o("li",[o("code",[e._v("**/")]),e._v("递归匹配任意子目录")])]),e._v(" "),o("h3",{attrs:{id:"include"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#include"}},[e._v("#")]),e._v(" include")]),e._v(" "),o("p",[o("code",[e._v("include")]),e._v("：类型："),o("code",[e._v("Array<string>")]),e._v("，指定编译需要编译的文件或目录列表，跟 "),o("code",[e._v("exclude")]),e._v(" 属性一样，支持 glob 通配符。")]),e._v(" "),o("h3",{attrs:{id:"files"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#files"}},[e._v("#")]),e._v(" files")]),e._v(" "),o("p",[o("code",[e._v("files")]),e._v("：类型："),o("code",[e._v("Array<string>")]),e._v("，指定需要编译的单个文件列表，是一个 相对路径 或者 绝对路径 的文件列表。默认包含当前目录和子目录下所有 TypeScript 文件。")]),e._v(" "),o("p",[e._v("当入口文件依赖其他文件时，不需要将被依赖文件也制定到 "),o("code",[e._v("files")]),e._v(" 中，因为编译器会自动将所有的依赖文件归纳为编译对象。")]),e._v(" "),o("h3",{attrs:{id:"extends"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#extends"}},[e._v("#")]),e._v(" extends")]),e._v(" "),o("p",[o("code",[e._v("extends")]),e._v("：类型 "),o("code",[e._v("String")]),e._v(" ，引入其他配置文件，继承配置。该选项属性值是一个字符串，表示的是另一个配置文件的访问路径。")]),e._v(" "),o("p",[o("code",[e._v("extends")]),e._v(" 是 tsconfig.json 文件里的顶级属性（与 compilerOptions、files、include 和 exclude 等一样）。")]),e._v(" "),o("p",[o("code",[e._v("extends")]),e._v(" 的值是一个字符串，包含指向另一个要继承文件的路径，继承的配置文件的相对路径在解析时是相对于它所在的文件的。在原文件里的配置先被加载，然后被来自继承文件里的配置重写。如果发现循环引用，则会报错。")]),e._v(" "),o("h3",{attrs:{id:"references"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[e._v("#")]),e._v(" references")]),e._v(" "),o("p",[o("code",[e._v("references")]),e._v("：指定工程引用依赖")]),e._v(" "),o("h3",{attrs:{id:"typeacquisition"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#typeacquisition"}},[e._v("#")]),e._v(" typeAcquisition")]),e._v(" "),o("p",[o("code",[e._v("typeAcquisition")]),e._v("：设置自动引入库类型定义文件（.d.ts）相关")]),e._v(" "),o("p",[e._v("包含 3 个子属性：")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("enable")]),e._v("：布尔类型，是否开启自动引入库类型定义文件（.d.ts），默认为 false")]),e._v(" "),o("li",[o("code",[e._v("include")]),e._v("：数组类型，允许自动引入的库名，如："),o("code",[e._v('["jquery", "lodash"]')])]),e._v(" "),o("li",[o("code",[e._v("exclude")]),e._v("：数组类型，排除的库名")])]),e._v(" "),o("h2",{attrs:{id:"注意"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[e._v("#")]),e._v(" 注意")]),e._v(" "),o("h3",{attrs:{id:"命令行参数优先级"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#命令行参数优先级"}},[e._v("#")]),e._v(" 命令行参数优先级")]),e._v(" "),o("p",[o("code",[e._v("tsc")]),e._v(" 的命令行上指定的编译选项具有更高的优先级，会覆盖 tsconfig.json 中的相应选项。")]),e._v(" "),o("h3",{attrs:{id:"files、include、exclude"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#files、include、exclude"}},[e._v("#")]),e._v(" files、include、exclude")]),e._v(" "),o("p",[e._v("如果一个 glob 模式里的某部分只包含 "),o("code",[e._v("*")]),e._v(" 或 "),o("code",[e._v(".*")]),e._v("，那么仅有支持的文件扩展名类型被包含在内（比如默认 "),o("code",[e._v("ts")]),e._v("、"),o("code",[e._v("tsx")]),e._v(" 和 "),o("code",[e._v(".d.ts")]),e._v("，如果 "),o("code",[e._v('"allowJs": true')]),e._v("，那么，还包含 "),o("code",[e._v(".js")]),e._v(" 和 "),o("code",[e._v(".jsx")]),e._v("）。")]),e._v(" "),o("p",[e._v("如果 "),o("code",[e._v("files")]),e._v(" 和 "),o("code",[e._v("include")]),e._v(" 都没有被指定，编译器默认包含当前目录和子目录下所有的 TypeScript 文件（"),o("code",[e._v(".ts")]),e._v("、"),o("code",[e._v(".tsx")]),e._v(" 和 "),o("code",[e._v(".d.ts")]),e._v("，如果"),o("code",[e._v('"allowJs": true')]),e._v("，那么，还包含 "),o("code",[e._v(".js")]),e._v(" 和 "),o("code",[e._v(".jsx")]),e._v("），但是排除 "),o("code",[e._v("exclude")]),e._v(" 中指定的文件。")]),e._v(" "),o("p",[e._v("如果指定了 "),o("code",[e._v("files")]),e._v(" 和 "),o("code",[e._v("include")]),e._v("，编译器会将它们包含的文件取并集。不过使用 "),o("code",[e._v("outDir")]),e._v(" 指定的目录下的文件永远会被编译器排除，除非明确地使用 "),o("code",[e._v("files")]),e._v(" 将其包含进来（这时就算用 "),o("code",[e._v("exclude")]),e._v(" 排除也没用）。")]),e._v(" "),o("p",[e._v("使用 "),o("code",[e._v("include")]),e._v(" 引入的文件可以使用 "),o("code",[e._v("exclude")]),e._v(" 属性过滤，但是通过 "),o("code",[e._v("files")]),e._v(" 属性明确指定的文件始终会被包含在内，不管 "),o("code",[e._v("exclude")]),e._v(" 如何设置。如果没有特殊指定，"),o("code",[e._v("exclude")]),e._v(" 默认情况下会排除 "),o("code",[e._v("node_modules")]),e._v("、"),o("code",[e._v("bower_components")]),e._v("、"),o("code",[e._v("jspm_packages")]),e._v(" 和 "),o("code",[e._v("<outDir>")]),e._v(" 目录。")]),e._v(" "),o("p",[e._v("编译器不会去引入那些可能作为输出的文件；比如，假设我们包含了 "),o("code",[e._v("index.ts")]),e._v("，那么 "),o("code",[e._v("index.d.ts")]),e._v(" 和 "),o("code",[e._v("index.js")]),e._v(" 会被排除在外。通常来讲，不推荐只用扩展名的不同来区分同目录下的文件。")]),e._v(" "),o("h3",{attrs:{id:"types"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#types"}},[e._v("#")]),e._v(" types")]),e._v(" "),o("p",[e._v('只有当你使用了全局环境声明的时候，自动包含才显得重要，如果没有用到全局声明的时候，就可以不需要自动包含，使用 import "module" 的时候，ts 会自动去 node_modules & node_modules/@types 文件夹查找对应声明文件包。')]),e._v(" "),o("h3",{attrs:{id:"jsx"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#jsx"}},[e._v("#")]),e._v(" jsx")]),e._v(" "),o("p",[e._v("jsx 五种类型的区别：")]),e._v(" "),o("p",[e._v("preserve：生成的代码中会保留 JSX 以供其他转换操作（例如 Babel）进一步使用，输出文件的扩展名为 "),o("code",[e._v(".jsx")])]),e._v(" "),o("p",[e._v("react：会生成 "),o("code",[e._v("React.createElement")]),e._v("（"),o("code",[e._v("React")]),e._v(" 标识符是写死的硬编码，所以必须保证 React(大写的 R) 是可用的），即将 jsx 改为等价的"),o("code",[e._v("React.createElement")]),e._v("的调用，在使用之前不需要再进行转换操作了，输出文件的扩展名为 "),o("code",[e._v(".js")])]),e._v(" "),o("p",[e._v("react-native 模式相当于 preserve 它也保留了所有的 JSX，但是输出文件的扩展名是 "),o("code",[e._v(".js")])]),e._v(" "),o("p",[e._v("react-jsx：改为 "),o("code",[e._v("__jsx")]),e._v(" 调用，输出文件的扩展名是 "),o("code",[e._v(".js")])]),e._v(" "),o("p",[e._v("react-jsxdev：改为 "),o("code",[e._v("__jsxDEV")]),e._v(" 调用，输出文件的扩展名是 "),o("code",[e._v(".js")])]),e._v(" "),o("h3",{attrs:{id:"module"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#module"}},[e._v("#")]),e._v(" module")]),e._v(" "),o("ul",[o("li",[e._v("只有 "),o("code",[e._v('"AMD"')]),e._v(" 和 "),o("code",[e._v('"System"')]),e._v(" 能和 --outFile 一起使用。")]),e._v(" "),o("li",[o("code",[e._v('"ES6"')]),e._v("/"),o("code",[e._v("ES2015")]),e._v(" 可使用在 "),o("code",[e._v("target")]),e._v(" 为 "),o("code",[e._v('"ES5"')]),e._v(" 或更低的情况下")])]),e._v(" "),o("h3",{attrs:{id:"lib"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#lib"}},[e._v("#")]),e._v(" lib")]),e._v(" "),o("p",[e._v("安装 TypeScript 时会顺带安装一个 "),o("code",[e._v("lib.d.ts")]),e._v(" 的声明文件，并且默认包含了 ES5、DOM、WebWorker、ScriptHost 的库定义。")]),e._v(" "),o("p",[e._v("lib 配置项允许更细粒度地控制代码运行时的库定义文件，比如说 Node.js 程序，由于并不依赖浏览器环境，因此不需要包含 DOM 类型定义；而如果需要使用一些最新的、高级 ES 特性，则需要包含 ESNext 类型。")]),e._v(" "),o("h3",{attrs:{id:"paths"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#paths"}},[e._v("#")]),e._v(" paths")]),e._v(" "),o("p",[e._v("因为 paths 中配置的别名仅在类型检测时生效，所以在使用 tsc 转译或者 webpack 构建 TypeScript 代码时需要引入额外的插件将源码中的别名替换成正确的相对路径。")]),e._v(" "),o("h2",{attrs:{id:"vs-code-切换-typescript-版本"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#vs-code-切换-typescript-版本"}},[e._v("#")]),e._v(" VS Code 切换 TypeScript 版本")]),e._v(" "),o("p",[e._v("因为 VS Code 中内置了特定版本 TypeScript 语言服务，所以它天然支持 TypeScript 语法解析和类型检测，且这个内置的服务与手动安装的 TypeScript 完全隔离。因此， VS Code 支持在内置和手动安装版本之间动态切换语言服务，从而实现对不同版本的 TypeScript 的支持。")]),e._v(" "),o("p",[e._v("例如 VS Code 的 TypeScript 的版本是 4.4.3，但是我们需要用到 TypeScript 的版本是 3.9.10。")]),e._v(" "),o("h3",{attrs:{id:"安装-3-9-10-版本的-typescript"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#安装-3-9-10-版本的-typescript"}},[e._v("#")]),e._v(" 安装 3.9.10 版本的 TypeScript")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("yarn add typescript@3.9.10\n")])])]),o("h3",{attrs:{id:"切换-vs-code-使用的-typescript-版本"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#切换-vs-code-使用的-typescript-版本"}},[e._v("#")]),e._v(" 切换 VS Code 使用的 TypeScript 版本")]),e._v(" "),o("p",[e._v("点击 VS Code 底部工具栏的版本号信息（或者 cmd + shift + p 搜索切换 TypeScript 版本），从而实现 “use VS Code's Version” 和 “use WorkSapce version” 两者的切换。")]),e._v(" "),o("p",[e._v("我们也可以手动切换，在当前应用目录下的 "),o("code",[e._v(".vscode/setting.json")]),e._v(" 内添加如下命令，配置 VS Code 默认使用应用目录下安装的 TypeScript 版本提供的语法解析和类型检测服务。")]),e._v(" "),o("div",{staticClass:"language-json extra-class"},[o("pre",{pre:!0,attrs:{class:"language-json"}},[o("code",[o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),o("span",{pre:!0,attrs:{class:"token property"}},[e._v('"typescript.tsdk"')]),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token string"}},[e._v('"node_modules/typescript/lib"')]),e._v("\n"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),o("p",[o("strong",[e._v("推荐使用工作区（WorkSpace）的 TypeScript 版本")])]),e._v(" "),o("h2",{attrs:{id:"推荐阅读"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#推荐阅读"}},[e._v("#")]),e._v(" 推荐阅读")]),e._v(" "),o("h3",{attrs:{id:"配置文件"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#配置文件"}},[e._v("#")]),e._v(" 配置文件")]),e._v(" "),o("ul",[o("li",[o("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MjM5MDc4MzgxNA==&mid=2458455122&idx=1&sn=9f3431a2bbac6cd1d671f4aa90a934de&chksm=b1c22c7b86b5a56d65e61bab63b7a1d83e2b4689a6cb731160f52743ded5a83bedf032398f4a&scene=21",target:"_blank",rel:"noopener noreferrer"}},[e._v("了不起的 tsconfig.json 指南"),o("OutboundLink")],1)]),e._v(" "),o("li",[o("a",{attrs:{href:"https://blog.cjw.design/blog/old/typescript",target:"_blank",rel:"noopener noreferrer"}},[e._v("Typescript 配置文件详解"),o("OutboundLink")],1)]),e._v(" "),o("li",[o("a",{attrs:{href:"https://www.tslang.cn/docs/handbook/tsconfig-json.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("tsconfig.json"),o("OutboundLink")],1)]),e._v(" "),o("li",[o("a",{attrs:{href:"https://www.tslang.cn/docs/handbook/compiler-options.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("编译选项"),o("OutboundLink")],1)])]),e._v(" "),o("h3",{attrs:{id:"target、module"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#target、module"}},[e._v("#")]),e._v(" target、module")]),e._v(" "),o("ul",[o("li",[o("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/425740447",target:"_blank",rel:"noopener noreferrer"}},[e._v("Typescript 4.5 —— 浅谈模块能力增强"),o("OutboundLink")],1)]),e._v(" "),o("li",[o("a",{attrs:{href:"https://medium.com/@tommedema/typescript-confusion-tsconfig-json-module-moduleresolution-target-lib-explained-65db2c44b491",target:"_blank",rel:"noopener noreferrer"}},[e._v("Typescript confusion: tsconfig.json module, moduleResolution, target & lib explained"),o("OutboundLink")],1)]),e._v(" "),o("li",[o("a",{attrs:{href:"https://pengfeixc.com/blogs/javascript/typescript-module-system",target:"_blank",rel:"noopener noreferrer"}},[e._v("理解 TypeScript 的模块系统"),o("OutboundLink")],1)]),e._v(" "),o("li",[o("a",{attrs:{href:"https://tasaid.com/blog/2019022017450863.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("TypeScript 中的多种 import 解义"),o("OutboundLink")],1)]),e._v(" "),o("li",[o("a",{attrs:{href:"https://mp.weixin.qq.com/s/_RmAH6p2lyzkhqLWw8cIKw",target:"_blank",rel:"noopener noreferrer"}},[e._v("ESM的TS的module配置nodenext"),o("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=v.exports}}]);