(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{409:function(t,e,a){t.exports=a.p+"assets/img/git-cz.d069b14c.jpg"},410:function(t,e,a){t.exports=a.p+"assets/img/commitizen.3d99e200.gif"},580:function(t,e,a){"use strict";a.r(e);var s=a(45),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"让你的-commit-更有价值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#让你的-commit-更有价值"}},[t._v("#")]),t._v(" 让你的 commit 更有价值")]),t._v(" "),s("h2",{attrs:{id:"更新-cz-relax-一键初始化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更新-cz-relax-一键初始化"}},[t._v("#")]),t._v(" 更新：cz-relax 一键初始化")]),t._v(" "),s("p",[t._v("之前配置 commitizen 需要好几步，例如首先 commitizen 需要进行初始化并且选择 commitizen adapter，然后需要安装 commitlint ，最后可能还需要 husky 配置 git hooks。")]),t._v(" "),s("p",[t._v("现在，只需要两步，就可以完成上面的工作，让一切变得轻松起来。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第一步在工作目录安装 cz-relax")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" cz-relax --save-dev\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第二步初始化，如果报错提示需要使用force，请在最后添加 --force")]),t._v("\nnpx cz-relax init --language zh\n")])])]),s("h2",{attrs:{id:"提交规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#提交规范"}},[t._v("#")]),t._v(" 提交规范")]),t._v(" "),s("p",[t._v("AngularJS 在"),s("a",{attrs:{href:"https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines",target:"_blank",rel:"noopener noreferrer"}},[t._v("开发者文档"),s("OutboundLink")],1),t._v("中关于 git commit 的指导说明，提到严格的 git commit 格式规范可以在浏览项目历史的过程中看到更易读的信息，并且能用 git commit 的信息直接生成 AngularJS 的 change log 。")]),t._v(" "),s("h3",{attrs:{id:"commit-messages-格式规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commit-messages-格式规范"}},[t._v("#")]),t._v(" commit messages 格式规范")]),t._v(" "),s("p",[t._v("commit messages 由 "),s("code",[t._v("header")]),t._v(" 、"),s("code",[t._v("body")]),t._v(" 、"),s("code",[t._v("footer")]),t._v(" 组成。")]),t._v(" "),s("p",[s("code",[t._v("header")]),t._v(" 又包含 "),s("code",[t._v("type")]),t._v(" 、"),s("code",[t._v("scope")]),t._v(" 、"),s("code",[t._v("subject")]),t._v(" 。"),s("code",[t._v("header")]),t._v(" 是必需的，不过其中的 "),s("code",[t._v("scope")]),t._v(" 是可选的。")]),t._v(" "),s("p",[s("code",[t._v("body")]),t._v(" 和 "),s("code",[t._v("footer")]),t._v(" 可以省略。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("<type>(<scope>): <subject>\n// 空行\n<BLANK LINE>\n<body>\n// 空行\n<BLANK LINE>\n<footer>\n")])])]),s("blockquote",[s("p",[t._v("注：为了能在 github 以及各种 git 工具中看得更清晰，commit messages 的每一行都不要超过 100 个字符。")])]),t._v(" "),s("h3",{attrs:{id:"header"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#header"}},[t._v("#")]),t._v(" Header")]),t._v(" "),s("h4",{attrs:{id:"type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#type"}},[t._v("#")]),t._v(" Type")]),t._v(" "),s("p",[t._v("类型必须是以下几种之一：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("feat:")]),t._v(" 新功能")]),t._v(" "),s("li",[s("strong",[t._v("fix:")]),t._v(" bug 修复")]),t._v(" "),s("li",[s("strong",[t._v("docs:")]),t._v(" 仅修改文档")]),t._v(" "),s("li",[s("strong",[t._v("style:")]),t._v(" 修改格式（空格，格式化，省略分号等），对代码运行没有影响")]),t._v(" "),s("li",[s("strong",[t._v("refactor:")]),t._v(" 重构（既不是修 bug ，也不是加功能）")]),t._v(" "),s("li",[s("strong",[t._v("build:")]),t._v(" 构建流程、外部依赖变更，比如升级 npm 包、修改 webpack 配置等")]),t._v(" "),s("li",[s("strong",[t._v("perf:")]),t._v(" 性能优化")]),t._v(" "),s("li",[s("strong",[t._v("test:")]),t._v(" 测试相关")]),t._v(" "),s("li",[s("strong",[t._v("chore:")]),t._v(" 对构建过程或辅助工具和库（如文档生成）的更改")]),t._v(" "),s("li",[s("strong",[t._v("ci:")]),t._v(" ci 相关的更改")])]),t._v(" "),s("p",[t._v("除此之外，还有一个特殊的类型 "),s("strong",[t._v("revert")]),t._v(" ，如果当前提交是为了撤销之前的某次提交，应该用 "),s("code",[t._v("revert")]),t._v(" 开头，后面加上被撤销的提交的 "),s("code",[t._v("header")]),t._v("，在 "),s("code",[t._v("body")]),t._v(" 中应该注明： "),s("code",[t._v("This reverts commit <hash>.")]),t._v(" ，hash 指的就是将要被撤销的 commit SHA 。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 例如\n\nrevert: feat(user): add user type\n\nThis reverts commit ca16a365467e17915f0273392f4a13331b17617d.\n")])])]),s("h4",{attrs:{id:"scope"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scope"}},[t._v("#")]),t._v(" Scope")]),t._v(" "),s("p",[t._v("scope 可以指定提交更改的影响范围，这个视项目而定，当修改影响超过单个的 scope 时，可以指定为 "),s("code",[t._v("*")]),t._v(" 。")]),t._v(" "),s("h4",{attrs:{id:"subject"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#subject"}},[t._v("#")]),t._v(" Subject")]),t._v(" "),s("p",[s("code",[t._v("subject")]),t._v(" 是指更改的简洁描述，长度约定在 50 个字符以内，通常遵循以下几个规范：")]),t._v(" "),s("ul",[s("li",[t._v("用动词开头，第一人称现在时表述，例如："),s("code",[t._v("change")]),t._v(" 代替 "),s("code",[t._v("changed")]),t._v(" 或 "),s("code",[t._v("changes")])]),t._v(" "),s("li",[t._v("第一个字母小写")]),t._v(" "),s("li",[t._v("结尾不加句号（.）")])]),t._v(" "),s("h3",{attrs:{id:"body"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#body"}},[t._v("#")]),t._v(" Body")]),t._v(" "),s("p",[s("code",[t._v("body")]),t._v(" 部分是对本地 commit 的详细描述，可以分成多行。")]),t._v(" "),s("p",[t._v("跟 "),s("code",[t._v("subject")]),t._v(" 类似，用动词开头，第一人称现在时表述，例如："),s("code",[t._v("change")]),t._v(" 代替 "),s("code",[t._v("changed")]),t._v(" 或 "),s("code",[t._v("changes")]),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("body")]),t._v(" 应该说明修改的原因和更改前后的行为对比。")]),t._v(" "),s("h3",{attrs:{id:"footer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#footer"}},[t._v("#")]),t._v(" Footer")]),t._v(" "),s("p",[s("code",[t._v("footer")]),t._v(" 基本用在这两种情况：")]),t._v(" "),s("ul",[s("li",[t._v("不兼容的改动（ Breaking Changes ）,通常用 "),s("code",[t._v("BREAKING CHANGE:")]),t._v(" 开头，后面跟一个空格或两个换行符。剩余的部分就是用来说明这个变动的信息和迁移方法等。")]),t._v(" "),s("li",[t._v("关闭 Issue, "),s("a",{attrs:{href:"https://docs.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue",target:"_blank",rel:"noopener noreferrer"}},[t._v("github 关闭 Issue 的例子"),s("OutboundLink")],1)])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// BREAKING CHANGE: 的例子\nBREAKING CHANGE: isolate scope bindings definition has changed and\n    the inject option for the directive controller injection was removed.\n\n    To migrate the code follow the example below:\n\n    Before:\n\n    scope: {\n      myAttr: 'attribute',\n      myBind: 'bind',\n      myExpression: 'expression',\n      myEval: 'evaluate',\n      myAccessor: 'accessor'\n    }\n\n    After:\n\n    scope: {\n      myAttr: '@',\n      myBind: '@',\n      myExpression: '&',\n      // myEval - usually not useful, but in cases where the expression is assignable, you can use '='\n      myAccessor: '=' // in directive's template change myAccessor() to myAccessor\n    }\n\n    The removed `inject` wasn't generaly useful for directives so there should be no code using it.\n\n\n\n// Closes Issue 例子\nCloses #2314, #3421\n")])])]),s("h3",{attrs:{id:"完整的例子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#完整的例子"}},[t._v("#")]),t._v(" 完整的例子")]),t._v(" "),s("h4",{attrs:{id:"例一-feat"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#例一-feat"}},[t._v("#")]),t._v(" 例一: feat")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("feat($browser): onUrlChange event (popstate/hashchange/polling)\n\nAdded new event to $browser:\n- forward popstate event if available\n- forward hashchange event if popstate not available\n- do polling when neither popstate nor hashchange available\n\nBreaks $browser.onHashChange, which was removed (use onUrlChange instead)\n")])])]),s("h4",{attrs:{id:"例二-fix"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#例二-fix"}},[t._v("#")]),t._v(" 例二: fix")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("fix($compile): couple of unit tests for IE9\n\nOlder IEs serialize html uppercased, but IE9 does not...\nWould be better to expect case insensitive, unfortunately jasmine does\nnot allow to user regexps for throw expectations.\n\nCloses #392\nBreaks foo.bar api, foo.baz should be used instead\n")])])]),s("h4",{attrs:{id:"例三-style"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#例三-style"}},[t._v("#")]),t._v(" 例三: style")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("style($location): add couple of missing semi colons\n")])])]),s("h4",{attrs:{id:"查看更多例子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看更多例子"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.8sw072iehlhg",target:"_blank",rel:"noopener noreferrer"}},[t._v("查看更多例子"),s("OutboundLink")],1)]),t._v(" "),s("h3",{attrs:{id:"规范-commit-message-的好处"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#规范-commit-message-的好处"}},[t._v("#")]),t._v(" 规范 commit message 的好处")]),t._v(" "),s("ul",[s("li",[t._v("首行就是简洁实用的关键信息，方便在 git history 中快速浏览")]),t._v(" "),s("li",[t._v("具有详实的 body 和 footer ，可以清晰的看出某次提交的目的和影响")]),t._v(" "),s("li",[t._v("可以通过 type 过滤出想要查找的信息，也可以通过关键字快速查找相关提交")]),t._v(" "),s("li",[t._v("可以直接从 commit 生成 change log")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 列举几个常用的 log 参数\n\n// 输出 log 的首行\ngit log --pretty=oneline\n\n// 只输出首行的 commit 信息。不包含 hash 和 合并信息等\ngit log --pretty=format:%s\n\n// 查找有关“更新菜单配置项”的提交\ngit log --grep=\"更新菜单配置项\"\n\n// 打印出 chenfangxu 的提交\ngit log --author=chenfangxu\n\n// 红色的短 hash，黄色的 ref , 绿色的相对时间\ngit log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset'\n")])])]),s("h2",{attrs:{id:"用工具实现规范提交"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用工具实现规范提交"}},[t._v("#")]),t._v(" 用工具实现规范提交")]),t._v(" "),s("p",[t._v("上面介绍了规范提交的格式，如果让各位同学在 "),s("code",[t._v("git commit")]),t._v(" 的时候严格按照上面的规范来写，首先心智是有负担的，得记住不同的类型到底是用来定义什么的，"),s("code",[t._v("subject")]),t._v(" 怎么写，"),s("code",[t._v("body")]),t._v(" 怎么写，"),s("code",[t._v("footer")]),t._v(" 要不要写。其次，对人的规范大部分都是反人性的，所以很可能在过不了多久，就会有同学渐渐的不按照规范来写。靠意志力来控制自己严格按照规范来写是需要额外耗费一些精力的，把精力耗费在这种事情上面实在有些浪费。")]),t._v(" "),s("p",[t._v("用工具实现规范提交的方案，一种是在提交的时候就提示必填字段，另一种是在提交后校验字段是否符合规范。这两种在实际项目中都是很有必要的。")]),t._v(" "),s("h3",{attrs:{id:"commitizen"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commitizen"}},[t._v("#")]),t._v(" Commitizen")]),t._v(" "),s("blockquote",[s("p",[t._v("Zen-like commit messages for internet citizens. 嗯~~一种禅意")])]),t._v(" "),s("p",[t._v("Commitizen 是一个帮助撰写规范 commit message 的工具。他有一个命令行工具 "),s("a",{attrs:{href:"https://github.com/commitizen/cz-cli",target:"_blank",rel:"noopener noreferrer"}},[t._v("cz-cli"),s("OutboundLink")],1),t._v("，接下来会把使用 Commitizen 分成几个阶段来介绍。")]),t._v(" "),s("h3",{attrs:{id:"体验-git-cz"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#体验-git-cz"}},[t._v("#")]),t._v(" 体验 git cz")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 全局安装 Commitizen\nnpm install -g commitizen\n")])])]),s("p",[t._v("你的仓库可能还不是对 Commitizen 友好的，此时运行 "),s("code",[t._v("git cz")]),t._v(" 的效果跟 "),s("code",[t._v("git commit")]),t._v(" 一样，也就是没有效果。 不过，可以执行 "),s("code",[t._v("npx git-cz")]),t._v(" 来体验。")]),t._v(" "),s("p",[t._v("如果想直接运行 "),s("code",[t._v("git cz")]),t._v(" 实现语义化的提交，可以根据 "),s("a",{attrs:{href:"https://github.com/streamich/git-cz",target:"_blank",rel:"noopener noreferrer"}},[t._v("streamich/git-cz"),s("OutboundLink")],1),t._v(" 文档中说的全局安装 "),s("code",[t._v("git cz")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 全局安装 git cz\nnpm install -g git-cz\n")])])]),s("p",[t._v("除此之外还有一种更推荐的方式，就是让你的仓库对 Commitizen 友好。")]),t._v(" "),s("h3",{attrs:{id:"commitizen-友好"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commitizen-友好"}},[t._v("#")]),t._v(" Commitizen 友好")]),t._v(" "),s("p",[t._v("全局安装 Commitizen 后，用 cz-conventional-changelog 适配器来初始化你的项目")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 初始化 cz-conventional-changelog 适配器\ncommitizen init cz-conventional-changelog --save-dev --save-exact\n")])])]),s("p",[t._v("上面的初始化做了三件事：")]),t._v(" "),s("ul",[s("li",[t._v("安装 cz-conventional-changelog 依赖")]),t._v(" "),s("li",[t._v("把依赖保存到 package.json 的 "),s("code",[t._v("dependencies")]),t._v(" 或 "),s("code",[t._v("devDependencies")]),t._v(" 中")]),t._v(" "),s("li",[t._v("在根目录的 package.json 中 添加如下所示的 "),s("code",[t._v("config.commitizen")])])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('"config": {\n    "commitizen": {\n      "path": "./node_modules/cz-conventional-changelog"\n    }\n  }\n')])])]),s("p",[t._v("或者，在项目根目录下新建一个 .czrc 文件，内容设置为")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('{\n  "path": "cz-conventional-changelog"\n}\n')])])]),s("p",[t._v("现在运行 "),s("code",[t._v("git cz")]),t._v(" 效果如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:a(409),alt:""}})]),t._v(" "),s("h3",{attrs:{id:"cz-customizable-自定义中文配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cz-customizable-自定义中文配置"}},[t._v("#")]),t._v(" cz-customizable 自定义中文配置")]),t._v(" "),s("p",[t._v("通过上面的截图可以看到，提交的配置选项都是英文的，如果想改成中文的，可以使用 "),s("a",{attrs:{href:"https://github.com/leoforfree/cz-customizable",target:"_blank",rel:"noopener noreferrer"}},[t._v("cz-customizable"),s("OutboundLink")],1),t._v(" 适配器。")]),t._v(" "),s("p",[t._v("运行下面的命令，"),s("strong",[t._v("注意之前已经初始化过一次了，这次再初始化，需要加 "),s("code",[t._v("--force")]),t._v(" 覆盖")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("npm install cz-customizable --save-dev\n\ncommitizen init cz-customizable --save-dev --save-exact --force\n")])])]),s("p",[t._v("现在 package.json 中 "),s("code",[t._v("config.commitizen")]),t._v(" 字段为：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('"config": {\n    "commitizen": {\n      "path": "./node_modules/cz-customizable"\n    }\n  }\n')])])]),s("p",[t._v("cz-customizable 文档中说明了查找配置文件的方式有三种，我们按照第一种，在项目根目录创建一个 "),s("code",[t._v(".cz-config.js")]),t._v(" 的文件。按照给出的示例 "),s("a",{attrs:{href:"https://github.com/leoforfree/cz-customizable/blob/master/cz-config-EXAMPLE.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("cz-config-EXAMPLE.js"),s("OutboundLink")],1),t._v(" 编写我们的 config。 commit-type 可以参考 "),s("a",{attrs:{href:"https://github.com/commitizen/conventional-commit-types/blob/master/index.json",target:"_blank",rel:"noopener noreferrer"}},[t._v("conventional-commit-types"),s("OutboundLink")],1),t._v(" 。")]),t._v(" "),s("p",[t._v("可以点击查看我配置好的文件 "),s("a",{attrs:{href:"https://github.com/qiqihaobenben/commitizen-git/blob/master/.cz-config.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("qiqihaobenben/commitizen-git/.cz-config.js"),s("OutboundLink")],1),t._v(" ，里面中详细的注释。")]),t._v(" "),s("h3",{attrs:{id:"commitlint-校验提交"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commitlint-校验提交"}},[t._v("#")]),t._v(" commitlint 校验提交")]),t._v(" "),s("p",[t._v("Commitizen 文档中开始就介绍到，Commitizen 可以在触发 "),s("code",[t._v("git commit")]),t._v(" 钩子之前就能给出提示，但是也明确表示提交时对 commit messages 的校验也是很有用的。毕竟即使用了 Commitzen，也是能绕过去，所以提交最后的校验很重要。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/conventional-changelog/commitlint",target:"_blank",rel:"noopener noreferrer"}},[t._v("commitlint"),s("OutboundLink")],1),t._v(" 可以检查 commit messages 是否符合常规提交格式，需要一份校验配置，推荐 "),s("a",{attrs:{href:"https://github.com/conventional-changelog/commitlint/tree/master/%40commitlint/config-conventional",target:"_blank",rel:"noopener noreferrer"}},[t._v("@commitlint/config-conventional"),s("OutboundLink")],1),t._v(" 。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("npm i --save-dev @commitlint/config-conventional @commitlint/cli\n")])])]),s("p",[t._v("在项目根目录创建 commitlint.config.js 文件并设置校验规则：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("module"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@commitlint/config-conventional'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// rules 里面可以设置一些自定义的校验规则")]),t._v("\n  rules"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'type-empty'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'never'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// type 不能为空")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'type-case'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'always'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lower-case'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// type 必须是全小写")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'scope-empty'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'always'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// scope 必须为空")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'subject-empty'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'never'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'subject-case'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'never'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'upper-case'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// subject 不能是全大写")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"rules"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rules"}},[t._v("#")]),t._v(" rules")]),t._v(" "),s("p",[t._v("rules 是由 name 和配置数组构成，配置数组包含")]),t._v(" "),s("ul",[s("li",[t._v("Level [0..2]: 0 是禁用，1 是警告， 2 是错误")]),t._v(" "),s("li",[s("code",[t._v("always|never")]),t._v(": never 是用来规则取反的")]),t._v(" "),s("li",[t._v("Value: 规则的 value")])]),t._v(" "),s("p",[t._v("可用的规则见"),s("a",{attrs:{href:"https://commitlint.js.org/#/reference-rules",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://commitlint.js.org/#/reference-rules"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("ul",[s("li",[t._v("header-case 单词格式, 例如： lower-case 全小写")]),t._v(" "),s("li",[t._v("header-full-stop 结束符")]),t._v(" "),s("li",[t._v("header-max-length header 最大长度")]),t._v(" "),s("li",[t._v("header-min-length header 最小长度")]),t._v(" "),s("li",[t._v("type\n"),s("ul",[s("li",[t._v("type-enum type 可选值 例如: [ 'feat', 'fix' ]")]),t._v(" "),s("li",[t._v("type-case type 单词格式")]),t._v(" "),s("li",[t._v("type-empty type 是否为空")]),t._v(" "),s("li",[t._v("type-max-length type 最大内容长度")]),t._v(" "),s("li",[t._v("type-min-length type 最小内容长度")])])]),t._v(" "),s("li",[t._v("scope\n"),s("ul",[s("li",[t._v("scope-enum scope 可选值, 例如 [ 'components', 'utils', 'cli' ]")]),t._v(" "),s("li",[t._v("scope-case scope 单词格式")]),t._v(" "),s("li",[t._v("scope-empty 是否为空")]),t._v(" "),s("li",[t._v("scope-max-length scope 最大内容长度")]),t._v(" "),s("li",[t._v("scope-min-length scope 最小内容长度")])])]),t._v(" "),s("li",[t._v("subject\n"),s("ul",[s("li",[t._v("subject-case subject 单词格式")]),t._v(" "),s("li",[t._v("subject-empty subject 是否为空")]),t._v(" "),s("li",[t._v("subject-full-stop subject 中止符")]),t._v(" "),s("li",[t._v("subject-max-length subject 最大内容长度")]),t._v(" "),s("li",[t._v("subject-min-length subject 最小内容长度")]),t._v(" "),s("li",[t._v("subject-exclamation-mark 分割符")])])]),t._v(" "),s("li",[t._v("body-full-stop body 结束符")]),t._v(" "),s("li",[t._v("body-leading-blank body 开头空行")]),t._v(" "),s("li",[t._v("body-empty body 是否为空")]),t._v(" "),s("li",[t._v("body-max-length body 最大内容长度")]),t._v(" "),s("li",[t._v("body-max-line-length body 最大内容行数")]),t._v(" "),s("li",[t._v("body-min-length body 最小内容长度")]),t._v(" "),s("li",[t._v("body-case 单词格式 ， 例如： upper-case 全大写")]),t._v(" "),s("li",[t._v("footer-leading-blank footer 开头空行")]),t._v(" "),s("li",[t._v("footer-empty footer 是否为空")]),t._v(" "),s("li",[t._v("footer-max-length footer 最大内容长度")]),t._v(" "),s("li",[t._v("footer-max-line-length footer 最大内容行数")]),t._v(" "),s("li",[t._v("footer-min-length footer 最小内容长度")])]),t._v(" "),s("h4",{attrs:{id:"husky-配合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#husky-配合"}},[t._v("#")]),t._v(" husky 配合")]),t._v(" "),s("p",[t._v("在项目中安装 husky ，并在项目根目录新建 husky.config.js 文件，加入以下设置：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 安装 husky")]),t._v("\nnpm install "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("save"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("dev husky\n\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// husky.config.js 中加入以下代码")]),t._v("\nmodule"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hooks"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"commit-msg"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"commitlint -E HUSKY_GIT_PARAMS"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("注意：因为 "),s("a",{attrs:{href:"https://github.com/conventional-changelog/commitlint/tree/master/%40commitlint/config-conventional",target:"_blank",rel:"noopener noreferrer"}},[t._v("@commitlint/config-conventional"),s("OutboundLink")],1),t._v(" 校验规则遵循 Angular 的规范， 所以我们在用 cz-customizable 自定义中文配置时， 是按照给出的符合 Angular 规范的示例 "),s("a",{attrs:{href:"https://github.com/leoforfree/cz-customizable/blob/master/cz-config-EXAMPLE.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("cz-config-EXAMPLE.js"),s("OutboundLink")],1),t._v(" 编写"),s("code",[t._v(".cz-config.js")]),t._v(" 的。但是如果你自定义的 Commitizen 配置不符合 Angular 规范，可以使用 "),s("a",{attrs:{href:"https://github.com/whizark/commitlint-config-cz",target:"_blank",rel:"noopener noreferrer"}},[t._v("commitlint-config-cz"),s("OutboundLink")],1),t._v(" 设置校验规则。（推荐还是按照 Angular 规范进行 cz-customizable 自定义配置）")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 安装 commitlint-config-cz")]),t._v("\nnpm install commitlint"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("config"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("cz "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("save"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("dev\n\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// commitlint.config.js 改为")]),t._v("\nmodule"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'cz'")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"git-commit-触发-git-cz"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-commit-触发-git-cz"}},[t._v("#")]),t._v(" git commit 触发 git cz")]),t._v(" "),s("p",[t._v("在提交的时候，我们都习惯了 "),s("code",[t._v("git commit")]),t._v(" ，虽然换成 "),s("code",[t._v("git cz")]),t._v(" 不难，但是如果让开发者在 "),s("code",[t._v("git commit")]),t._v(" 时无感知的触发 "),s("code",[t._v("git cz")]),t._v(" 肯定是更好的，\n而且也能避免不熟悉项目的人直接 "),s("code",[t._v("git commit")]),t._v(" 提交一些不符合规范的信息。")]),t._v(" "),s("p",[t._v("我们可以在 husky.config.js 中设置：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('"hooks": {\n  "prepare-commit-msg": "exec < /dev/tty && git cz --hook || true",\n}\n')])])]),s("blockquote",[s("p",[t._v("注意： 在 window 系统，可能需要在 git base 中才能生效。")])]),t._v(" "),s("h3",{attrs:{id:"生成-changelog"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生成-changelog"}},[t._v("#")]),t._v(" 生成 CHANGELOG")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/conventional-changelog/standard-version",target:"_blank",rel:"noopener noreferrer"}},[t._v("standard-version"),s("OutboundLink")],1),t._v("\n是一个使用 "),s("a",{attrs:{href:"https://semver.org/lang/zh-CN/",target:"_blank",rel:"noopener noreferrer"}},[t._v("semver"),s("OutboundLink")],1),t._v(" 和 "),s("a",{attrs:{href:"https://github.com/conventional-commits",target:"_blank",rel:"noopener noreferrer"}},[t._v("conventional-commits"),s("OutboundLink")],1),t._v(" 支持生成 CHANGELOG 进行版本控制的实用程序。\nstandard-version 不只是能生成 CHANGELOG , 还能根据 commit 的 type 来进行版本控制。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('// 安装 standard-verison\nnpm i --save-dev standard-version\n\n// 在 package.json 中的 scripts 加入 standard-version\n{\n  "scripts": {\n    "release": "standard-version"\n  }\n}\n')])])]),s("h2",{attrs:{id:"示例项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例项目"}},[t._v("#")]),t._v(" 示例项目")]),t._v(" "),s("p",[t._v("可以查看 "),s("a",{attrs:{href:"https://github.com/qiqihaobenben/commitizen-git",target:"_blank",rel:"noopener noreferrer"}},[t._v("commitizen-git"),s("OutboundLink")],1),t._v(" ，里面归纳了快速配置 Commitizen 友好仓库的步骤。\n差不多三五分钟就能搞定。")]),t._v(" "),s("p",[t._v("可以看一下配置完后，执行 git commit 的效果。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(410),alt:""}})]),t._v(" "),s("h2",{attrs:{id:"扩展"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#扩展"}},[t._v("#")]),t._v(" 扩展")]),t._v(" "),s("h3",{attrs:{id:"更复杂的自定义提示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更复杂的自定义提示"}},[t._v("#")]),t._v(" 更复杂的自定义提示")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/leoforfree/cz-customizable",target:"_blank",rel:"noopener noreferrer"}},[t._v("cz-customizable"),s("OutboundLink")],1),t._v(" 中自定义配置项通常情况是够用的，\ncommitlint 中校验的规则基本上也是够用的，但是会有比较硬核的开发者会觉得还是不够，还要更多。比如一些 prompt 更加自定义，\n提交时询问的 question 添加更多的逻辑，比如可以把一些重要的字段校验提前到 Commitizen 中，或者添加更多自定义的校验。")]),t._v(" "),s("p",[t._v("如果真想这么干，那就去 fork 一份 "),s("a",{attrs:{href:"https://github.com/commitizen/cz-conventional-changelog",target:"_blank",rel:"noopener noreferrer"}},[t._v("cz-conventional-changelog"),s("OutboundLink")],1),t._v(" 或者 "),s("a",{attrs:{href:"https://github.com/leoforfree/cz-customizable",target:"_blank",rel:"noopener noreferrer"}},[t._v("cz-customizable"),s("OutboundLink")],1),t._v(" 来改，\n或者直接自己写一个 adapter。")]),t._v(" "),s("h3",{attrs:{id:"commitizen-友好徽章"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commitizen-友好徽章"}},[t._v("#")]),t._v(" Commitizen 友好徽章")]),t._v(" "),s("p",[t._v("如果把仓库配置成了对 Commitizen 友好的话，可以在 "),s("code",[t._v("README.md")]),t._v(" 中加上这个小徽章：\n"),s("a",{attrs:{href:"http://commitizen.github.io/cz-cli/",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"https://img.shields.io/badge/commitizen-friendly-brightgreen.svg",alt:"Commitizen friendly"}}),s("OutboundLink")],1)]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("[![Commitizen friendly](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)\n")])])]),s("h2",{attrs:{id:"参考文档"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[t._v("#")]),t._v(" 参考文档")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit",target:"_blank",rel:"noopener noreferrer"}},[t._v("AngularJS Git Commit Message Conventions"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.conventionalcommits.org/en/v1.0.0/",target:"_blank",rel:"noopener noreferrer"}},[t._v("conventional commit format"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://mp.weixin.qq.com/s/ZXhISBQTE3a4SlWLPY4VDA",target:"_blank",rel:"noopener noreferrer"}},[t._v("如何编写 Git 提交消息"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Commit message 和 Change log 编写指南"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://365git.tumblr.com/post/3308646748/writing-git-commit-messages",target:"_blank",rel:"noopener noreferrer"}},[t._v("Writing Git commit messages"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("A Note About Git Commit Messages（文中讲了 subject 50 个字符的约定怎么来的）"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://ruby-china.org/topics/939",target:"_blank",rel:"noopener noreferrer"}},[t._v("个性化你的 Git Log 的输出格式"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://git-scm.com/docs/pretty-formats",target:"_blank",rel:"noopener noreferrer"}},[t._v("git pretty formats"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=n.exports}}]);