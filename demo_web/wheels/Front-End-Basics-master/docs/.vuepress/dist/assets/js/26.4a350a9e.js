(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{440:function(t,e,a){t.exports=a.p+"assets/img/var.bca0449b.jpg"},441:function(t,e,a){t.exports=a.p+"assets/img/let.75161ade.jpg"},599:function(t,e,a){"use strict";a.r(e);var n=a(45),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"【es6】由块级作用域引出的一场变革"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#【es6】由块级作用域引出的一场变革"}},[t._v("#")]),t._v(" 【ES6】由块级作用域引出的一场变革")]),t._v(" "),n("h2",{attrs:{id:"块级作用域又称词法作用域-存在于"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#块级作用域又称词法作用域-存在于"}},[t._v("#")]),t._v(" 块级作用域又称词法作用域，存在于：")]),t._v(" "),n("ul",[n("li",[t._v("函数内部（函数作用域）")]),t._v(" "),n("li",[t._v("块中（字符 { 和 } 之间的区域）")])]),t._v(" "),n("p",[n("b",{staticStyle:{color:"#c03546"}},[t._v("注意：ES6 允许块级作用域任意嵌套")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("{{{{{{let text = 'Hello World!'}}}}}}\n")])])]),n("p",[t._v("因为有了块级作用域，然后我们才有继续往下聊的可能。")]),t._v(" "),n("h2",{attrs:{id:"_1、-块级声明"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、-块级声明"}},[t._v("#")]),t._v(" 1、 块级声明")]),t._v(" "),n("p",[t._v("块级声明是用于声明在指定块的作用域之外无法访问的变量。")]),t._v(" "),n("h2",{attrs:{id:"_2、-let-声明-用来声明一个块级作用域变量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、-let-声明-用来声明一个块级作用域变量"}},[t._v("#")]),t._v(" 2、 let 声明：用来声明一个块级作用域变量")]),t._v(" "),n("ol",[n("li",[t._v("声明的变量具有块级作用域的特性")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 例子\nfunction getValue (condition) {\n    if (condition) {\n        let value = 'blue';\n        return value;\n    }\n    console.log(value)\n    // 报错 value is not defined\n}\ngetValue()\n")])])]),n("ol",{attrs:{start:"2"}},[n("li",[t._v("在同一个作用域内不能使用 let 声明同名的变量")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 不管是var,const或者let,新的let声明之前同名的变量，都会报错\nvar count = 30;\nlet count = 40;\n// 报错 Identifier 'count' has already been declared\n\n// 函数形参和函数内部的let声明变量重名，报错\nfunction test(value) {\n    let value = 3;\n}\ntest()\n// 报错 Identifier 'value' has already been declared\n\n// 在不同的作用域声明的变量重名是没问题的\nlet count = 30;\nif(true) {\n  let count = 40;\n  // 不同的作用域，不会报错\n}\n\n")])])]),n("ol",{attrs:{start:"3"}},[n("li",[t._v("声明没有预解析（其实也是有的），不存在变量提升，有“临时死区”(TDZ)")])]),t._v(" "),n("p",[t._v("从块的开始到变量声明这段的区域被称为临时死区，ES6 明确规定，如果区块中存在 let 和 const 命令，则这个区块对这些命令声明的变量从一开始就形成封闭作用域，只要在声明之前就使用这些变量（赋值，引用等等），就会报错。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("if(true) {\n    console.log(typeof value);\n    // 报错 value is not defined\n\n    let value = 'blue';\n}\n")])])]),n("p",[n("b",{staticStyle:{color:"#c03546"}},[t._v("注意：TDZ 是区域是“块开始”到“变量声明”，下面的例子不报错")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// typeof 说是相对安全，确实是，永远拿不到想要的结果\nconsole.log(typeof value); // 打印 undefined，没有报错\nif(true) {\n    let value = 'red';\n}\n")])])]),n("h2",{attrs:{id:"_3、-const-声明-声明常量-如-pi-值一旦被设定后不可更改"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3、-const-声明-声明常量-如-pi-值一旦被设定后不可更改"}},[t._v("#")]),t._v(" 3、 const 声明：声明常量（如 PI），值一旦被设定后不可更改")]),t._v(" "),n("ol",[n("li",[t._v("常量声明的值是不可变的")])]),t._v(" "),n("p",[n("b",{staticStyle:{color:"#c03546"}},[t._v("注意：const 声明的对象不允许修改绑定，但可以修改该对象的属性值。")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const number = 6;\nnumber = 5;\n// 报错 Assignment to constant variable\n\nconst obj = {number: 1};\nobj.number = 2; // 不报错\n\nobj = {number: 3};\n// 报错 Assignment to constant variable\n")])])]),n("ol",{attrs:{start:"2"}},[n("li",[t._v("因为常量声明后值就不可更改了，所以声明时必须赋值")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 有效的常量\nconst count = 30;\n\n// 报错 Missing initializer in const declaration\nconst name;\n")])])]),n("ol",{attrs:{start:"3"}},[n("li",[t._v("声明的常量具有块级作用域的特性")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("if(true) {\n    const number = 5;\n}\nconsole.log(number)\n// 报错 number is not defined\n")])])]),n("ol",{attrs:{start:"4"}},[n("li",[t._v("在同一个作用域内不能使用 const 声明同名的变量")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("var message = 'Hello';\nlet age = 25;\n\n// 这两条语句都会报错\nconst message = 'Good';\nconst age = 30;\n")])])]),n("ol",{attrs:{start:"5"}},[n("li",[t._v("声明没有预解析（其实也是有的），不存在变量提升，有“临时死区”(TDZ)")])]),t._v(" "),n("p",[t._v("注：const 变量只能在声明时被初始化一次，之后再也不允许将全新的值赋值给 const 变量，但是，我们仍然可以修改 const 变量已经存在的值，例如修改对象的属性，数组的每一项等，只是不能重写 const 变量。")]),t._v(" "),n("br"),t._v(" "),n("p",[n("b",{staticStyle:{color:"#4F86C6"}},[t._v("总结：一张表格")])]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("声明方式")]),t._v(" "),n("th",[t._v("变量提升")]),t._v(" "),n("th",[t._v("作用域")]),t._v(" "),n("th",[t._v("是否需要初始值")]),t._v(" "),n("th",[t._v("重复定义")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("var")]),t._v(" "),n("td",[t._v("是")]),t._v(" "),n("td",[t._v("函数级")]),t._v(" "),n("td",[t._v("不需要")]),t._v(" "),n("td",[t._v("允许")])]),t._v(" "),n("tr",[n("td",[t._v("let")]),t._v(" "),n("td",[t._v("否（但是会预解析，要不解释器怎么知道 “临时死区”？）")]),t._v(" "),n("td",[t._v("块级")]),t._v(" "),n("td",[t._v("不需要")]),t._v(" "),n("td",[t._v("不允许")])]),t._v(" "),n("tr",[n("td",[t._v("const")]),t._v(" "),n("td",[t._v("否（但是会预解析，要不解释器怎么知道 “临时死区”？）")]),t._v(" "),n("td",[t._v("块级")]),t._v(" "),n("td",[t._v("需要")]),t._v(" "),n("td",[t._v("不允许")])])])]),t._v(" "),n("p",[n("b",{staticStyle:{color:"#fc913a"}},[t._v("扩展：再提一下变量命名，不管是 var、let、const 声明的变量名，可以由数字，字母，下划线及美元符号组成，但是不能以数字开头。美元符号可以放到任何一个位置，甚至单独一个美元符号。")])]),t._v(" "),n("h2",{attrs:{id:"_4、-循环中的块作用域绑定"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4、-循环中的块作用域绑定"}},[t._v("#")]),t._v(" 4、 循环中的块作用域绑定")]),t._v(" "),n("blockquote",[n("p",[t._v("循环中的 let 声明")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 第一个对比\n// before\nfor(var i = 0; i < 5; i++) {\n    // ... 省略一些代码\n}\nconsole.log(i)  // 5\n\n//after\nfor(let i = 0; i < 5; i++) {\n    // ... 省略一些代码\n}\nconsole.log(i) // 报错 i is not defined\n\n\n// 第二个对比\n// before\nvar funcs = [];\nfor(var i = 0; i < 10; i++) {\n    funcs.push(() => {console.log(i)})\n}\nfuncs.forEach((ele) => {\n\tele()\n})\n// 打印 10次 10\n\n// after\nvar funcs = [];\nfor(let i = 0; i < 10; i++) {\n    funcs.push(() => {console.log(i)})\n}\nfuncs.forEach((ele) => {\n\tele()\n})\n// 打印 0 1 2 3 4 5 6 7 8 9\n")])])]),n("p",[n("b",{staticStyle:{color:"#c03546"}},[t._v("注意：有一点很重要，let 声明在循环内部的行为是标准中专门定义的，它不一定与 let 不提升特性有关。")])]),t._v(" "),n("blockquote",[n("p",[t._v("循环中的 const 声明")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// for 循环会报错\nfor (const i = 0; i < 1; i++) {\n    console.log(i)\n}\n// 打印 0 ，然后报错 Assignment to constant variable.\n\n// for-in 和 for-of 不会报错\nvar object = {\n    a: true,\n    b: true,\n    c: true\n};\nfor (const key in object) {\n    // 不要在循环体内更改key的值，会报错\n    console.log(key)\n}\n// 打印 a b c\n")])])]),n("p",[n("b",{staticStyle:{color:"#c03546"}},[t._v("注意：const 可以应用在 for-in 和 for-of 循环中，是因为每次迭代不会修改已有绑定，而是会创建一个新绑定。")])]),t._v(" "),n("h2",{attrs:{id:"_5、-块级绑定最佳实践的进化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5、-块级绑定最佳实践的进化"}},[t._v("#")]),t._v(" 5、 块级绑定最佳实践的进化")]),t._v(" "),n("blockquote",[n("p",[t._v("ES6 早期")])]),t._v(" "),n("p",[t._v("普遍认为默认使用 let 来替代 var,对于写保护的变量使用 const")]),t._v(" "),n("blockquote",[n("p",[t._v("ES6 使用中")])]),t._v(" "),n("p",[t._v("普遍默认使用 const，只有确实需要改变变量的值时使用 let。因为大部分变量的值在初始化后不应再改变，而预料之外的变量值的改变是许多 bug 的源头。这样就可以在某种程度上实现代码的不可变，从而防止某些错误的发生。")]),t._v(" "),n("h2",{attrs:{id:"_6、-全局变量将逐步与顶层对象的属性脱钩"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6、-全局变量将逐步与顶层对象的属性脱钩"}},[t._v("#")]),t._v(" 6、 全局变量将逐步与顶层对象的属性脱钩")]),t._v(" "),n("p",[t._v("顶层对象，在浏览器环境指的是 window 对象，在 Node 指的是 global 对象。")]),t._v(" "),n("p",[n("strong",[t._v("为了保持兼容性，var 命令和 function 命令声明的全局变量，依旧是顶层对象的属性；")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("var a = 1;\nwindow.a // 1\n")])])]),n("p",[n("img",{attrs:{src:a(440),alt:"var 声明的a，在右侧 global 里面"}})]),t._v(" "),n("p",[t._v("另一方面规定，let 命令、const 命令、class 命令声明的全局变量，不属于顶层对象的属性。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(441),alt:""}}),t._v("\n上图可见 let 声明的变量，并没有在 Window 对象里，而是一个新的 Script 对象。")]),t._v(" "),n("p",[n("b",{staticStyle:{color:"#fc913a"}},[t._v("扩展：如果需要在浏览器中跨 frame 或 window 访问代码，仍然可以用 var 在全局对象下定义变量。")])]),t._v(" "),n("p",[n("b",{staticStyle:{color:"#c03546"}},[t._v("注意：不使用 var 声明的变量非严格模式还是在跟之前一样会当成全局变量，严格模式下会直接报错。")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'use strict'")]),t._v("\n\na "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 会报错 Uncaught ReferenceError: a is not defined")]),t._v("\n")])])]),n("h2",{attrs:{id:"_7、-块级函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7、-块级函数"}},[t._v("#")]),t._v(" 7、 块级函数")]),t._v(" "),n("p",[t._v("从 ECMAScript 6 开始，在严格模式下，块里的函数作用域为这个块。ECMAScript 6 之前不建议块级函数在严格模式下使用。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("'use strict';\n\nfunction f() {\n  return 1;\n}\n\n{\n  function f() {\n    return 2;\n  }\n}\n\nf() === 1; // true\n\n// f() === 2 在非严格模式下相等\n")])])]),n("p",[n("b",{staticStyle:{color:"#c03546"}},[t._v("注意：在非严格模式下不要用块级函数，因为在非严格模式下，块中函数的声明表现奇怪，有兼容性风险")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('if (shouldDefineZero) {\n   function zero() {     // DANGER: 兼容性风险\n      console.log("This is zero.");\n   }\n}\n')])])]),n("p",[t._v("ECMAScript 6 中，如果 shouldDefineZero 是 false，则永远不会定义 zero,因为这个块不执行。这是新标准定义的。然而，这里存在历史遗留问题，无论这个块是否执行，一些浏览器会定义 zero。")]),t._v(" "),n("p",[t._v("在严格模式下，所有支持 ECMAScript 6 的浏览器以相同的方式处理：只有在 shouldDefineZero 为 true 的情况下定义 zero，并且作用域只是这个块内。")])])}),[],!1,null,null,null);e.default=s.exports}}]);