(window.webpackJsonp=window.webpackJsonp||[]).push([[184],{666:function(e,a,n){"use strict";n.r(a);var t=n(45),s=Object(t.a)({},(function(){var e=this,a=e.$createElement,n=e._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"dockerfile-详解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-详解"}},[e._v("#")]),e._v(" dockerfile 详解")]),e._v(" "),n("h4",{attrs:{id:"什么是-dockerfile"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是-dockerfile"}},[e._v("#")]),e._v(" 什么是 dockerfile?")]),e._v(" "),n("p",[e._v("Dockerfile 是一个包含用于组合镜像的命令的文本文档。可以使用在命令行中调用任何命令。 Docker 通过读取 Dockerfile 中的指令自动生成镜像。")]),e._v(" "),n("p",[e._v("docker build 命令用于从 Dockerfile 构建映像。可以在 docker build 命令中使用-f 标志指向文件系统中任何位置的 Dockerfile。")]),e._v(" "),n("p",[e._v("例：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("docker build -f /path/to/a/Dockerfile\n")])])]),n("h4",{attrs:{id:"dockerfile-的基本结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-的基本结构"}},[e._v("#")]),e._v(" Dockerfile 的基本结构")]),e._v(" "),n("p",[e._v("Dockerfile 一般分为四部分：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令，’#’ 为 Dockerfile 中的注释。")]),e._v(" "),n("h4",{attrs:{id:"dockerfile-文件说明"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-文件说明"}},[e._v("#")]),e._v(" Dockerfile 文件说明")]),e._v(" "),n("p",[e._v("Docker 以从上到下的顺序运行 Dockerfile 的指令。为了指定基本映像，第一条指令必须是 FROM。一个声明以＃字符开头则被视为注释。可以在 Docker 文件中使用 RUN，CMD，FROM，EXPOSE，ENV 等指令。")]),e._v(" "),n("p",[e._v("在这里列出了一些常用的指令。")]),e._v(" "),n("p",[n("strong",[e._v("FROM：")]),e._v(" 指定基础镜像，必须为第一个命令")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("格式：\nFROM <image>\nFROM <image>:<tag>\nFROM <image>@<digest>\n示例：\nFROM mysql:5.6\n注：\ntag或digest是可选的，如果不使用这两个值时，会使用latest版本的基础镜像\n")])])]),n("p",[n("strong",[e._v("MAINTAINER：")]),e._v(" 维护者信息")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("格式：\nMAINTAINER <name>\n示例：\nMAINTAINER Jasper Xu\nMAINTAINER sorex@163.com\nMAINTAINER Jasper Xu <sorex@163.com>\n")])])]),n("p",[e._v("**RUN：**构建竟像是执行的命令")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('RUN用于在镜像容器中执行命令，其有以下两种命令执行方式：\nshell执行\n格式：\nRUN <command>\nexec执行\n格式：\nRUN ["executable", "param1", "param2"]\n示例：\nRUN apk update\nRUN ["/etc/execfile", "arg1", "arg2"]\n注：\nRUN 指令创建的中间镜像会被缓存，并会在下次构建中使用，如果不想使用这些缓存镜像，可以再构建时指定--no-cache参数，如：docker build --no-cache\n')])])]),n("p",[e._v("**ADD：**将本地文件添加到容器中，tar 类型文件会自动解压(网络压缩资源不会被解压),可以访问网络资源，类似 wget")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('格式：\nADD <src> ... <dest>\nADD ["<src>",... "<dest>"] 用于支持包含空格的路径\n示例：\nADD hom* /mydir/\t#添加所有已"hom"开头的文件\nADD hom?.txt /mydir/      # ? 替代一个单字符,例如："home.txt"\nADD test relativeDir/     # 添加 "test" 到 `WORKDIR`/relativeDir/\nADD test /absoluteDir/    # 添加 "test" 到 /absoluteDir/\n')])])]),n("p",[e._v("**COPY：**功能类似 ADD，但是不会自动解压文件，也不能访问网络资源")]),e._v(" "),n("p",[e._v("**CMD：**构建容器后调用，也就是在容器启东市才进行调用")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('格式：\nCMD["excutable","param1","param2"](执行可执行文件，优先)\nCMD["param1","param2"]（设置了ENTRYPOINT，则直接调用ENTRYPOINT添加参数）\nCMD command param1 param2 (执行shell内部命令)\n示例：\nCMD echo "This is a test."\nCMD ["/user/bin/wc", "--help"]\n注：\nCMD 不同于RUN，CMD用于指定在容器启动时所要执行的命令，而RUN用于指定镜像构建时所要执行的命令。\n')])])]),n("p",[e._v('**ENTRYPOINT：**配置容器，使其可执行化。配合 CMD 可省去"application"，只使用参数。')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('格式：\nENTRYPOINT ["executable","param1","param2"](可执行文件，优先)\nENTRYPOINT command param1 param2 (shell 内部命令)\n示例:\nFROM ubuntu\nENTRYPOINT["top","-b"]\nCMD[\'-c\']\n注：\nENTRYPOINT与CMD非常类似，不同的是通过docker run执行的命令不会覆盖ENTRYPOINT，而docker run命令中指定的任何参数，都会被当做参数再次传递给ENTRYPOINT，Dockerfile中只允许有一个ENTRYPOINT命令，多指定时会覆盖前面的设置，而只执行最后的ENTRYPOINT指令\n')])])]),n("p",[n("strong",[e._v("LABEL：")]),e._v(" 用户为镜像添加元数据")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('格式：\nLABEL <key>=<value> <key>=<value>...\n示例：\nLABEL version="1.0" description="这是一个web服务器"\n注:\n使用LABEL指定元数据是，一条LABEL指定可以之定义或多条元数据，指定多条元数据时不同元数据直接通过空格分割。推荐将所有的元数据通过一条LABEL指令指定，以免生成过多的中间镜像\n')])])]),n("p",[e._v("**ENV：**设置环境变量")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('格式\nENV<key><value> #<key>之后的所有内容均被视为其<value>组成部分，因此，一次只能设置一个变量\nENV <key>=<value>...#可以设置多个变量，每个变量为一个<key>=<value>键值对，，如果<key>中包含空格，可以使用\\来进行转义，也可以通过""来进行标示；另外，反斜线也可以用于续行\n示例：\nENV myName John Doe\nENV myCat=fluffy\n')])])]),n("p",[e._v("**EXPOSE：**指定与外界交互的端口")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("格式：\nEXPOSE <port>[<port>...]\n示例：\nEXPOSE 80 443\nEXPOSE 8080\nEXPOSE 11211/tcp 11211/udp\n注：\nEXPOSE 并不会让容器的端口访问到主机，要是其他可访问，需要在docker run 运行时通过-p来发布这些端口，或通过-P参数来发布EXPOSE导出的所有端口\n")])])]),n("p",[e._v("**VOLUME：**用户指定持久化目录")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('格式：\nVOLUME ["/path/to/dir"]\n示例:\nVOLUME ["/data"]\nVALUME ["/var/www", "/var/log/apache2"]\n注:\n一个卷可以存在于一个或多个容器的指定目录，改目录可以绕过联合文件系统，并具有以下功能:\n\n1. 可以容器间共享和重用\n2. 容器并不一定要和其它容器共享卷\n3. 修改卷后会立即生效\n4. 对卷的修改不会对镜像产生影响\n5. 卷会一直存在，直到没有任何容器在使用它\n')])])]),n("p",[e._v("**WORDDIR：**工作目录，类似于 cd 命令")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("格式：\nWORKDIR /path/to/workdir\n示例：\nWORKDIR /a (这时工作目录为a)\nWORKDIR b  (这时工作目录为/a/b)\n注：\n通过WORKDIR设置工作目录后，Dockerfile中其后的命令RUN、CMD、ENTRYPOINT、ADD、COPY等命令都会在该目录下执行。在使用docker run 运行容器是，可以通过-w参数覆盖构建时所设置的工作目录\n")])])]),n("p",[e._v("**USER：**制动运行容器室的用户名或 UID，后续的 RUN 也会使用指定用户，使用 USER 指定用户是，可以使用用户名，UID 或 GID，或者是两者组合，当服务器不需要管理员权限是，可以通过该命令指定运行用户，并且可以再之前创建所需要的用户")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("格式：\nUSER user\nUSER user:group\nUSER uid\nUSER uid:gid\nUSER user:gid\nUSER uid:group\n实例：\nUSER www\n注：\n使用USER指定用户后，Dockerfile中其后的命令RUN,CMD,ENTRYPOINT都将使用该用户，镜像构建完成后，通过docker run运行容器室，可以通过-u来覆盖所指定的用户\n")])])]),n("p",[e._v("**ARG：**用户指定传递给构建运行时的变量")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("格式：\nARG <name> [=<default value>]\n示例：\nARG site\nARG build_user=www\n")])])]),n("p",[e._v("**ONBUILD：**用于设置镜像触发器")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("格式：\nONBUILD [INSTRUCTION]\n示例：\nONBUILD ADD . /app/src\nONBULD RUN /usr/local/bin/python-build --dir /app/src\n注:\n当缩构建的镜像被用作其他镜像的基础镜像，改镜像中的触发器将会被触发\n")])])]),n("p",[e._v("小例子：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('# This my first nginx Dockerfile\n# Version 1.0\n\n# Base images 基础镜像\nFROM centos\n\n#MAINTAINER 维护者信息\nMAINTAINER gh\n\n#ENV 设置环境变量\nENV PATH /usr/local/nginx/sbin:$PATH\n\n#ADD  文件放在当前目录下，拷过去会自动解压\nADD nginx-1.8.0.tar.gz /usr/local/\nADD epel-release-latest-7.noarch.rpm /usr/local/\n\n#RUN 执行以下命令\nRUN rpm -ivh /usr/local/epel-release-latest-7.noarch.rpm\n\nRUN yum install -y wget lftp gcc gcc-c++ make openssl-devel pcre-devel pcre && yum clean all\n\nRUN useradd -s /sbin/nologin -M www\n\n\n#WORKDIR 相当于cd\nWORKDIR /usr/local/nginx-1.8.0\n\n\nRUN ./configure --prefix=/usr/local/nginx --user=www --group=www --with-http_ssl_module --with-pcre && make && make install\n\n\nRUN echo "daemon off;" >> /etc/nginx.conf\n\n\n#EXPOSE 映射端口\nEXPOSE 80\n\n\n#CMD 运行以下命令\nCMD ["nginx"]\n\n')])])]),n("p",[e._v("待看：https://www.leeks.info/zh_CN/latest/Linux_Notes/index.html#docker")])])}),[],!1,null,null,null);a.default=s.exports}}]);