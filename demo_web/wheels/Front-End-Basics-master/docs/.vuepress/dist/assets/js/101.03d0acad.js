(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{552:function(t,v,_){"use strict";_.r(v);var e=_(45),s=Object(e.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"聊一聊伪类和伪元素"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#聊一聊伪类和伪元素"}},[t._v("#")]),t._v(" 聊一聊伪类和伪元素")]),t._v(" "),_("p",[t._v("CSS 伪类和伪元素是两种不同的概念，它们"),_("strong",[t._v("都用于扩展选择器的功能")]),t._v("，但用途和工作方式有所不同。")]),t._v(" "),_("h3",{attrs:{id:"伪类-pseudo-classes"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#伪类-pseudo-classes"}},[t._v("#")]),t._v(" 伪类（Pseudo-classes）")]),t._v(" "),_("p",[t._v("伪类用于"),_("strong",[t._v("定义元素的特定状态")]),t._v("。它们可以根据用户的行为（比如鼠标悬停）、元素的状态（比如是否被选中）或是文档树的位置（比如第一个子元素）来应用样式。"),_("strong",[t._v("伪类不创建新的元素，它们仅仅是表示元素在特定条件下的一个状态。")])]),t._v(" "),_("h4",{attrs:{id:"为什么引入伪类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么引入伪类"}},[t._v("#")]),t._v(" 为什么引入伪类？")]),t._v(" "),_("p",[t._v("伪类被引入是为了允许开发者根据元素的状态或某些条件来应用特定的样式，而无需为此添加额外的类或 ID。这样可以保持 HTML 的简洁性并提高样式表的可维护性。")]),t._v(" "),_("h4",{attrs:{id:"例子"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#例子"}},[t._v("#")]),t._v(" 例子：")]),t._v(" "),_("ul",[_("li",[_("code",[t._v(":hover")]),t._v("：当用户鼠标悬停在元素上时应用样式。")]),t._v(" "),_("li",[_("code",[t._v(":first-child")]),t._v("：选中其父元素的第一个子元素。")]),t._v(" "),_("li",[_("code",[t._v(":checked")]),t._v("：选中表单元素被选中的状态。")])]),t._v(" "),_("h3",{attrs:{id:"伪元素-pseudo-elements"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#伪元素-pseudo-elements"}},[t._v("#")]),t._v(" 伪元素（Pseudo-elements）")]),t._v(" "),_("p",[t._v("伪元素用于"),_("strong",[t._v("样式化元素的特定部分或生成装饰性内容")]),t._v("。它们被视为元素的一部分，可以用来创建一些不在文档树中的元素，如元素的第一个字母或插入到元素前后的内容。")]),t._v(" "),_("h4",{attrs:{id:"为什么引入伪元素"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么引入伪元素"}},[t._v("#")]),t._v(" 为什么引入伪元素？")]),t._v(" "),_("p",[t._v("伪元素的引入是为了允许开发者操作和样式化元素的特定部分，而无需添加额外的标签。这样可以简化 HTML 结构并提供更精细的样式控制。")]),t._v(" "),_("h4",{attrs:{id:"例子-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#例子-2"}},[t._v("#")]),t._v(" 例子：")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("::before")]),t._v(" 和 "),_("code",[t._v("::after")]),t._v("：在元素内部的开始和结束位置生成内容，通常与 "),_("code",[t._v("content")]),t._v(" 属性一起使用。")]),t._v(" "),_("li",[_("code",[t._v("::first-line")]),t._v("：选中元素的第一行文本。")]),t._v(" "),_("li",[_("code",[t._v("::first-letter")]),t._v("：选中元素的第一个字母。")])]),t._v(" "),_("h3",{attrs:{id:"伪类与伪元素的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#伪类与伪元素的区别"}},[t._v("#")]),t._v(" 伪类与伪元素的区别")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("语法上的区别")]),t._v("：\n"),_("ul",[_("li",[t._v("在 CSS2 中，伪元素使用单冒号（例如 "),_("code",[t._v(":before")]),t._v("），但在 CSS3 中，为了区分伪类和伪元素，伪元素的语法改为使用双冒号（例如 "),_("code",[t._v("::before")]),t._v("）。")]),t._v(" "),_("li",[t._v("伪类仍然使用单冒号（例如 "),_("code",[t._v(":hover")]),t._v("）。")])])]),t._v(" "),_("li",[_("strong",[t._v("功能上的区别")]),t._v("：伪类用于描述元素的特定状态，而伪元素用于样式化元素的某个部分或添加装饰性内容。")]),t._v(" "),_("li",[_("strong",[t._v("实现上的区别")]),t._v("：伪元素可以看作是文档树中不存在的元素，它们可以生成新的盒模型（box）用于布局和样式化；伪类则是基于文档树中已有元素的状态或属性应用样式。")])]),t._v(" "),_("p",[t._v("总的来说，伪类和伪元素都是"),_("strong",[t._v("为了在不改变 HTML 结构的前提下，通过 CSS 提供更强大和灵活的样式控制能力")]),t._v("。")]),t._v(" "),_("h3",{attrs:{id:"额外说明"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#额外说明"}},[t._v("#")]),t._v(" 额外说明")]),t._v(" "),_("p",[t._v("在 CSS 2 中，伪元素是以 : 开头的。由于伪类也遵循同一规则，使得他们之间难以区分。为了解决这个问题，在 CSS 2.1 中，伪元素支持以 :: 开头。现在，使用伪元素时更推荐以 :: 开头，而使用伪类时使用 : 开头。")]),t._v(" "),_("p",[t._v("因为过去的浏览器都实现过 CSS 2 的规则，所以现在那些支持 :: 的浏览器通常同时也支持 : 的形式。但是 CSS3 新增的伪类必须使用 ::，例如 ::section")])])}),[],!1,null,null,null);v.default=s.exports}}]);