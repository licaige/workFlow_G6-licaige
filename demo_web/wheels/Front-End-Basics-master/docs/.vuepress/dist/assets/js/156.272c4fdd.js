(window.webpackJsonp=window.webpackJsonp||[]).push([[156],{631:function(e,n,t){"use strict";t.r(n);var s=t(45),r=Object(s.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"常见数据结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见数据结构"}},[e._v("#")]),e._v(" 常见数据结构")]),e._v(" "),t("blockquote",[t("p",[e._v("数据结构是计算机为了高效地利用资源而组织数据的一种方式。数据结构和算法是解决一切编程问题的基础。")])]),e._v(" "),t("h2",{attrs:{id:"_1、数组类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、数组类型"}},[e._v("#")]),e._v(" 1、数组类型")]),e._v(" "),t("p",[e._v("几乎所有的语言都原生支持数组类型，因为数组是最简单的内存数据结构。")]),e._v(" "),t("h3",{attrs:{id:"_1-javascript-的数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-javascript-的数组"}},[e._v("#")]),e._v(" 1.JavaScript 的数组")]),e._v(" "),t("p",[e._v("这个会单独拿出来放到 JavaScript 基础的数组中去介绍。")]),e._v(" "),t("h3",{attrs:{id:"_2-javascript-数组与其他语言不同"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-javascript-数组与其他语言不同"}},[e._v("#")]),e._v(" 2.JavaScript 数组与其他语言不同")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("在"),t("code",[e._v("JavaScript")]),e._v("中，数组是一个可以修改的对象。如果添加元素，它就会动态增长。在"),t("code",[e._v("C")]),e._v("和"),t("code",[e._v("Java")]),e._v("等其他语言里，我们要先决定数组的大小，想添加元素就要创建一个全新的数组，不能简单地往其中添加所需的元素。")])]),e._v(" "),t("li",[t("p",[e._v("与"),t("code",[e._v("C")]),e._v("和"),t("code",[e._v("Java")]),e._v("等其他语言不同，JavaScript 数组不是强类型的，因此它可以存储任意类型的数据。")])])]),e._v(" "),t("h2",{attrs:{id:"_2、栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、栈"}},[e._v("#")]),e._v(" 2、栈")]),e._v(" "),t("h3",{attrs:{id:"_1-栈数据结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-栈数据结构"}},[e._v("#")]),e._v(" 1.栈数据结构")]),e._v(" "),t("blockquote",[t("p",[e._v("栈是一种遵从后进先出(LIFO)原则的有序集合，新添加的或待删除的元素都保存在栈的同一端，称为栈顶，另一端叫栈底。")])]),e._v(" "),t("p",[e._v("也就是说，在栈里，新元素都靠近栈顶，旧元素都靠近栈底。")]),e._v(" "),t("p",[e._v("基于以上，栈也被用在编程语言的编译器和内存中保存变量、方法调用等。")]),e._v(" "),t("h3",{attrs:{id:"_2-栈操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-栈操作"}},[e._v("#")]),e._v(" 2.栈操作")]),e._v(" "),t("blockquote",[t("p",[e._v("其中包含创建栈，向栈添加元素，从栈移除元素，查看栈顶元素，检查栈是否为空，清空和打印栈元素")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// Stack 类\n// 先创建一个类来表示栈\nclass Stack {\n    constructor () {\n\n        // 需要一种数据结构来保存栈里的元素，这里选择数组\n        this.items = [];\n\n        // 缓存栈的size\n        this.size = 0;\n    }\n\n    /* 声明栈需要的一些方法 */\n\n    // 重置栈的size\n    resetSize () {\n        return this.items.length;\n    }\n\n    // 打印栈数据\n    print () {\n        console.log(this.items.toString())\n    }\n\n    //添加一个或几个新元素到栈顶，该方法只添加元素到栈顶，也就是栈的末尾,返回当前栈元素数量\n    push (){\n        this.items.push.apply(this.items, arguments)\n        this.size = this.resetSize();\n        return this.size;\n    }\n\n    // 移除栈顶的元素，同时返回被移除的元素，栈遵循LIFO原则，因此移除的是最后添加进去的元素\n    pop () {\n        this.size--;\n        return this.items.pop();\n    }\n\n    // 返回栈顶的元素，不对栈做任何修改\n    peek () {\n        return this.items[this.size - 1];\n    }\n\n    // 判断栈是否为空，如果栈里没有任何元素就返回true，否则返回false\n    isEmpty () {\n        return this.size == 0;\n    }\n\n    // 移除栈里的所有元素\n    clear () {\n        this.items.length = 0;\n        this.size = this.resetSize();\n    }\n\n    // 返回栈里的元素个数\n    getSize () {\n        return this.size;\n    }\n}\n\n// 使用Stack类\nlet stack = new Stack();\nconsole.log(stack.isEmpty())   // 打印 true\nstack.push(1,2,3);\nstack.print()  // 打印 1,2,3\nconsole.log(stack.isEmpty())   // 打印 false\nconsole.log(stack.getSize())   // 打印 3\nconsole.log(stack.pop())   // 打印 3\nstack.print()  // 打印 1,2\nstack.clear()\nstack.print()  // 打印为空\nconsole.log(stack.isEmpty())   // 打印 true\nstack.push(5,6)\nconsole.log(stack.peek())  // 打印 6\n\n")])])]),t("h4",{attrs:{id:"以上-stack-类存在的问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#以上-stack-类存在的问题"}},[e._v("#")]),e._v(" 以上 Stack 类存在的问题")]),e._v(" "),t("p",[e._v("ES6 的类声明，不能像其他语言(Java、C++、C#)一样直接在类里面声明变量，只能在类的构造函数 constructor 里声明。\n所以这就导致 items 是公共的了，这是现在 ES6 的不足的地方，不能够声明声明私有属性或方法(虽然已经有提案了)。")]),e._v(" "),t("p",[e._v("在这种情况下，我们希望 Stack 类的用户只能访问暴露给类的方法。否则，就有可能从栈的中间移除元素，毕竟我们用的是数组来存储的，比如直接用实例调用"),t("code",[e._v("stack.items.splice(2,3)")]),e._v("，有以下集中方法能相对解决这个问题。")]),e._v(" "),t("blockquote",[t("p",[e._v("1、用 ES5 的构造函数，在构造函数中声明变量 items")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function Stack () {\n    let items = [];\n    this.push = function (element) {\n        //一次添加一个\n        return items.push(element)\n    }\n\n    ...其他方法\n}\n\n")])])]),t("p",[e._v("用这个方法又有个问题就是，所有方法都是在构造函数中定义的，在创建很多个实例的时候会比基于原型的类更占内存。")]),e._v(" "),t("blockquote",[t("p",[e._v("2、用 ES6 的限定作用域 Symbol 实现")])]),e._v(" "),t("p",[e._v("ES6 新增的 Symbol 是不可变的，可以用作对象的属性。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let _items = Symbol();\n\nclass Stack {\n    constructor () {\n        this[_items] = [];\n    }\n\n    ...其他方法\n}\n")])])]),t("p",[e._v("这个方法创建了一个假的私有属性，正常情况下在类的实例中是拿不到 Symbol 属性，但是 ES6 有一个叫做"),t("code",[e._v("getOwnPropertySymbols")]),e._v("方法能够取到类里面声明的所有 Symbol 属性，然后也可以通过下面的代码破坏 Stack 类。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let objectSymbols = Object.getOwnPropertySymbols(stack);\nstack.print()   // 打印 5,6\nconsole.log(objectSymbols.length)   // 打印 1\nconsole.log(objectSymbols)  // 打印 [Symbol()]\nconsole.log(objectSymbols[0])   // 打印 Symbol()\nstack[objectSymbols[0]].push(1)\nstack.print()   // 打印 5,6,1 被改动了……\n")])])]),t("blockquote",[t("p",[e._v("用 ES6 的 weakMap 实现")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const items = new WeakMap();\n\nclass Stack {\n    constructor () {\n        items.set(this, [])\n    }\n    push (element) {\n        let s = items.get(this);\n        s.push(element);\n    }\n    ...其他方法\n}\n")])])]),t("p",[e._v("现在 items 在 Stack 类里是真正的私有属性了，但如果 Stack 不再 commonjs 模块，或者 webpack 打包中，还得需要一个闭包，因为 items 是在 Stack 类以外声明的，谁都可以动它。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let Stack = (function () {\n    const items = new WeakMap();\n\n    class Stack {\n        constructor () {\n            items.set(this, [])\n        }\n        push (element) {\n            let s = items.get(this);\n            s.push(element);\n        }\n        ...其他方法\n    }\n    return Stack;\n})()\n")])])]),t("h2",{attrs:{id:"_3、队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、队列"}},[e._v("#")]),e._v(" 3、队列")]),e._v(" "),t("h3",{attrs:{id:"_1、队列的数据结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、队列的数据结构"}},[e._v("#")]),e._v(" 1、队列的数据结构")]),e._v(" "),t("blockquote",[t("p",[e._v("队列是遵循 FIFO（先进先出）原则的一组有序的项。\n队列在尾部添加新元素，并从顶部移除元素。最新添加的元素必须排在队列的末尾。")])]),e._v(" "),t("h3",{attrs:{id:"_2、队列操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、队列操作"}},[e._v("#")]),e._v(" 2、队列操作")]),e._v(" "),t("blockquote",[t("p",[e._v("其中包含创建队列，向队列中添加元素，从队列中移除元素，查看队列头元素，检查队列是否为空，打印队列元素。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 直接用WeakMap来构造私有变量\n\nconst items = new WeakMap();\nexport default class Queue {\n    constructor () {\n        items.set(this, [])\n    }\n    enqueue (element) {\n        let s = items.get(this);\n        s.push(element);\n    }\n    dequeue () {\n        let s = items.get(this);\n        return s.shift();\n    }\n    front () {\n        let s = items.get(this);\n        return s[0]\n    }\n    isEmpty () {\n        let s = items.get(this);\n        return s.length == 0;\n    }\n    size () {\n        let s = items.get(this);\n        return s.length;\n    }\n    print () {\n        let s = items.get(this);\n        console.log(s.toString())\n    }\n}\n\n// 使用Queue类\nlet queue = new Queue();\nconsole.log(queue.isEmpty()) //true\nqueue.enqueue('fangxu')\nqueue.enqueue('wenqi')\nqueue.enqueue('benben')\nqueue.print() //'fangxu', 'wenqi', 'benben'\nconsole.log(queue.size()) //3\nconsole.log(queue.isEmpty()) // fasle\nqueue.dequeue()\nqueue.dequeue()\nqueue.print() //'benben'\n")])])]),t("h3",{attrs:{id:"_3、优先队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、优先队列"}},[e._v("#")]),e._v(" 3、优先队列")]),e._v(" "),t("blockquote",[t("p",[e._v("优先队列就是元素的的添加和移除是基于优先级的。例如机场登机的顺序，虽然也是排队，但是头等舱比经济舱先登机。")])]),e._v(" "),t("p",[e._v("实现一个优先队列，有两种方式：\n1、设置优先级，然后在正确的位置添加元素；\n2、用正常入列的方式操作添加元素，然后按照优先级移除她们。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const items = new WeakMap();\n// 整合元素和其对应优先级的类\nclass QueueElement {\n    constructor (element, priority) {\n        this.element = element;\n        this.priority = priority;\n    }\n}\nexport default class Queue {\n    constructor() {\n        items.set(this, [])\n    }\n    //更改了一下enqueue方法\n    enqueue(element, priority) {\n        let s = items.get(this);\n        let queueElement = new QueueElement(element, priority);\n        let added = false;\n        for(var i = 0; i < s.length; i++) {\n            if (queueElement.priority < s[i].priority) {\n                s.splice(i, 0, queueElement);\n                added = true;\n                break;\n            }\n        }\n        if(!added) {\n            s.push(queueElement);\n        }\n    }\n    dequeue() {\n        let s = items.get(this);\n        return s.shift();\n    }\n    front() {\n        let s = items.get(this);\n        return s[0]\n    }\n    isEmpty() {\n        let s = items.get(this);\n        return s.length == 0;\n    }\n    size() {\n        let s = items.get(this);\n        return s.length;\n    }\n    print() {\n        let s = items.get(this);\n        s.forEach((item, index) => {\n            console.log(`${item.element}-${item.priority}`)\n        })\n    }\n}\n\n// 使用Priorityqueue类\nlet queue = new Priorityqueue();\nconsole.log(queue.isEmpty()) //true\nqueue.enqueue('fangxu',2)\nqueue.enqueue('wenqi',1)\nqueue.enqueue('benben',1)\nqueue.print() //'wenqi-1', 'benben-1','fangxu-2'\nconsole.log(queue.size()) //3\nconsole.log(queue.isEmpty()) // fasle\nqueue.dequeue()\nqueue.dequeue()\nqueue.print() //'fangxu-2'\n")])])]),t("p",[e._v("上述实现的优先队列是最小优先队列，因为优先级值较小的元素被放置在队列最前面。最大优先队列则相反，把优先级的值较大的元素放置在队列最前面。")]),e._v(" "),t("h3",{attrs:{id:"_4、循环队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、循环队列"}},[e._v("#")]),e._v(" 4、循环队列")]),e._v(" "),t("blockquote",[t("p",[e._v("循环队列是又一个修改版的队列，有一个很经典的例子就是击鼓传花（多人围成一个圆圈，把花尽快传递给下一个人。某一时刻传花停止，这个时候花在谁手里，谁就退出这个游戏，然后重复这个过程，直到只剩一个人）")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import Queue from './queue'\n\nfunction hotPotato(nameList, time) {\n    let queue = new Queue();\n    nameList.forEach((item, index) => {\n        queue.enqueue(item)\n    })\n    let eliminated = '';\n    while(queue.size() > 1) {\n        for(let i = 0; i < time; i++) {\n            queue.enqueue(queue.dequeue())\n        }\n        eliminated = queue.dequeue();\n        console.log(`${eliminated}在击鼓传花的游戏中被淘汰。`)\n    }\n    return queue.dequeue();\n}\n\n// 使用hotPotato方法\n// 以下都是团队里的成员\nlet names = ['zheming', 'sijie', 'chengyin', 'guangyu', 'yueying', 'xiaolujie', 'miaomiao', 'wenwu'];\n// 为了避免他们说我不公平，这里用了一个随机取1-7的次数\nlet time = Math.ceil(7 * Math.random());\nlet winner = hotPotato(names, time);\nconsole.log(`击鼓传花的胜者是${winner}`)\n\n// 打印其中某一次的结果\nguangyu在击鼓传花的游戏中被淘汰。\nwenwu在击鼓传花的游戏中被淘汰。\nyueying在击鼓传花的游戏中被淘汰。\nsijie在击鼓传花的游戏中被淘汰。\nzheming在击鼓传花的游戏中被淘汰。\nchengyin在击鼓传花的游戏中被淘汰。\nmiaomiao在击鼓传花的游戏中被淘汰。\n击鼓传花的胜者是xiaolujie\n")])])]),t("h2",{attrs:{id:"_4、链表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、链表"}},[e._v("#")]),e._v(" 4、链表")]),e._v(" "),t("blockquote",[t("p",[e._v("要存储多个元素，数组（或者可以称为列表）可能是最常用的数据结构，正如之前提到的，大多数语言实现的数组有一个缺点，就是数组大小是固定的，从数组的起点或中间插入或者移除项的成本很高，因为需要移动元素（尽管 JavaScript 的 Array 类方法可以帮助我们做这些事，但背后的情况同样是这样）。\n"),t("code",[e._v("链表")]),e._v(" 存储有序的元素集合，但不同于数组，链表中的元素在内存中并不是连续放置的。每个元素由一个存储元素本身的节点和一个指向下一个元素的引用（也成指针或链接）组成。")])]),e._v(" "),t("h4",{attrs:{id:"链表和数组的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#链表和数组的区别"}},[e._v("#")]),e._v(" 链表和数组的区别")]),e._v(" "),t("p",[e._v("链表的优点：相对于传统数组，链表添加和移除元素的时候不需要移动其他元素。\n链表的缺点：链表需要使用指针，这是需要注意的地方。还有就是相对于数组可以直接访问任何位置的任何元素而言，想访问链表中间的一个元素，就需要从起点（表头）开始迭代列表直到找到所需的元素。")]),e._v(" "),t("p",[e._v("现实中链表的例子，就比如说运煤的火车，一列火车是由一系列车皮组成的，每节车皮都相互连接，可以很容易的分离一节车皮，改变它的位置，添加或移除它。这样车皮就是列表的元素，车皮间的链接就是指针。")]),e._v(" "),t("h3",{attrs:{id:"_1、链表操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、链表操作"}},[e._v("#")]),e._v(" 1、链表操作")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 需要一个Node辅助类\nclass Node {\n    constructor(element) {\n        this.element = element;\n        this.next = null;\n    }\n}\n\nclass LinkedList {\n    constructor() {\n        this.length = 0;\n        this.head = null;\n    }\n\n    // 向链表尾部追加元素\n    // 有两种场景，列表为空，添加的是第一个元素，或者列表不为空，向其追加元素\n    append(element) {\n        let current,\n            node = new Node(element);\n        if(this.head === null) {\n            this.head = node;\n        }else {\n            current = this.head;\n            while(current.next) {\n                current = current.next;\n            }\n            current.next = node;\n        }\n        this.length++;\n    }\n\n    // 从链表中移除元素\n    // 有两种场景，第一种是移除第一个元素，第二种是移除第一个以外的任一元素。\n    removeAt(position) {\n        // 处理位置，首先检查是否越界\n        if(position > -1 && position < this.length) {\n            let previous,\n                index = 0,\n                current = this.head;\n            if(position === 0) {\n                this.head = current.next;\n            }else {\n                while(index++ < position) {\n                    previous = current;\n                    current = current.next;\n                }\n                previous.next = current.next;\n            }\n            this.length--;\n            return current.element;\n        }else {\n            return null;\n        }\n    }\n\n    // 在任意位置插入元素\n    insert(element, position) {\n        if(position >= 0 && position <= this.length) {\n            let previous,\n                current = this.head,\n                index = 0,\n                node = new Node(element);\n            if(position === 0) {\n                node.next = current;\n                this.head = node;\n            }else {\n                while(index++ < position) {\n                    previous = current;\n                    current = current.next;\n                }\n                node.next = current;\n                previous.next = node;\n            }\n            this.length++;\n            return true;\n        }else {\n            return false;\n        }\n    }\n\n    // 返回元素在列表中的索引。如果列表中没有该元素则返回-1\n    indexOf(element) {\n        let current = this.head,\n            index = -1;\n        while(current) {\n            index++;\n            if(current.element === element) {\n                return index;\n            }\n            current = current.next;\n        }\n        return -1;\n    }\n\n    // 从列表中移除一项\n    remove(element) {\n        let index = this.indexOf(element);\n        return this.removeAt(index);\n    }\n\n    // 判断链表是否为空\n    isEmpty() {\n        return this.length === 0;\n    }\n\n    // 显示链表的大小，返回链表中包含的元素个数\n    size() {\n        return this.length;\n    }\n\n    // 获取链表的头\n    getHead() {\n        return this.head;\n    }\n\n    // 把链表对象转换成字符串\n    toString() {\n        let string = '',\n            current = this.head;\n        while(current) {\n            string += current.element + (current.next? 'n' : '');\n            current = current.next;\n        }\n        return string;\n    }\n}\n\nexport default LinkedList\n\n\n\n// 具体使用\nimport LinkedList from 'linkedList'\nlet linkedList = new LinkedList();\n\nconsole.log(linkedList.size()) // 0\nconsole.log(linkedList.getHead()) // null\nconsole.log(linkedList.isEmpty()) // true\nlinkedList.append('fangxu')\nlinkedList.append('zheming')\nlinkedList.append('wenwu')\nconsole.log(linkedList.size()) // 3\nconsole.log(linkedList.getHead()) // {element: 'fangxu', next: Node}\nconsole.log(linkedList.isEmpty()) // false\nconsole.log(linkedList.toString()) // fangxunzhemingnwenwu\nlinkedList.insert('yueying', 0)\nlinkedList.insert('chengyin', 4)\nconsole.log(linkedList.size()) // 5\nconsole.log(linkedList.getHead()) // {element: 'yueying', next: Node}\nconsole.log(linkedList.toString()) // yueyingnfangxunzhemingnwenwunchengyin\nconsole.log(linkedList.indexOf('fangxu')) // 1\nconsole.log(linkedList.removeAt(2)) // zheming\nconsole.log(linkedList.size()) // 4\nconsole.log(linkedList.toString()) // yueyingnfangxunwenwunchengyin\nconsole.log(linkedList.remove('fangxu')) // fangxu\nconsole.log(linkedList.size()) // 3\nconsole.log(linkedList.toString()) // yueyingnwenwunchengyin\n\n\n")])])]),t("blockquote",[t("p",[e._v("注意")])]),e._v(" "),t("p",[e._v("1、列表中的最后一个节点的下一个元素始终是 null。")]),e._v(" "),t("h3",{attrs:{id:"_2、双向链表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、双向链表"}},[e._v("#")]),e._v(" 2、双向链表")]),e._v(" "),t("p",[e._v("双向链表和普通链表的区别是，普通链表一个节点只有链向下一个节点的链接，在双向链表中，链接是双向的：一个链向下一个元素，另一个链向前一个元素")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 双向链表需要增加以下属性\n\nclass Node {\n    constructor(element) {\n        this.element = element;\n        this.next = null;\n        this.prev = null; // 新增指向其哪一个元素的链接\n    }\n}\n\nclass DoublyLinkedList {\n    constructor() {\n        this.length = 0;\n        this.head = null;\n        this.tail = null; // 链表类增加链表反向的头,也就是正向链表的尾巴\n    }\n\n    ...\n}\n")])])]),t("p",[t("strong",[e._v("注意：")]),e._v(" 因为双向链表中有向前和向后两个指针，所以在插入和删除指定位置的元素等操作时，需要有比普通链表多的操作。")]),e._v(" "),t("h3",{attrs:{id:"_3、循环链表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、循环链表"}},[e._v("#")]),e._v(" 3、循环链表")]),e._v(" "),t("p",[e._v("循环链表可以像普通链表一样只有单向引用，也可以像双向链表一样有双向引用。循环链表和链表之间唯一的区别在于，最后一个元素指向下一个元素的指针（tail.next）不是 null，而是指向第一个元素 head。\n双向循环链表有指向 head 的 tail.next,也有指向 tail 的 head.prev。")]),e._v(" "),t("h2",{attrs:{id:"_5、集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、集合"}},[e._v("#")]),e._v(" 5、集合")]),e._v(" "),t("blockquote",[t("p",[e._v("集合是由一组无序且唯一（即不能重复）的项组成。可以把集合想象成一个既没有重复元素，也没有顺序概念的数组。")])]),e._v(" "),t("h3",{attrs:{id:"_1、创建集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、创建集合"}},[e._v("#")]),e._v(" 1、创建集合")]),e._v(" "),t("p",[e._v("ES6 新增了 Set 类，我们可以基于 ES6 的 Set 开发我们的集合类")]),e._v(" "),t("p",[e._v("先熟悉一下 ES6 原生的 Set 类怎么用")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let set = new Set();\nset.add(1)\nconsole.log(set.values()) // 输出@Iterator\nconsole.log(set.has(1)) // 输出true\nconsole.log(set.size) // 输出1\n\n// 首先创建两个集合\nlet setA = new Set();\nsetA.add(1)\nsetA.add(2)\nsetA.add(3)\n\nlet setB = new Set();\nsetA.add(2)\nsetA.add(3)\nsetA.add(4)\n")])])]),t("h3",{attrs:{id:"_2、集合的操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、集合的操作"}},[e._v("#")]),e._v(" 2、集合的操作")]),e._v(" "),t("ol",[t("li",[t("p",[t("strong",[e._v("并集：")]),e._v(" 对于给定的两个集合，返回一个包含两个集合中所有元素的新集合。")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("交集：")]),e._v(" 对于给定的两个集合，返回一个包含两个集合中共有元素的新集合。")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("差集：")]),e._v(" 对于给定的两个集合，返回一个包含所有存在于第一个集合且不存在于第二个集合的元素的新集合")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("子集：")]),e._v(" 验证一个给定的集合是否是另一集合的的子集。")])])]),e._v(" "),t("blockquote",[t("p",[e._v("并集，集合 A 和集合 B 的并集，表示为 "),t("code",[e._v("A∪B")]),e._v(" ，该集合定义是： "),t("code",[e._v("A∪B = {x|x ∈ A∨x ∈ B}")]),e._v(" 意思是 x 元素存在于 A 中，或者 x 存在于 B 中")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// A、B两个集合并集代码实现如下\nlet unionAB = new Set();\nfor(let x of setA) {\n    unionAB.add(x)\n}\nfor (let x of setB) {\n    unionAB.add(x)\n}\n")])])]),t("blockquote",[t("p",[e._v("交集 集合 A 和集合 B 的交集，表示为 "),t("code",[e._v("A∩B")]),e._v(" ，该集合定义是： "),t("code",[e._v("A∩B = {x|x ∈ A∧x ∈ B}")]),e._v(" 意思是 x 元素存在于 A 中，，且 x 存在于 B 中")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 模拟交集需要创建一个辅助函数\n\nfunction intersection(A, B) {\n    let intersectionSet = new Set();\n    for (let x of A) {\n        if (B.has(x)) {\n            intersectionSet.add(x)\n        }\n    }\n    return intersectionSet\n}\nlet intersectionAB = intersection(setA, setB);\n")])])]),t("blockquote",[t("p",[e._v("差集 集合 A 和集合 B 的差集，表示为 "),t("code",[e._v("A-B")]),e._v(" ，该集合定义是： "),t("code",[e._v("A-B = {x|x ∈ A∧x ∉ B}")]),e._v(" 意思是 x 元素存在于 A 中，，且 x 不存在于 B 中")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function difference(A, B) {\n    let differenceSet = new Set();\n    for (let x of A) {\n        if (!B.has(x)) {\n            differenceSet.add(x)\n        }\n    }\n    return differenceSet\n}\nlet differenceAB = difference(setA, setB);\n")])])]),t("blockquote",[t("p",[e._v("子集 集合 A 是集合 B 的子集，表示为 "),t("code",[e._v("A⊆B")]),e._v(" ，该集合定义是： "),t("code",[e._v("∀x {x ∈ A→x ∈ B}")]),e._v(" 意思是集合 A 中的每一个 x（元素），也需要存在于 B 中")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 这个返回值就不是新集合了,而是一个布尔值\nfunction subSet(A, B) {\n    if (A.size > B.size) {\n        return false;\n    }else {\n        for(let x of A) {\n            if(!B.has(x)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nlet isSub = subSet(setA, setB);\n")])])]),t("h2",{attrs:{id:"_6、字典和散列表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6、字典和散列表"}},[e._v("#")]),e._v(" 6、字典和散列表")]),e._v(" "),t("blockquote",[t("p",[e._v("集合、字典和散列表可以存储不重复的值。在集合中，我们感兴趣的是每个值本身，并把它当做主要元素。在字典中，我们用"),t("code",[e._v("[键, 值]")]),e._v("的形式来存储数据。在散列表中也是一样，但这两种数据结构实现方式略有不同。")])]),e._v(" "),t("h3",{attrs:{id:"_1、字典"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、字典"}},[e._v("#")]),e._v(" 1、字典")]),e._v(" "),t("blockquote",[t("p",[e._v("集合表示一组互不相同的元素（不重复的元素）。在"),t("code",[e._v("字典")]),e._v("中存储的是"),t("code",[e._v("[键, 值]对")]),e._v("，其中键名用是来查询特定元素的。字典和集合很相似，集合以"),t("code",[e._v("[值, 值]")]),e._v("的形式存储元素，字典则是以"),t("code",[e._v("[键, 值]")]),e._v("的形式来存储元素。字典也成为"),t("code",[e._v("映射")]),e._v("。")])]),e._v(" "),t("p",[e._v("ES6 的"),t("code",[e._v("Map")]),e._v("类的实现，就是我们所说的字典。")]),e._v(" "),t("h3",{attrs:{id:"_2、散列表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、散列表"}},[e._v("#")]),e._v(" 2、散列表")]),e._v(" "),t("blockquote",[t("p",[t("code",[e._v("散列算法")]),e._v("的作用是尽可能快地在数据结构中找到一个值。在之前如果要在数据结构中获得一个值，需要遍历整个数据结构来找到它。如果使用散列函数，就知道值的具体位置，因此能够快速检索到该值。散列函数的作用是给定一个键值，然后返回值在表中的地址。")])]),e._v(" "),t("h4",{attrs:{id:"_2-1、创建散列表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1、创建散列表"}},[e._v("#")]),e._v(" 2.1、创建散列表")]),e._v(" "),t("p",[e._v("我们来用最常见的散列函数-"),t("code",[e._v("lose lose")]),e._v(" 散列函数来实现散列表，此方法最简单地将每个键值中的每个字母的 ASCII 值相加。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 用最基本的方式实现HashTable类\nfunction HashTable() {\n    var table = [];\n\n    // 先实现一个散列函数方法，它是HashTable类中的一个私有方法\n    var loseloseHashCode = function (key) {\n        var hash = 0;\n        for(var i = 0; i < key.length; i++) {\n            hash += key.charCodeAt(i);\n        }\n        return hash % 37; // 减小hash的数值\n    }\n\n    // 向散列表增加一个新的项（也能更新散列表）\n    this.put = function(key, value) {\n        var position = loseloseHashCode(key);\n        console.log(position + '--' + value)\n        table[position] = value;\n    }\n\n    // 返回根据键值检索到的特定的值\n    this.get = function(key) {\n        return table[loseloseHashCode(key)];\n    }\n\n    // 根据键值从散列表中移除值\n    this.remove = function(key) {\n        table[loseloseHashCode(key)] = undefined;\n\n    }\n}\n\n// 使用HashTable\nvar hash = new HashTable();\nhash.put('fangxu','fangxu@email.com')\nhash.put('wenting','wenting@email.com')\nhash.put('yanqing','yanqing@email.com')\n// 因为在put方法中我们打印了位置和值\n// 20--fangxu@email.com\n// 24--wenting@email.com\n// 19--yanqing@email.com\nconsole.log(hash.get('fangxu')) // fangxu@email.com\nconsole.log(hash.get('yanqing')) // yanqing@email.com\nhash.remove('yanqing')\nconsole.log(hash.get('yanqing')) // undefined\n")])])]),t("h4",{attrs:{id:"_2-2、处理散列表中的冲突"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2、处理散列表中的冲突"}},[e._v("#")]),e._v(" 2.2、处理散列表中的冲突")]),e._v(" "),t("blockquote",[t("p",[e._v("有时候，一些键会有相同的散列值，不同的值在散列表中对应相同位置的时候，称之为冲突。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 还是HashTable类\nvar hash = new HashTable();\nhash.put('fangxu','fangxu@email.com')\nhash.put('wenting','wenting@email.com')\nhash.put('yanqing','yanqing@email.com')\nhash.put('xufang', 'xufang@email.com')\nhash.put('tingwen', 'tingwen@email.com')\n\n// 20--fangxu@email.com\n// 24--wenting@email.com\n// 19--yanqing@email.com\n// 20--xufang@email.com\n// 24--tingwen@email.com\n// 显而易见，上面的值重复了\n\n// 为了看一下散列表里到底存了些什么，我们加入一个print实例方法\nthis.print = function() {\n    for(var i = 0; i < table.length; i++) {\n        if(table[i] !== undefined) {\n            console.log(i + '--' + table[i])\n        }\n    }\n}\n\nhash.print()\n// 19--yanqing@email.com\n// 20--xufang@email.com\n// 24--tingwen@email.com\n// 以上可以看到发生冲突的数据被后面的数据给覆盖了\n")])])]),t("blockquote",[t("p",[e._v("使用一个数据结构来保存数据的目的显然不是去丢失这些数据，而是通过魔种方法将它们全部保存起来。处理冲突的方法有：分离链接，线性探查和双散列法")])]),e._v(" "),t("h4",{attrs:{id:"_2-2-1、分离链接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1、分离链接"}},[e._v("#")]),e._v(" 2.2.1、分离链接")]),e._v(" "),t("p",[e._v("分离链接法包括为散列表的每一个位置创建一个链表并将元素存储在里面。相当于每个散列表的位置存储的是一个链表。")]),e._v(" "),t("h4",{attrs:{id:"_2-2-2、线性探查"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2、线性探查"}},[e._v("#")]),e._v(" 2.2.2、线性探查")]),e._v(" "),t("p",[e._v("当想向表中摸个位置加入一个新元素的时候，如果索引为 index 的位置已经被占据了，就尝试 index+1 的位置。如果 index+1 的位置也被占据了，就尝试 index+2 的位置，以此类推。")]),e._v(" "),t("h4",{attrs:{id:"_2-3、创建更好的散列函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3、创建更好的散列函数"}},[e._v("#")]),e._v(" 2.3、创建更好的散列函数")]),e._v(" "),t("blockquote",[t("p",[e._v("上面的例子显示 "),t("code",[e._v("lose lose")]),e._v(" 散列函数并不是一个表现良好的散列函数，因为他会产生太多的冲突。通常，一个表现良好的散列函数是由几个方面构成的：插入和检索的时间（即性能），还包括较低的冲突可能性。")])]),e._v(" "),t("p",[t("strong",[t("code",[e._v("djb2散列函数")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// djb2散列函数\nvar djb2HashCode = function(key) {\n    var hash = 5381;\n    for(var i = 0; i < key.length; i++) {\n        hash = hash * 33 + key.charCodeAt(i);\n    }\n    return hash % 1013;\n}\n\n// 在上面HashTable类中使用djb2散列函数执行上面的例子\n// 159--wenting@email.com\n// 291--xufang@email.com\n// 360--tingwen@email.com\n// 777--yanqing@email.com\n// 944--fangxu@email.com\n// 没有冲突！\n")])])]),t("p",[e._v("上面的 djb2 散列函数的内部是，初始化了一个 hash 变量并赋值为一个质数（大多数实现都是 5381），然后迭代参数 key，奖 hash 与 33 想成（用来当做一个魔力数），并和当前迭代的字符的 ASCII 码值相加。最后使用相加的和与另一个随机质数（比我们认为的散列表的大小要大，在上面的例子中，我们认为散列表的大小为 1000）相除的余数。当然这并不是最好的散列函数，但这是最受社区推崇的散列函数之一。")]),e._v(" "),t("h2",{attrs:{id:"_7、树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7、树"}},[e._v("#")]),e._v(" 7、树")]),e._v(" "),t("p",[e._v("树跟散列表一样，是非顺序数据结构，它对于存储需要快速查找的数据非常有用。树是一种分层数据的抽象模型，最典型的例子就是公司的组织架构图。")]),e._v(" "),t("h3",{attrs:{id:"_1、树的相关术语"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、树的相关术语"}},[e._v("#")]),e._v(" 1、树的相关术语")]),e._v(" "),t("p",[e._v("一个树结构包含一系列存在父子关系的节点。每个节点都有一个父节点（除了顶部的第一个节点）以及零个或多个子节点。")]),e._v(" "),t("p",[e._v("位于树顶的节点叫作根节点，它没有父节点。")]),e._v(" "),t("p",[e._v("树中的每个元素都叫作节点，节点分为内部节点和外部节点。至少有一个子节点的节点称为内部节点。没有子元素的节点称为外部节点或叶节点。")]),e._v(" "),t("p",[e._v("一个节点可以有祖先和后代。一个节点（除了根节点）的祖先包括父节点、祖父节点、曾祖父节点等。一个节点的后代包括子节点、孙子节点、曾孙节点等。")]),e._v(" "),t("p",[e._v("子树：子树由节点和它的后代构成。")]),e._v(" "),t("p",[e._v("节点的一个属性是深度，节点的深度取决于它的祖父节点的数量。")]),e._v(" "),t("p",[e._v("树的高度取决于所有节点深度的最大值。一棵树可以被分解成层级。根节点在第 0 层，它的子节点在第一层，以此类推。")]),e._v(" "),t("h3",{attrs:{id:"_2、二叉树和二叉搜索树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、二叉树和二叉搜索树"}},[e._v("#")]),e._v(" 2、二叉树和二叉搜索树")]),e._v(" "),t("blockquote",[t("p",[t("code",[e._v("二叉树：")]),e._v(" 二叉树中的节点最多只能有两个子节点：一个是左侧子节点，另一个是右侧子节点。")])]),e._v(" "),t("blockquote",[t("p",[e._v("二、"),t("code",[e._v("叉搜索树（BST）:")]),e._v(" 它是二叉树的一种，但是它只允许你在左侧节点存储（比父节点）小的值，在右侧节点存储（比父节点）大或者等于的值。")])]),e._v(" "),t("h3",{attrs:{id:"_3、创建-bst-类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、创建-bst-类"}},[e._v("#")]),e._v(" 3、创建 BST 类")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 构建BST类\nfunction BinarySearchTree() {\n // 跟链表相似，也需要声明一个Node类来表示树中的节点，每个节点有两个指针， 一个指向左侧节点，一个指向右侧节点\n // 跟双向链表的区别是，双向链表的每个节点包含的两个指针，一个指向下一个节点，另一个指向上一个节点\n function Node(key) {\n   // 键是树相关术语中对节点的称呼\n   this.key = key;\n   this.left = null;\n   this.right = null;\n }\n\n // 树的根元素\n var root = null;\n\n // 向树中插入一个新的键\n this.insert = function (key) {\n   var newNode = new Node(key);\n   var insertNode = function (node, newNode) {\n     if(newNode.key < node.key){\n       if(node.left === null) {\n         node.left = newNode;\n       }else {\n         insertNode(node.left, newNode)\n       }\n     }else {\n       if (node.right === null) {\n         node.right = newNode;\n       } else {\n         insertNode(node.right, newNode)\n       }\n     }\n   }\n   if(root === null) {\n     root = newNode;\n   }else {\n     // 将节点插在一个非根节点的其他位置，需要一个私有的辅助函数\n     insertNode(root, newNode)\n   }\n }\n\n // 树的遍历有三种，中序，先序，后序\n // 中序遍历：一种以上行顺序访问BST所有节点的遍历方式，也就是以从小到大的顺序访问所有节点。\n this.inOrderTraverse = function (callback) {\n   var inOrderTraverseNode = function (node, callback) {\n     if(node !== null) {\n       inOrderTraverseNode(node.left, callback)\n       callback(node.key)\n       inOrderTraverseNode(node.right, callback)\n     }\n   };\n   inOrderTraverseNode(root, callback)\n }\n\n // 先序遍历：以优先于后代节点的顺序访问每个节点。\n this.preOrderTraverse = function (callback) {\n   var preOrderTraverseNode = function (node, callback) {\n     if(node !== null) {\n       callback(node.key);\n       preOrderTraverseNode(node.left, callback)\n       preOrderTraverseNode(node.right, callback)\n     }\n   }\n   preOrderTraverseNode(root, callback)\n }\n\n // 后序遍历： 后序遍历先访问节点的后代节点，再访问节点本身。\n this.postOrderTraverse = function (callback){\n   var postOrderTraverseNode = function (node, callback){\n     if(node !== null) {\n       postOrderTraverseNode(node.left, callback)\n       postOrderTraverseNode(node.right, callback)\n       callback(node.key)\n     }\n   }\n   postOrderTraverseNode(root, callback)\n }\n\n // 搜索最小值\n this.min = function () {\n   var minNode = function(node){\n     if(node){\n       while(node && node.left !== null) {\n         node = node.left;\n       }\n       return node.key;\n     }\n     return null;\n   }\n   return minNode(root);\n }\n\n // 搜索最大值\n this.max = function () {\n   var maxNode = function(node) {\n     if(node) {\n       while(node && node.right !== null) {\n         node = node.right;\n       }\n       return node.key;\n     }\n     return null;\n   }\n   return maxNode(root);\n }\n\n // 找一个特定的值，然后存在返回true，不存在返回false\n this.search = function (key) {\n   var searchNode = function (node,key) {\n     if(node === null) {\n       return false;\n     }\n     if(key < node.key) {\n       return searchNode(node.left, key)\n     }else if(key > node.key) {\n       return searchNode(node.right, key)\n     }else {\n       return true;\n     }\n   }\n   return searchNode(root, key)\n }\n\n // 移除一个节点\n this.remove = function (key) {\n   var removeNode = function (node, key) {\n     if(node === null) {\n       return null;\n     }\n     if(key < node.key) {\n       node.left = removeNode(node.left, key);\n       return node;\n     }else if(key > node.key) {\n       node.right = removeNode(node.right,key);\n       return node;\n     }else { // 键等于node.key\n       // 第一种情况，一个叶节点\n       if(node.left === null && node.right === null) {\n         node = null;\n         return node;\n       }\n\n       // 第二种情况，一个只有一个子节点的节点\n       if(node.left === null) {\n         node = node.right;\n         return node;\n       }\n       if(node.right === null) {\n         node = node.left;\n         return node;\n       }\n\n       // 第三种情况,一个有两个子节点的节点（最难想的）\n\n       function findMinNode(node) { //获取最小节点\n         while(node && node.left !== null) {\n           node = node.left;\n         }\n         return node;\n       }\n       // 找到需要移除的节点后，发现有左右两个子节点，那就去找右侧节点下面最小的节点，这个节点一定比要移除的那个节点左侧的节点大，比右侧的节点小（与右侧最小的相等）\n       var aux = findMinNode(node.right);\n       // 把右侧这个最小的节点的key赋值给要移除的节点，通过这一步，我们就改变了要移除节点的值，也就是说这个节点被移除了。\n       node.key = aux.key;\n       // 上一步造成了这个树中有两个拥有相同键的节点，这是不允许的，要继续把右侧子树中的最小节点移除，毕竟它已经被移至要移除的节点的位置了。\n       node.right = removeNode(node.right, aux.key);\n       // 最后，向它的父节点返回更新后节点的引用\n       return node;\n     }\n   }\n   root = removeNode(root, key)\n }\n}\n\n\n// 使用BST类\nlet tree = new BinarySearchTree();\ntree.insert(11)\ntree.insert(9)\ntree.insert(15)\ntree.insert(24)\ntree.insert(7)\ntree.insert(13)\ntree.insert(3)\ntree.insert(8)\n\ntree.inOrderTraverse(function (value){\n   console.log(value)\n})\n// 3,7,8,9,11,13,15,24\n\ntree.preOrderTraverse(function (value) {\n   console.log(value)\n})\n// 11,9,7,3,8,15,13,24\n\ntree.postOrderTraverse(function (value){\n   console.log(value)\n})\n// 3,8,7,9,13,24,15,11\n\nlet min = tree.min();\nconsole.log(min) // 3\n\nlet max = tree.max();\nconsole.log(max) // 24\n\nconsole.log(tree.search(1)) //false 节点中没有1\nconsole.log(tree.search(15)) //true 节点中有15\n\ntree.remove(24);\ntree.remove(7);\ntree.inOrderTraverse(function (value){\n   console.log(value)\n})\n// 3,8,9,11,13,15\n")])])]),t("h2",{attrs:{id:"_8、图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8、图"}},[e._v("#")]),e._v(" 8、图")]),e._v(" "),t("blockquote",[t("p",[e._v("图是网络结构的抽象模型，图是一组由 "),t("code",[e._v("边")]),e._v(" 连接的 "),t("code",[e._v("节点(或顶点)")]),e._v("，任何二元关系都可以用图来表示。特别常见的例子就是社交网络，比如六度空间理论（最多通过六个人你就能够认识任何一个陌生人），脑海中出现了一张大网！")])]),e._v(" "),t("h3",{attrs:{id:"_1、概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、概念"}},[e._v("#")]),e._v(" 1、概念")]),e._v(" "),t("p",[e._v("一个图 "),t("code",[e._v("G = (V,E)")]),e._v(" 由以下元素组成。\nV: 一组顶点\nE：一组边，连接 V 中的顶点")]),e._v(" "),t("p",[e._v("相邻顶点： 由一条边连接在一起的顶点成为相邻顶点。")]),e._v(" "),t("p",[e._v("度： 一个顶点的度指的是相邻顶点的数量。")]),e._v(" "),t("p",[e._v("路径： 路径是顶点 v1,v2,……,vk 的一个连续序列，其中 vi 和 vi+1 是相邻的。简单路径要求不包含重复的顶点。")]),e._v(" "),t("p",[e._v("如果图中不存在环，则称该图是无环的。如果图中每两个顶点间都存在路径，则该图是连通的。")]),e._v(" "),t("h3",{attrs:{id:"_2、图的表示"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、图的表示"}},[e._v("#")]),e._v(" 2、图的表示")]),e._v(" "),t("blockquote",[t("p",[e._v("从数据结构的角度来说，我们有多种方式来表示图。图的正确表示法取决于待解决的问题和图的类型。")])]),e._v(" "),t("h4",{attrs:{id:"_1、邻接矩阵"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、邻接矩阵"}},[e._v("#")]),e._v(" 1、邻接矩阵")]),e._v(" "),t("p",[e._v("图最常见的实现是邻接矩阵。每个节点都和一个整数相关联，该整数将作为数组的索引。我们用一个二维数组来表示定点之间的连接。如果索引为 i 的节点和索引为 j 的节点相邻，则 "),t("code",[e._v("array[i][j] === 1")]),e._v(" ，否则 "),t("code",[e._v("array[i][j] === 0")]),e._v("。")]),e._v(" "),t("h4",{attrs:{id:"_2、邻接表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、邻接表"}},[e._v("#")]),e._v(" 2、邻接表")]),e._v(" "),t("p",[e._v("邻接表由图中每个定点的相邻顶点列表所组成。")]),e._v(" "),t("h4",{attrs:{id:"_3、关联矩阵"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、关联矩阵"}},[e._v("#")]),e._v(" 3、关联矩阵")]),e._v(" "),t("p",[e._v("在关联矩阵中，矩阵的行表示顶点，列表示边。")]),e._v(" "),t("h3",{attrs:{id:"_4、创建-graph-类-邻接表表示法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、创建-graph-类-邻接表表示法"}},[e._v("#")]),e._v(" 4、创建 Graph 类（邻接表表示法）")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function Graph() {\n    let vertices = [],\n        adjList = new Map();\n\n    this.addVertex = function (v) {\n        vertices.push(v)\n        adjList.set(v, [])\n    }\n\n    this.addEdge = function (v,w) {\n        adjList.get(v).push(w)\n        adjList.get(w).push(v)\n    }\n\n    this.toString = function () {\n        let s = '';\n        for(var i = 0; i < vertices.length; i++) {\n            s += vertices[i] + '->';\n            let neighbors = adjList.get(vertices[i]);\n            for(var j = 0; j < neighbors.length; j ++) {\n                s += neighbors[j];\n            }\n            s += '\\n'\n        }\n        return s;\n    }\n}\n\n//使用Graph类\nlet graph = new Graph();\nlet myVertices = ['A','B','C','D','E'];\nfor(var i = 0; i < myVertices.length; i++){\n    graph.addVertex(myVertices[i])\n}\ngraph.addEdge('A','B')\ngraph.addEdge('A','C')\ngraph.addEdge('A','D')\ngraph.addEdge('C','D')\ngraph.addEdge('C','E')\ngraph.addEdge('B','E')\nconsole.log(graph.toString())\n打印结果：\nA->BCD\nB->AE\nC->ADE\nD->AC\nE->CB\n")])])]),t("h3",{attrs:{id:"_5、图的遍历"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、图的遍历"}},[e._v("#")]),e._v(" 5、图的遍历")]),e._v(" "),t("p",[e._v("一般有两种算法可以对图进行遍历：广度优先搜索（BFS）和深度优先搜索（DFS）。图遍历可以用来寻找特定的顶点或寻找两个顶点之间的路径，检查图是否连通，检查图是否含有环等。\n图遍历算法的思想是必须追踪每个第一次访问的节点，并且追踪有哪些节点还没有被完全探索。对于两种图遍历算法，都需要明确指出第一个被访问的顶点。\n完全探索一个顶点要求我们查看该顶点的每一条边。对于每一条边所连接的没有被访问过的顶点，将其标注为被发现的，并将其加进待访问顶点列表中。\n为了保证算法的效率，务必访问每个顶点至多两次。连通图中每条边和顶点都会被访问到。")]),e._v(" "),t("blockquote",[t("p",[e._v("广度优先搜索算法和深度优先搜索算法基本上是相同的，只有一点不同，那就是待访问顶点列表的数据结构。")])]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("算法")]),e._v(" "),t("th",[e._v("数据结构")]),e._v(" "),t("th",[e._v("描述")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("深度优先搜索")]),e._v(" "),t("td",[e._v("栈")]),e._v(" "),t("td",[e._v("通过将顶点存入栈中，顶点是沿着路径被探索的，存在新的相邻顶点就去访问")])]),e._v(" "),t("tr",[t("td",[e._v("广度优先搜索")]),e._v(" "),t("td",[e._v("队列")]),e._v(" "),t("td",[e._v("通过将顶点存入队列中，最先入队列的顶点先被探索")])])])]),e._v(" "),t("p",[e._v("两种算法之前，先确定标注已经访问过的顶点状态颜色。")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("颜色")]),e._v(" "),t("th",[e._v("状态")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("白色")]),e._v(" "),t("td",[e._v("表示该节点没有被访问")])]),e._v(" "),t("tr",[t("td",[e._v("灰色")]),e._v(" "),t("td",[e._v("表示该顶点被访问过，但并未被探索过")])]),e._v(" "),t("tr",[t("td",[e._v("黑色")]),e._v(" "),t("td",[e._v("表示该顶点被访问过且被完全探索过")])])])]),e._v(" "),t("h4",{attrs:{id:"_1、广度优先搜索"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、广度优先搜索"}},[e._v("#")]),e._v(" "),t("font",{attrs:{color:"#e6a920"}},[e._v("1、广度优先搜索")])],1),e._v(" "),t("blockquote",[t("p",[e._v("广度优先搜索算法会从指定的第一个顶点开始遍历图，先访问其所有的相邻点，就像一次访问图的一层。换句话说就是先宽后深地访问顶点。")])]),e._v(" "),t("p",[e._v("广度优先搜索和深度优先搜索都需要标注被访问过的顶点，所以需要需要一个辅助数组 color，当算法开始执行时，所有的顶点颜色都是白色，所以我们创建了一个 initilizeColor 的辅助函数，为这两个算法执行初始化颜色的操作\n1、bfs 方法接受一个顶点作为算法的起始点，将此顶点入队列。\n2、如果队列非空，我们将通过出队列操作从队列中移除一个顶点，并取得一个包含其所有邻点的邻接表。该顶点江北标注为 grey，表示我们发现了这个顶点，但是还没有对它进行完全的探索。\n3、对于邻接表里的每个顶点，得到他们的值，从颜色辅助数组中查看此顶点，如果是 white，表示从未被访问过，我们将它的颜色编程 grey，并将这个顶点加入队列中，这样就可以等待它从队列中出队列时，就可以对它进行完全探索。\n4、当完成探索该点，并且访问了其相邻顶点后，就可以认定该点被彻底探索过了，颜色设置为 black。此后就可以执行回调函数，传入此点。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function Graph() {\n……\n//增加颜色初始化的方法\nlet initilizeColor = function () {\n    let color = {};\n    for(let i = 0; i < vertices.length; i++) {\n        color[vertices[i]] = 'white';\n    }\n    return color;\n}\n//增加广度优先遍历方法\nthis.bfs = function (v, callback) {\n    let color = initilizeColor(),\n        queue = new Queue();\n    queue.enqueue(v)\n    while(!queue.isEmpty()) {\n        let u = queue.dequeue(),\n            neighbors = adjList.get(u);\n        color[u] = 'grey';\n        for(let i = 0; i < neighbors.length; i++) {\n            let w = neighbors[i];\n            if(color[w] === 'white') {\n                color[w] = 'grey';\n                queue.enqueue(w)\n            }\n        }\n        color[u] = 'black';\n        if(callback) {\n            callback(u);\n        }\n    }\n}\n\n……\n}\n\n//使用广度优先遍历方法\ngraph.bfs(myVertices[0],function (v) {\n    console.log('访问顶点'+v)\n})\n//打印\n//访问顶点A\n//访问顶点B\n//访问顶点C\n//访问顶点D\n//访问顶点E\n\n")])])]),t("p",[t("strong",[e._v("以上是介绍的 BFS 算法的工作原理，还可以再继续深入，寻找两个顶点的的最短路径距离，和每个顶点的上一个顶点。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('this.BFS = function (v) {\n    let color = initilizeColor(),\n        queue = new Queue(),\n        d = {},\n        pred = {};\n    queue.enqueue(v);\n    for(let i = 0; i < vertices.length; i++) {\n        d[vertices[i]] = 0;\n        pred[vertices[i]] = null;\n    }\n    while(!queue.isEmpty()) {\n        let u = queue.dequeue(),\n            neighbors = adjList.get(u);\n        color[u] = \'grey\';\n        for(let i = 0; i < neighbors.length; i++) {\n            let w = neighbors[i];\n            if(color[w] === \'white\') {\n                queue.enqueue(w);\n                color[w] = \'grey\';\n                d[w] = d[u] + 1;\n                pred[w] = u;\n            }\n        }\n        color[u] = \'black\';\n    }\n    return {\n        distances: d,\n        predecessors: pred\n    }\n}\n\n//使用BFS方法\ngraph.BFS(myVertices[0])\n//返回：{"distances":{"A":0,"B":1,"C":1,"D":1,"E":2},"predecessors":{"A":null,"B":"A","C":"A","D":"A","E":"B"}}\n//即从A到B、C、D的距离是1，到E的距离是2\n\n// 我们通过BFS方法获取到的前溯点数组，可以构建从顶点到其他的顶点的路径\nlet shortestPathA = graph.BFS(myVertices[0]);\nlet fromVertex = myVertices[0];\nfor(let i = 1; i < myVertices.length; i++) {\n    let toVertex = myVertices[i];\n    let path = new Stack();\n    for(let v = toVertex; v !== fromVertex; v = shortestPathA.predecessors[v]) {\n        path.push(v)\n    }\n    path.push(fromVertex)\n    let s = path.pop();\n    while(!path.isEmpty()) {\n        s += ` - ${path.pop()}`;\n    }\n    console.log(s)\n}\n//输出\n//A - B\n//A - C\n//A - D\n//A - B - E\n\n')])])]),t("p",[e._v("以上说的图不是加权图，如果要计算加权图中的最短路径（例如，城市 A 和城市 B 之间的最短路径——GPS 和 Google Maps 中用到的算法），广度优先搜索未必合适。")]),e._v(" "),t("blockquote",[t("p",[e._v("举例\n"),t("strong",[e._v("Dijkstra 算法")]),e._v(" 解决了单源最短路径问题。 "),t("strong",[t("a",{attrs:{href:"http://www.zhiwenli.com/wordpress/?p=745",target:"_blank",rel:"noopener noreferrer"}},[e._v("1、Dijkstra 实现"),t("OutboundLink")],1)]),e._v(" "),t("strong",[t("a",{attrs:{href:"http://www.bijishequ.com/detail/439838?p=",target:"_blank",rel:"noopener noreferrer"}},[e._v("2、理解 Dijkstra"),t("OutboundLink")],1)]),e._v(" > "),t("strong",[e._v("Bellman-Ford 算法")]),e._v(" 解决了边权值为负的单源最短路径问题。 "),t("strong",[t("a",{attrs:{href:"https://segmentfault.com/a/1190000012691823",target:"_blank",rel:"noopener noreferrer"}},[e._v("Bellman-Ford 实现"),t("OutboundLink")],1)]),e._v(" "),t("strong",[t("a",{attrs:{href:"https://my.oschina.net/qiaotoubao/blog/735890",target:"_blank",rel:"noopener noreferrer"}},[e._v("理解 Bellman-Ford"),t("OutboundLink")],1)]),e._v(" > "),t("strong",[e._v("A*搜索算法")]),e._v(" 解决了求仅一对顶点间的最短路径问题，它用经验法则来加速搜索过程。 "),t("strong",[t("a",{attrs:{href:"https://my.oschina.net/parker/blog/711300",target:"_blank",rel:"noopener noreferrer"}},[e._v("A*搜索算法实现"),t("OutboundLink")],1)]),e._v(" > "),t("strong",[e._v("Floyd-Warshall 算法")]),e._v(" 解决了求所有顶点对间的最短路径这一问题。 "),t("strong",[t("a",{attrs:{href:"https://my.oschina.net/qiaotoubao/blog/738646",target:"_blank",rel:"noopener noreferrer"}},[e._v("理解 Floyd-Warshall 算法"),t("OutboundLink")],1)])])]),e._v(" "),t("h4",{attrs:{id:"_2、深度优先搜索"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、深度优先搜索"}},[e._v("#")]),e._v(" "),t("font",{attrs:{color:"#e6a920"}},[e._v("2、深度优先搜索")])],1),e._v(" "),t("blockquote",[t("p",[e._v("深度优先搜索算法将会从第一个指定的顶点开始遍历图，沿着路径直到这条路径最后一个顶点被访问了，接着原路回退并搜索下一条路径。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("this.dfs = function (callback) {\n    let dfsVisit = function (u, color, callback) {\n        color[u] = 'grey';\n        if(callback) {\n            callback(u)\n        }\n        let neighbors = adjList.get(u);\n        for(var i = 0; i < neighbors.length; i++) {\n            let w = neighbors[i];\n            if(color[w] === 'white') {\n                dfsVisit(w, color, callback)\n            }\n        }\n        color[u] = 'black';\n    }\n    let color = initilizeColor();\n    for(let i = 0; i < vertices.length; i++) {\n        if(color[vertices[i]] === 'white') {\n            dfsVisit(vertices[i], color, callback)\n        }\n    }\n}\n\n// 在上面已经添加节点的后面执行\n\ngraph.dfs(function (v) {\n    console.log('访问顶点'+v)\n})\n//打印\n// 访问顶点A\n// 访问顶点B\n// 访问顶点E\n// 访问顶点C\n// 访问顶点D\n")])])]),t("p",[e._v("上面展示了深度优先搜索算法的工作原理。我们也可以对于给定的图 G，我们通过深度优先搜索算法遍历图 G 的所有节点，构建“森林”（有跟树的一个集合）以及一组源顶点（根），并输出两个数组：发现时间和完成探索时间。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 接上面例子\n\nthis.DFS = function () {\n    let time = 0;\n    let color = initilizeColor(),\n    d = {},\n    f = {},\n    p = {};\n    let DFSVisit = function (u,color,d,f,p) {\n        console.log(\'discovered\' + u)\n        color[u] = \'grey\';\n        d[u] = ++time;\n        let neighbors = adjList.get(u);\n        for(let i = 0; i < neighbors.length; i++) {\n            var w = neighbors[i];\n            if(color[w] === \'white\') {\n                p[w] = u;\n                DFSVisit(w,color,d,f,p)\n            }\n        }\n        color[u] = \'black\';\n        f[u] = ++time;\n        console.log(\'explored\' + u)\n\n    }\n    for(let i = 0; i < vertices.length; i++) {\n        f[vertices[i]] = 0;\n        d[vertices[i]] = 0;\n        p[vertices[i]] = null;\n    }\n    for(let i = 0; i < vertices.length; i++) {\n        if(color[vertices[i]] === \'white\') {\n            DFSVisit(vertices[i],color,d,f,p)\n        }\n    }\n    return {\n        discovery: d,\n        finished: f,\n        perdecessors: p\n    }\n}\n\n// 执行\nconsole.log(graph.DFS())\n\n// 其中有两个打印\n//descoveredA、descoveredB、descoveredE、descoveredC、descoveredD\n//exploredD、exploredC、exploredE、exploredB、exploredA\n//返回值\n{"discovery":{"A":1,"B":2,"C":4,"D":5,"E":3},"finished":{"A":10,"B":9,"C":7,"D":6,"E":8},"perdecessors":{"A":null,"B":"A","C":"E","D":"C","E":"B"}}\n')])])])])}),[],!1,null,null,null);n.default=r.exports}}]);