(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{485:function(t,e,a){t.exports=a.p+"assets/img/shell4.afe03856.png"},486:function(t,e,a){t.exports=a.p+"assets/img/shell5.e1109e4e.png"},487:function(t,e,a){t.exports=a.p+"assets/img/shell2.c03c91b8.png"},488:function(t,e,a){t.exports=a.p+"assets/img/shell3.dcaf959e.png"},684:function(t,e,a){"use strict";a.r(e);var s=a(45),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"shell-脚本编程详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#shell-脚本编程详解"}},[t._v("#")]),t._v(" Shell 脚本编程详解")]),t._v(" "),s("p",[t._v("Shell 脚本（shell script），是一种为 Shell 编写的脚本程序，一般文件后缀为 "),s("code",[t._v(".sh")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"脚本解释器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#脚本解释器"}},[t._v("#")]),t._v(" 脚本解释器")]),t._v(" "),s("p",[s("code",[t._v("#!")]),t._v(" 是一个约定的标记，它告诉系统这个脚本需要什么解释器来运行，即：使用哪一种 Shell。"),s("code",[t._v("#!")]),t._v("被称为"),s("a",{attrs:{href:"https://zh.wikipedia.org/wiki/Shebang",target:"_blank",rel:"noopener noreferrer"}},[t._v("shebang（也称为 Hashbang）"),s("OutboundLink")],1),t._v(",例如使用 bash："),s("code",[t._v("#! /bin/bash")])]),t._v(" "),s("p",[t._v("新建一个 test.sh 的文件，内容如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('#!/bin/bash\n\necho "Hello World!"\n')])])]),s("h2",{attrs:{id:"运行-shell-脚本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运行-shell-脚本"}},[t._v("#")]),t._v(" 运行 Shell 脚本")]),t._v(" "),s("h3",{attrs:{id:"第一种方式-作为可执行程序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一种方式-作为可执行程序"}},[t._v("#")]),t._v(" 第一种方式：作为可执行程序")]),t._v(" "),s("p",[t._v("1、当前 test.sh 是没有可执行权限的，首先使脚本文件具有执行权限。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# 使脚本文件具有执行权限\nchmod +x ./test.sh\n")])])]),s("p",[t._v("2、执行脚本")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# 执行脚本，需注意要加目录的标识\n./test.sh\n\n# 也可以用 source 来执行脚本，跟上面的写法是等价的，但是不需要脚本具有执行权限\nsource ./test.sh\n")])])]),s("p",[s("strong",[t._v("注意：一定要写成 ./test.sh ,而不是 test.sh 。运行其他二进制的程序也是一样，直接写 test.sh，Linux 系统会去 PATH 中寻找有没有叫 test.sh 的，而只有 /bin, /sbin, /usr/bin, /usr/sbin 等在 PATH 中。你的当前目录通常不在 PATH 中，所以写成 test.sh 是找不到命令的，要用./test.sh 告诉系统，就在当前目录找。")])]),t._v(" "),s("p",[t._v("通过这种方式运行 bash 脚本，第一行一定要写对，好让系统（Shell 程序）查找到正确的解释器。如果是使用标准默认的 Shell，可以省去第一行。")]),t._v(" "),s("h4",{attrs:{id:"扩展-source-script-sh-和-script-sh-有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#扩展-source-script-sh-和-script-sh-有什么区别"}},[t._v("#")]),t._v(" 扩展："),s("code",[t._v("source script.sh")]),t._v(" 和 "),s("code",[t._v("./script.sh")]),t._v(" 有什么区别?")]),t._v(" "),s("p",[t._v("这两种情况 script.sh 都会在 bash 会话中被读取和执行，不同点在于哪个会话执行这个命令。")]),t._v(" "),s("p",[t._v("对于 source 命令来说，命令是在当前的 bash 会话中执行的，因此当 source 执行完毕，对当前环境的任何更改（例如更改目录或是定义函数）都会留存在当前会话中。")]),t._v(" "),s("p",[t._v("单独运行 ./script.sh 时，当前的 bash 会话将启动新的 bash 会话（实例），并在新实例中运行命令 script.sh。因此，如果 script.sh 更改目录，新的 bash 会话（实例）会更改目录，但是一旦退出并将控制权返回给父 bash 会话，父会话仍然留在先前的位置（不会有目录的更改）。")]),t._v(" "),s("p",[t._v("同样，如果 script.sh 定义了要在终端中访问的函数，需要用 source 命令在当前 bash 会话中定义这个函数。否则，如果你运行 ./script.sh，只有新的 bash 会话（进程）才能执行定义的函数，而当前的 shell 不能。")]),t._v(" "),s("h3",{attrs:{id:"第二种方式-作为解释器参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二种方式-作为解释器参数"}},[t._v("#")]),t._v(" 第二种方式：作为解释器参数")]),t._v(" "),s("p",[t._v("直接运行解释器，其参数就是 Shell 脚本的文件名。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("/bin/bash test.sh\n")])])]),s("p",[t._v("这种方式运行的脚本，不需要在第一行指定解释器信息，写了也没用。")]),t._v(" "),s("h2",{attrs:{id:"语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[t._v("#")]),t._v(" 语法")]),t._v(" "),s("h3",{attrs:{id:"_1、注释"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、注释"}},[t._v("#")]),t._v(" 1、注释")]),t._v(" "),s("ul",[s("li",[t._v("单行注释：以 "),s("code",[t._v("#")]),t._v(" 开头，到行尾结束。")]),t._v(" "),s("li",[t._v("多行注释：以 "),s("code",[t._v(":<<EOF")]),t._v(" 开头，到 "),s("code",[t._v("EOF")]),t._v(" 结束")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# 这是单行注释\n\n:<<EOF\n这是多行注释\n这是多行注释\nEOF\n")])])]),s("p",[t._v("如果有段代码要频繁的注释和取消注释，可以用花括号括起来，定义成一个函数，没有地方调用这个函数，这块代码就不会执行，达到了和注释一样的效果。")]),t._v(" "),s("h3",{attrs:{id:"_2、变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、变量"}},[t._v("#")]),t._v(" 2、变量")]),t._v(" "),s("h4",{attrs:{id:"变量类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量类型"}},[t._v("#")]),t._v(" 变量类型")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("局部变量")]),t._v("：局部变量是仅在某个脚本内部有效的变量，它们不能被其他的程序和脚本访问。函数中能声明函数内部的局部变量。")]),t._v(" "),s("li",[s("strong",[t._v("环境变量")]),t._v("：环境变量是从父进程中继承而来的变量，对当前 Shell 会话内所有的程序和脚本都可见。创建它们跟创建局部变量类似，但使用的是 "),s("code",[t._v("export")]),t._v(" 关键字，shell 脚本也可以定义环境变量，但一般自己定义的环境变量关掉当前 Shell 就失效了，后面有介绍怎么让环境变量持久化。")]),t._v(" "),s("li",[s("strong",[t._v("shell 变量（系统变量）")]),t._v("：shell 变量是由 shell 程序设置的特殊变量。shell 变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了 shell 的正常运行。")])]),t._v(" "),s("h4",{attrs:{id:"变量语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量语法"}},[t._v("#")]),t._v(" 变量语法")]),t._v(" "),s("p",[t._v("1、声明变量")]),t._v(" "),s("p",[t._v("可以使用等号操作符为变量赋值："),s("code",[t._v("varName=value")]),t._v("，varName 是变量名，value 是赋值给变量的值。")]),t._v(" "),s("p",[t._v("变量名的命名规则：")]),t._v(" "),s("ul",[s("li",[t._v("首字母必须为字母（a-z,A-Z），剩下的部分只能使用英文字母，数字下划线")]),t._v(" "),s("li",[t._v("中间不能有空格，可以使用下划线，如果有空格，必须使用单引号或双引号")]),t._v(" "),s("li",[t._v("不能使用标点符号")]),t._v(" "),s("li",[t._v("不能使用 shell 关键字")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("#!/bin/bash\n\nfruit=apple\ncount=5\n")])])]),s("p",[s("strong",[t._v("注意："),s("code",[t._v("varName=value")]),t._v("的等号两边没有空格，变量值如果有空格，需要用引号包住。")])]),t._v(" "),s("p",[t._v("2、访问变量")]),t._v(" "),s("p",[t._v("访问变量的语法形式为："),s("code",[t._v("${varName}")]),t._v(" 和 "),s("code",[t._v("$varName")]),t._v("，变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界（推荐加花括号）。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('#!/bin/bash\n\nfruit=apple\ncount=5\necho "We have $count ${fruit}s"\n#输出：We have 5 apples\n')])])]),s("p",[t._v("因为 Shell 使用空白字符来分隔单词，所以上面的例子中需要加上花括号来告诉 Shell 这里的变量名是 fruit，而不是 fruits")]),t._v(" "),s("p",[s("strong",[t._v("注意：使用单引号时，变量不会被扩展(expand)，仍依照原样显示。这意味着 "),s("code",[t._v("echo '$var'")]),t._v("会显示 "),s("code",[t._v("$var")]),t._v("。使用双引号时，如果 "),s("code",[t._v("$var")]),t._v(" 已经定义过，那么 "),s("code",[t._v('echo "$var"')]),t._v("会显示出该变量的值，如果没有定义过，则什么都不显示。")])]),t._v(" "),s("p",[t._v("3、只读变量")]),t._v(" "),s("p",[t._v("使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("#!/bin/bash\n\nfruit=apple\necho $fruit\nreadonly fruit\n#fruit=banana  #如果放开注释，执行时会报错\n")])])]),s("p",[t._v("4、删除变量")]),t._v(" "),s("p",[t._v("使用 unset 命令可以删除变量，变量被删除后不能再次使用。"),s("strong",[t._v("unset 命令不能删除只读变量")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("#!/bin/bash\n\nfruit=apple\necho $fruit\n#输出： apple\n\nunset fruit\necho $fruit\n#输出： (空)\n")])])]),s("h4",{attrs:{id:"shell-特殊变量-系统变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#shell-特殊变量-系统变量"}},[t._v("#")]),t._v(" Shell 特殊变量（系统变量）")]),t._v(" "),s("p",[t._v("上面讲过变量名的命名规则，但是还有一些包含其他字符的变量有特殊含义，这样的变量被称为特殊变量。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("变量")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("$0")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("当前脚本的文件名")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("$n")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是"),s("code",[t._v("$1")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("$#")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("传递给脚本或函数的参数个数")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("$*")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("传递给脚本或函数的所有参数")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("$@")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v('传递给脚本或函数的所有参数，被双引号（""）包含时，与'),s("code",[t._v("$*")]),t._v("稍有不同")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("$FUNCNAME")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("函数名称（仅在函数内值）")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("$?")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("上个命令的退出状态，或函数的返值")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("$-")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("显示 shell 使用的当前选项(flag)，后面扩展中检测是否为交互模式时会用到")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("$$")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("当前 Shell 进程 ID。对于 Shell 脚本，就是这些脚本所在的进程 ID")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("$!")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("最后一个后台运行的进程 ID 号")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("命令行参数：运行脚本时传递给脚本的参数成为命令行参数，命令行参数用 "),s("code",[t._v("$n")]),t._v(" 表示。")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('#!/bin/bash\n\n# ./test.sh\n\necho "文件名：$0"\necho "第一个命令行参数：$1"\necho "第二个命令行参数：$2"\necho "传入的全部参数：$@"\necho "传入的全部参数：$*"\necho "全部参数的数量：$#"\n')])])]),s("p",[t._v("执行命令："),s("code",[t._v("./test.sh Linux Shell")]),t._v("，结果为：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("文件名：./test.sh\n第一个命令行参数：Linux\n第二个命令行参数：Shell\n传入的全部参数：Linux Shell\n传入的全部参数：Linux Shell\n全部参数的数量：2\n")])])]),s("p",[s("code",[t._v("$?")]),t._v(" 可以获取上一个命令的退出状态。所谓退出状态，就是上一个命令执行后的返回结果。退出状态是一个数字，一般情况下，大部分命令执行成功会返回 0，失败会返回 1。"),s("code",[t._v("$?")]),t._v("也可以表示函数的返回值。")]),t._v(" "),s("h3",{attrs:{id:"_3、字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、字符串"}},[t._v("#")]),t._v(" 3、字符串")]),t._v(" "),s("h4",{attrs:{id:"字符串引号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串引号"}},[t._v("#")]),t._v(" 字符串引号")]),t._v(" "),s("p",[t._v("shell 字符串可以使用单引号 "),s("code",[t._v("''")]),t._v(" ，也可以使用双引号"),s("code",[t._v('""')]),t._v(" ， 也可以不用引号。")]),t._v(" "),s("ul",[s("li",[t._v("单引号：不识别变量，单引号中间不能出现单独的单引号（使用转义字符转义也不行），可以成对出现实现字符串拼接。")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("name='world'\n\nbefore='hello,'${name}'!' #使用单引号拼接字符串\nafter='hello,${name}!'  #单引号中变量不解析\n\necho ${before}_${after}\n# 输出：hello,world!_hello,${name}!\n")])])]),s("ul",[s("li",[t._v("双引号：可以识别变量，双引号中可以出现用转义字符转义的双引号")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('name="\\"shell\\""  #双引号内允许出现被转义的双引号\n\nbefore="hello,"${name}"!" #使用双引号拼接字符串\nafter="hello,${name}!" #双引号中变量会解析\n\necho ${before}_${after}\n# 输出：hello,"shell"!_hello,"shell"!\n')])])]),s("blockquote",[s("p",[t._v("设置一个字符串变量，下面的都是对这个变量的操作")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("file=/dir1/dir2/dir3/my.file.txt\n")])])]),s("h4",{attrs:{id:"var-获得变量值的长度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#var-获得变量值的长度"}},[t._v("#")]),t._v(" "),s("code",[t._v("${#var}")]),t._v("：获得变量值的长度")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("echo ${#file}\n# 输出：27\n")])])]),s("h4",{attrs:{id:"var-x-x-通过索引位置截取子字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#var-x-x-通过索引位置截取子字符串"}},[t._v("#")]),t._v(" "),s("code",[t._v("${var:x:x}")]),t._v("：通过索引位置截取子字符串")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("echo ${file:0:5} #截取最左侧的5个字符\n# 输出：/dir1\n\necho ${file:5:5} #从第6个字符开始，截取5个字符\n# 输出：/dir2\n")])])]),s("h4",{attrs:{id:"var-、-var-删除字符串左侧的值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#var-、-var-删除字符串左侧的值"}},[t._v("#")]),t._v(" "),s("code",[t._v("${var#}")]),t._v("、"),s("code",[t._v("${var##}")]),t._v("：删除字符串左侧的值")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("echo ${file#*/} #删除第一个 / 及其左侧的字符串\n# 输出：dir1/dir2/dir3/my.file.txt\n\necho ${file##*/} #删除最后一个 / 及其左侧的字符串\n# 输出：my.file.txt\n\necho ${file#*.} #删除第一个 . 及其左侧的字符串\n# 输出：file.txt\n\necho ${file##*.} #删除最后一个 . 及其左侧的字符串\n# 输出：txt\n")])])]),s("h4",{attrs:{id:"var-、-var-删除字符串右侧的值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#var-、-var-删除字符串右侧的值"}},[t._v("#")]),t._v(" "),s("code",[t._v("${var%}")]),t._v("、"),s("code",[t._v("${var%%}")]),t._v("：删除字符串右侧的值")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("echo ${file%/*} #删除最后一个 / 及其右侧的字符串\n# 输出：/dir1/dir2/dir3\n\necho ${file%%/*} #删除第一个 / 及其右侧的字符串\n# 输出：(空值)\n\necho ${file%.*} #删除最后一个 . 及其右侧的字符串\n# 输出：/dir1/dir2/dir3/my.file\n\necho ${file%%.*} #删除第一个 . 及其右侧的字符串\n#输出：/dir1/dir2/dir3/my\n")])])]),s("h4",{attrs:{id:"var-word-如果变量-var-为空、没有定义或已被删除-unset-那么返回-word-但不改变-var-的值。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#var-word-如果变量-var-为空、没有定义或已被删除-unset-那么返回-word-但不改变-var-的值。"}},[t._v("#")]),t._v(" "),s("code",[t._v("${var:-word}")]),t._v("：如果变量 var 为空、没有定义或已被删除（unset），那么返回 word，但不改变 var 的值。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('echo ${var:-"var is not set"}\n#输出：var is not set\n\necho "var is ${var}"\n#此时 var 还是没有定义，所以输出：var is\n')])])]),s("h4",{attrs:{id:"var-word-如果变量-var-为空、没有定义或者已被删除-那么返回-word-并将-var-的值设置为-word。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#var-word-如果变量-var-为空、没有定义或者已被删除-那么返回-word-并将-var-的值设置为-word。"}},[t._v("#")]),t._v(" "),s("code",[t._v("${var:=word}")]),t._v("：如果变量 var 为空、没有定义或者已被删除，那么返回 word，并将 var 的值设置为 word。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('echo ${var:="var is not set"}\n#输出：var is not set\n\necho "var is ${var}"\n#此时 var 已经定义为var is not set 了，所以输出：var is var is not set\n')])])]),s("h4",{attrs:{id:"var-message-如果变量-var-为空、没有定义或者已被删除-那么将消息-message-送到标准错误输出。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#var-message-如果变量-var-为空、没有定义或者已被删除-那么将消息-message-送到标准错误输出。"}},[t._v("#")]),t._v(" "),s("code",[t._v("${var:?message}")]),t._v("：如果变量 var 为空、没有定义或者已被删除，那么将消息 message 送到标准错误输出。")]),t._v(" "),s("p",[t._v("可以用来检测变量 var 是否可以被正常赋值。若此替换出现在 shell 脚本中，那么脚本将停止运行。")]),t._v(" "),s("h4",{attrs:{id:"var-word-如果变量-var-被定义-那么返回-word-但不改变-var-的值。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#var-word-如果变量-var-被定义-那么返回-word-但不改变-var-的值。"}},[t._v("#")]),t._v(" "),s("code",[t._v("${var:+word}")]),t._v("：如果变量 var 被定义，那么返回 word，但不改变 var 的值。")]),t._v(" "),s("h3",{attrs:{id:"数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),s("p",[t._v("数组是可以存储多个值的变量，这些值可以单独引用，也可以作为整个数组来引用。数组的下标从 0 开始，下标可以是整数或算数表达式，其值应该大于等于 0。")]),t._v(" "),s("h4",{attrs:{id:"创建数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建数组"}},[t._v("#")]),t._v(" 创建数组")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("numbers=(one two three four five)\n\n#创建数组时指明下标\ncolors=([1]=red [0]=yello [2]=blue)\n")])])]),s("h4",{attrs:{id:"访问数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#访问数组"}},[t._v("#")]),t._v(" 访问数组")]),t._v(" "),s("p",[t._v("访问单个元素")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("echo ${numbers[2]}\n#输出：three\n")])])]),s("p",[t._v("访问数组的所有元素")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("echo ${colors[*]}\n#输出：yello red blue\n\necho ${colors[@]}\n#输出：yello red blue\n")])])]),s("p",[s("code",[t._v("${colors[*]}")]),t._v("和"),s("code",[t._v("${colors[@]}")]),t._v("有些细微的差别，在将数组中的每个元素单独一行输出的时候，有没有被引号包住会有不同的差别，在引号内，"),s("code",[t._v("${colors[@]}")]),t._v("将数组中的每个元素扩展为一个单独的参数，数组元素中的空格得以保留。")]),t._v(" "),s("p",[t._v("访问数组部分元素")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# :0:2 去除数组中从0开始，长度为2的数组元素\necho ${colors[@]:0:2}\n#输出：yello red\n")])])]),s("h4",{attrs:{id:"数组的长度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组的长度"}},[t._v("#")]),t._v(" 数组的长度")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("echo ${#colors[@]}\n#输出：3\n")])])]),s("h4",{attrs:{id:"数组中添加元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组中添加元素"}},[t._v("#")]),t._v(" 数组中添加元素")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('colors=(white "${colors[@]}" green black)\n\necho ${colors[@]}\n#输出：white yello red blue green black\necho ${#colors[@]}\n#输出：6\n')])])]),s("h4",{attrs:{id:"数组中删除元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组中删除元素"}},[t._v("#")]),t._v(" 数组中删除元素")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("unset colors[2]\n\necho ${colors[@]}\n#输出：white yello blue green black\necho ${#colors[@]}\n#输出：5\n")])])]),s("h4",{attrs:{id:"完整的代码示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#完整的代码示例"}},[t._v("#")]),t._v(" 完整的代码示例：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('#!/bin/bash\n\n\nnumbers=(one two three four five)\n\ncolors=([1]=red [0]=yello [2]=blue)\n\necho ${numbers[2]}\n\necho ${colors[*]}\n\necho ${colors[@]}\n\necho ${colors[@]:0:2}\n\necho ${#colors[@]}\n\ncolors=(white "${colors[@]}" green black)\n\necho ${colors[@]}\n\necho ${#colors[@]}\n\nunset colors[2]\n\necho ${colors[@]}\n\necho ${#colors[@]}\n')])])]),s("h3",{attrs:{id:"运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运算符"}},[t._v("#")]),t._v(" 运算符")]),t._v(" "),s("p",[t._v("Shell 中有很多运算符，包括算数运算符、关系运算符、布尔运算符、字符串运算符和文件测试符。")]),t._v(" "),s("h4",{attrs:{id:"算数运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算数运算符"}},[t._v("#")]),t._v(" 算数运算符")]),t._v(" "),s("p",[t._v("原生 bash 不支持简单的数学运算，较为常用的是借助 "),s("code",[t._v("expr")]),t._v(" 来实现数学运算。")]),t._v(" "),s("p",[t._v("算数运算符列表，变量 a 是 10 变量 b 是 50")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("运算符")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("说明")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("举例")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("+")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("加法")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("expr ${a} + ${b}")]),t._v(" 结果为 60")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("-")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("减法")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("expr ${b} - ${a}")]),t._v(" 结果为 40")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("*")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("乘法")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("expr ${a} \\* ${b}")]),t._v(" 结果为 500")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("/")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("除法")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("expr ${b} / ${a}")]),t._v(" 结果为 5")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("%")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("取余")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("expr ${b} % ${a}")]),t._v(" 结果为 0")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("=")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("赋值")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("a=$b")]),t._v(" 就是正常的变量赋值")])])])]),t._v(" "),s("p",[t._v("示例代码如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('#!/bin/bash\n\na=10\nb=50\n\nvalue=`expr ${a} + ${b}`\necho "a + b = ${value}"\n\nvalue=`expr ${b} - ${a}`\necho "b - a = ${value}"\n\nvalue=`expr ${a} \\* ${b}`\necho "a * b = ${value}"\n\nvalue=`expr ${b} / ${a}`\necho "b / a = ${value}"\n\nvalue=`expr ${b} % ${a}`\necho "b % a = ${value}"\n\n#输出\n#a + b = 60\n#b - a = 40\n#a * b = 500\n#b / a = 5\n#b % a = 0\n')])])]),s("p",[s("strong",[t._v("注意：")])]),t._v(" "),s("ol",[s("li",[t._v("表达式和运算符之间要有空格，例如"),s("code",[t._v("1+1")]),t._v("是错误的，必须写成"),s("code",[t._v("1 + 1")])]),t._v(" "),s("li",[t._v("完整的表达式要用反引号 ` 包住")]),t._v(" "),s("li",[t._v("条件表达式要放在方括号之间，并且要有空格，例如 "),s("code",[t._v("[${a}==${b}]")]),t._v("是错误的，必须写成 "),s("code",[t._v("[ ${a} == ${b} ]")])])]),t._v(" "),s("h4",{attrs:{id:"条件运算符-关系运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条件运算符-关系运算符"}},[t._v("#")]),t._v(" 条件运算符（关系运算符）")]),t._v(" "),s("p",[t._v("关系运算符只支持数字，不支持字符串，除非字符串的值是数字。")]),t._v(" "),s("p",[t._v("关系运算符列表，变量 a 是 10 变量 b 是 50")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("运算符")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("说明")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("举例")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("-eq")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("检测两个数是否相等，相等返回 true")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("[ "),s("code",[t._v("${a} -eq ${b} ]")]),t._v(" 返回 false")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("-ne")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("检测两个数是否不相等，不相等返回 true")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("[ ${a} -ne ${b} ]")]),t._v(" 返回 true")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("-gt")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("检测左边的数是否大于右边的数，如果是，返回 true")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("[ ${a} -gt ${b} ]")]),t._v(" 返回 false")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v(">")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("跟 "),s("code",[t._v("-gt")]),t._v(" 一样，不过因为兼容性问题，可能要在 "),s("code",[t._v("[[]]")]),t._v(" 表达式中使用")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("[[ ${a} > ${b} ]]")]),t._v(" 返回 false")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("-lt")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("检测左边的数是否小于右边的数，如果是，返回 true")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("[ ${a} -lt ${b} ]")]),t._v(" 返回 true")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("<")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("跟 "),s("code",[t._v("-lt")]),t._v(" 一样，不过因为兼容性问题，可能要在 "),s("code",[t._v("[[]]")]),t._v(" 表达式中使用")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("[[ ${a} < ${b} ]]")]),t._v(" 返回 true")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("-ge")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("检测左边的数是否大于等于右边的数，如果是，返回 true")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("[ ${a} -ge ${b} ]")]),t._v(" 返回 false")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("-le")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("检测左边的数是否小于等于右边的数，如果是，返回 true")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("[ ${a} -le ${b} ]")]),t._v(" 返回 true")])])])]),t._v(" "),s("p",[t._v("实例代码如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('!/bin/bash\n\na=10\nb=50\n\nif [ ${a} -eq ${b} ]; then\n  echo "${a} -eq ${b} : a 等于 b"\nelse\n  echo "${a} -eq ${b} : a 不等于 b"\nfi\n#输出：10 -eq 50 : a 不等于 b\n\nif [ ${a} -ne ${b} ]; then\n  echo "${a} -ne ${b} : a 不等于 b"\nelse\n  echo "${a} -ne ${b} : a 等于 b"\nfi\n#输出：10 -ne 50 : a 不等于 b\n\nif [ ${a} -gt ${b} ]; then\n  echo "${a} -gt ${b} : a 大于 b"\nelse\n  echo "${a} -gt ${b} : a 小于 b"\nfi\n#输出：10 -gt 50 : a 小于 b\nif [[ ${a} > ${b} ]]; then\n  echo "${a} > ${b} : a 大于 b"\nelse\n  echo "${a} > ${b} : a 小于 b"\nfi\n#输出：10 > 50 : a 小于 b\n\nif [ ${a} -lt ${b} ]; then\n  echo "${a} -lt ${b} : a 小于 b"\nelse\n  echo "${a} -lt ${b} : a 大于 b"\nfi\n#输出：10 -lt 50 : a 小于 b\nif [[ ${a} < ${b} ]]; then\n  echo "${a} < ${b} : a 小于 b"\nelse\n  echo "${a} < ${b} : a 大于 b"\nfi\n#输出：10 < 50 : a 小于 b\n\nif [ ${a} -ge ${b} ]; then\n  echo "${a} -ge ${b} : a 大于等于 b"\nelse\n  echo "${a} -ge ${b} : a 小于等于 b"\nfi\n#输出：10 -ge 50 : a 小于等于 b\n\nif [ ${a} -le ${b} ]; then\n  echo "${a} -le ${b} : a 小于等于 b"\nelse\n  echo "${a} -le ${b} : a 大于等于 b"\nfi\n#输出：10 -le 50 : a 小于等于 b\n')])])]),s("h4",{attrs:{id:"条件运算符-布尔运算符、逻辑运算符、字符串运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条件运算符-布尔运算符、逻辑运算符、字符串运算符"}},[t._v("#")]),t._v(" 条件运算符（布尔运算符、逻辑运算符、字符串运算符）")]),t._v(" "),s("p",[t._v('条件运算符列表，变量 a 是 10， 变量 b 是 50，变量 x 是 "abc"，变量 y 是 "efg"')]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("运算符")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("说明")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("举例")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("!")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("非运算")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("[ ! false ]")]),t._v(" 返回 true")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("-o")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("或运算")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("[ ${a} -eq 10 -o ${b} -eq 100 ] 返回 true")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("||")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("跟 "),s("code",[t._v("-o")]),t._v(" 类似，逻辑的 OR，不过需要使用 "),s("code",[t._v("[[]]")]),t._v(" 表达式")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("[[ ${a} -eq 10 || ${b} -eq 100 ]]")]),t._v(" 返回 true")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("-a")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("与运算")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("[ ${a} -eq 10 -a ${b} -eq 50 ]")]),t._v(" 返回 true")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("&&")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("跟 "),s("code",[t._v("-a")]),t._v(" 类似，逻辑的 AND，不过需要使用 "),s("code",[t._v("[[]]")]),t._v(" 表达式")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("[[ ${a} -eq 10 && ${b} -eq 50 ]]")]),t._v(" 返回 true")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("=")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("检测两个数字或字符串是否相等，相等返回 true")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("[ ${a} = ${b} ]")]),t._v(" 返回 false")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("!=")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("检测两个数字或字符串是否相等，不相等返回 true")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("[ ${a} != ${b} ]")]),t._v("返回 true")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("==")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("相等。比较两个数字或字符串，如果相等返回 true（不推荐使用，有兼容性问题）")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("[ ${a} == ${b} ]")]),t._v(" 返回 false")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("-z")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("检测字符串长度是否为 0，为 0 返回 true")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("[ -z ${x} ]")]),t._v(" 返回 false")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("-n")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("检测字符串长度是否为 0，不为 0 返回 true")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("[ -n ${x} ]")]),t._v(" 返回 true")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("var")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("检测变量是否存在或不为空，存在或不为空返回 true")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("[ $s ]")]),t._v(" 返回 false")])])])]),t._v(" "),s("p",[s("img",{attrs:{src:a(485),alt:""}})]),t._v(" "),s("p",[t._v("代码示例如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('#!/bin/bash\n\na=10\nb=50\nx="abc"\ny="edf"\n\n#单 []\nif [ ${a} -eq 10 -a ${b} -eq 50 ]; then\n  echo "${a} -eq 10 -a ${b} -eq 50 : 返回 true"\nelse\n  echo "${a} -eq 10 -a ${b} -eq 50 : 返回 false"\nfi\n#输出：10 -eq 10 -a 50 -eq 50 : 返回 true\n\n#双 []\nif [[ ${a} -eq 10 && ${b} -eq 50 ]]; then\n  echo "${a} -eq 10 && ${b} -eq 50 : 返回 true"\nelse\n  echo "${a} -eq 10 && ${b} -eq 50 : 返回 false"\nfi\n#输出：10 -eq 10 && 50 -eq 50 : 返回 true\n\nif [ ${a} = ${b} ]\nthen\n  echo "a 和 b 相等"\nfi\n\nif [ ${a} != ${b} ]\nthen\n  echo "a 和 b 不相等"\nfi\n#a 和 b 不相等\n\nif [ -z ${x} ]; then\n  echo "-z ${x}：字符串长度为0 "\nelse\n  echo "-z ${x}：字符串长度不为0 "\nfi\n#输出：-z abc：字符串长度不为0\n\nif [ -n ${y} ]; then\n  echo "-z ${y}：字符串长度不为0 "\nelse\n  echo "-z ${y}：字符串长度为0 "\nfi\n#输出：-z edf：字符串长度不为0\n\nif [ $x ];then\n  echo "${x}：不是空字符串"\nelse\n  echo "${x}：是空字符串"\nfi\n#输出：abc：不是空字符串\n\nif [ $s ];then\n  echo \'${s}：存在\'\nelse\n  echo \'${s}：不存在\'\nfi\n#输出：${s}：不存在\n\n')])])]),s("h4",{attrs:{id:"文件目录判断运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文件目录判断运算符"}},[t._v("#")]),t._v(" 文件目录判断运算符")]),t._v(" "),s("p",[t._v("文件目录判断运算符列表")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("运算符")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("-f filename")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("判断文件是否存在，当 filename 存在且是正规文件时（既不是目录，也不是设备文件）返回 true")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("-d pathname")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("判断目录是否存在，当 pathname 存在且是目录时返回 true")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("-e pathname")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("判断【某个东西】是否存在，当 pathname 指定的文件或目录存在时返回 true")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("-a pathname")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("同上，已经过时，而且使用的时候还有另外一个与的逻辑，容易混淆")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("-s filename")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("判断是否是一个非空文件，当 filename 存在并且文件大小大于 0 时返回 true")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("-r pathname")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("判断是否可读，当 pathname 指定的文件或目录存在并且可读时返回 true")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("-x pathname")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("判断是否可执行，当 pathname 指定的文件或目录存在并且可执行时返回 true")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("-w pathname")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("判断是否可写，当 pathname 指定的文件或目录存在并且可写时返回 true")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("-b filename")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("判断是否是一个块文件，当 filename 存在且是块文件时返回 true")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("-c filename")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("判断是否是一个字符文件，当 filename 存在且是字符文件时返回 true")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("-L filename")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("判断是否是一个符号链接，当 filename 存在且是符号链接时返回 true")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("-u filename")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("判断文件是否设置 SUID 位，SUID 是 Set User ID")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("-g filename")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("判断文件是否设置 SGID 位，SGID 是 Set Group ID")])])])]),t._v(" "),s("p",[s("img",{attrs:{src:a(486),alt:""}})]),t._v(" "),s("p",[t._v("示例代码如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('#!/bin/bash\n\nfile="/etc/hosts"\n\nif [ -f ${file} ]; then\n  echo "${file}：是一个普通文件"\nelse\n  echo "${file}：不是一个普通文件"\nfi\n#输出：/etc/hosts：是一个普通文件\n\nif [ -d ${file} ]; then\n  echo "${file}：是个目录"\nelse\n  echo "${file}：不是目录"\nfi\n#输出：/etc/hosts：不是目录\n\nif [ -e ${file} ]; then\n  echo "${file}：文件存在"\nelse\n  echo "${file}：文件不存在"\nfi\n#输出：/etc/hosts：文件存在\n\nif [ -s ${file} ]; then\n  echo "${file}：文件不为空"\nelse\n  echo "${file}：文件为空"\nfi\n#输出：/etc/hosts：文件不为空\n\nif [ -r ${file} ]; then\n  echo "${file}：文件可读"\nelse\n  echo "${file}：文件不可读"\nfi\n#输出：/etc/hosts：文件可读\n')])])]),s("h3",{attrs:{id:"条件语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条件语句"}},[t._v("#")]),t._v(" 条件语句")]),t._v(" "),s("p",[t._v("在条件语句中，由 "),s("code",[t._v("[]")]),t._v(" 或 "),s("code",[t._v("[[]]")]),t._v(" 包起来的表达式被称为"),s("strong",[t._v("检测命令")]),t._v("或"),s("strong",[t._v("基元")]),t._v("。")]),t._v(" "),s("h4",{attrs:{id:"if-fi-语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#if-fi-语句"}},[t._v("#")]),t._v(" if...fi 语句")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("语法：\n\nif [ expression ]\nthen\n  expression 是 true ，这里会被执行\nfi\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('#!/bin/bash\n\nif [ 1 = 1 ]\nthen\n  echo "相等"\nfi\n#输出：相等\n\n#也可以写成一行\nif [ "a" = "a" ]; then echo "相等"; fi\n#输出：相等\n')])])]),s("p",[t._v("if...else 经常跟 "),s("code",[t._v("test")]),t._v(" 命令结合使用，"),s("code",[t._v("test")]),t._v("命令用于检查某个条件是否成立，与方括号"),s("code",[t._v("[]")]),t._v("类似（它们两个在/usr/bin 中是用软连接指向的）。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('#!/bin/bash\n\na=10\nb=50\n\nif test ${a} -eq ${b}\nthen\n  echo "a 等于 b"\nelse\n  echo "a 不等于 b"\nfi\n#输出：a 不等于 b\n')])])]),s("h4",{attrs:{id:"if-else-fi"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#if-else-fi"}},[t._v("#")]),t._v(" if...else...fi")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("语法：\n\nif [ expression ]\nthen\n  expression 是 true ，这里会被执行\nelse\n  expression 是 false , 这里会被执行\nfi\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('#!/bin/bash\n\nif [ 1 = 2 ]\nthen\n  echo "相等"\nelse\n  echo "不相等"\nfi\n#输出：不相等\n')])])]),s("h4",{attrs:{id:"if-elif-fi"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#if-elif-fi"}},[t._v("#")]),t._v(" if...elif...fi")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("语法：\n\nif [ expression1 ]\nthen\n  expression 是 true ，这里会被执行\nelif [ expression2 ]\nthen\n  expression1 是 true ，这里会被执行\nelse\n  上面的 expression 都是 false , 这里会被执行\nfi\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('#!/bin/bash\n\na=10\nb=50\n\nif [ ${a} -eq ${b} ]\nthen\n  echo "a 等于 b"\nelif [ ${a} -gt ${b} ]\nthen\n  echo "a 大于 b"\nelse\n  echo "a 小于 b"\nfi\n#输出：a 小于 b\n')])])]),s("h4",{attrs:{id:"case-esac"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#case-esac"}},[t._v("#")]),t._v(" case...esac")]),t._v(" "),s("p",[t._v("case...esac 与其他语言中的 switch...case 类似，是一种多分支选择结构。")]),t._v(" "),s("p",[t._v("case 语句匹配一个值或一个模式，如果匹配成功，执行想匹配的命令。适用于需要面对很多情况，分别要采取不同的措施的情况。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("case 值 in\n模式1)\n  command1\n  command2\n  command3\n  ;;\n模式2)\n  command1\n  command2\n  command3\n  ;;\n*)\n  command1\n  command2\n  command3\n  ;;\nesac\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('#!/bin/bash\n\necho "输入1-4的一个数字"\necho "你输入的数字是："\n\nread number\n\ncase $number in\n  1)\n  echo "你输入了1"\n  ;;\n  2)\n  echo "你输入了2"\n  ;;\n  3)\n  echo "你输入了3"\n  ;;\n  4)\n  echo "你输入了4"\n  ;;\n  *)\n  echo "你输入的不是1-4的数字"\n  ;;\nesac\n\n#运行后可以自己输入数字体验\n')])])]),s("p",[s("strong",[t._v("注意：可以在 "),s("code",[t._v(")")]),t._v(" 前用 "),s("code",[t._v("|")]),t._v(" 分割多个模式。")])]),t._v(" "),s("h3",{attrs:{id:"循环语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#循环语句"}},[t._v("#")]),t._v(" 循环语句")]),t._v(" "),s("p",[t._v("bash 中有四种循环：for , while , until , select")]),t._v(" "),s("h4",{attrs:{id:"for-循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#for-循环"}},[t._v("#")]),t._v(" for 循环")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("语法：\n\nfor 变量 in 列表\ndo\n  command1\n  command2\n  ...\n  commandN\ndone\n")])])]),s("p",[t._v("语法中的列表是一组值（数字、字符串）组成的序列，每个值通过空格分隔。这些值还可以是通配符或大括号扩展，例如 "),s("code",[t._v("*.sh")]),t._v(" 和 "),s("code",[t._v("{1..5}")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("#!/bin/bash\n\nfor i in 1 2 3 4 5\ndo\n  echo $i\ndone\n\n# 写在一行\nfor i in {1..5}; do echo $i ; done\n")])])]),s("h4",{attrs:{id:"while-循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#while-循环"}},[t._v("#")]),t._v(" while 循环")]),t._v(" "),s("p",[t._v("while 循环会不断的检测一个条件，只要这个条件返回 true，就执行一段命令。被检测的条件跟 if 中的一样。while 也可用于从输入文件中读取数据。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("语法：\n\nwhile [[ condition ]]\ndo\n  如果 condition 是 true ，这里的命令会执行\ndone\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("#!/bin/bash\n\nx=0\ny=10\n\nwhile [ ${x} -lt 5 ]\ndo\n  echo $x\n  x=`expr ${x} + 1`\ndone\n\n# do 也跟条件写在一行，前面需要加分号 ;\nwhile [ ${y} -gt 5 ]; do echo $y; y=`expr ${y} - 1`; done\n")])])]),s("h4",{attrs:{id:"until-循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#until-循环"}},[t._v("#")]),t._v(" until 循环")]),t._v(" "),s("p",[t._v("until 循环是检测一个条件，只要条件是 false 就会一直执行循环，直到条件条件为 true 时停止。它跟 while 正好相反。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("#!/bin/bash\n\nx=0\n\nuntil [ ${x} -eq 5 ]; do\n  echo ${x}\n  x=`expr ${x} + 1`\ndone\n")])])]),s("h4",{attrs:{id:"select-循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#select-循环"}},[t._v("#")]),t._v(" select 循环")]),t._v(" "),s("p",[t._v("select 循环的语法跟 for 循环基本一致。它帮助我们组织一个用户菜单。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("语法：\n\nselect 变量 in 列表\ndo\n  执行相应的命令\ndone\n")])])]),s("p",[t._v("select 会打印列表的值以及他们的序列号到屏幕上，之后会提示用户选择，用户通常看到的提示是 "),s("code",[t._v("$?")]),t._v(" ，用户输入相应的信号，选择的结果会被保存到变量中。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('#!/bin/bash\n\n#PS3——shell脚本中使用select时的提示符\nPS3="选择你要安装的包管理工具，输入序号："\n\nselect ITEM in bower npm gem pip\ndo\n  echo "输入的包名称是：\\c" && read PACKAGE\n  case ${ITEM} in\n    bower) echo "模拟 bower install ${PACKAGE}" ;;\n    npm) echo "模拟 npm install ${PACKAGE}" ;;\n    gem) echo "模拟 gem install ${PACKAGE}" ;;\n    pip) echo "模拟 pip install ${PACKAGE}" ;;\n    *) echo "包管理工具选择错误" ;;\n  esac\n  break #跳出循环\ndone\n')])])]),s("h4",{attrs:{id:"break-命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#break-命令"}},[t._v("#")]),t._v(" break 命令")]),t._v(" "),s("p",[t._v("break 命令允许跳出所有循环（终止执行后面的所有循环）。在嵌套循环中 break 命令后面还可以跟一个整数，表示跳出几层循环。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('#!/bin/bash\n\n# 当 x 等于 2，并且 y 等于 0，就跳出循环\nfor x in 1 2 3\ndo\n  for y in 0 5\n  do\n   if [ ${x} -eq 2 -a ${y} -eq 0 ]\n   then\n     echo "x 等于 ${x}，y 等于 ${y}"\n     break 2\n   else\n    echo "${x} ${y}"\n   fi\n  done\ndone\n')])])]),s("h4",{attrs:{id:"continue-命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#continue-命令"}},[t._v("#")]),t._v(" continue 命令")]),t._v(" "),s("p",[t._v("continue 命令跟 break 命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环。同样，continue 后面也可以跟一个数字，表示跳出第几层循环。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('#!/bin/bash\n\n# 当 x 等于 2，并且 y 等于 0，就跳出循环\nfor x in 1 2 3\ndo\n  for y in 0 5\n  do\n   if [ ${x} -eq 2 -a ${y} -eq 0 ]\n   then\n     continue 2\n   else\n    echo "${x} ${y}"\n   fi\n  done\ndone\n')])])]),s("h3",{attrs:{id:"函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[t._v("#")]),t._v(" 函数")]),t._v(" "),s("ul",[s("li",[t._v("shell 函数必须先定义后使用，调用函数仅使用其函数名即可。")]),t._v(" "),s("li",[t._v("函数定义时，"),s("code",[t._v("function")]),t._v("关键字可有可无")]),t._v(" "),s("li",[t._v("函数返回值：可以显式的使用 return 语句，返回值类型只能为整数（0-255）。如果不加 return 语句，会默认将最后一条命令运行结果作为返回值。")]),t._v(" "),s("li",[t._v("函数返回值在调用该函数后，通过 "),s("code",[t._v("$?")]),t._v(" 获得。")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("语法：中括号内表示可选\n\n[function] function_name () {\n  在这里执行命令\n  [return value]\n}\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('#!/bin/bash\n\nhello () {\n  echo "hello"\n  world #函数嵌套\n}\n\nworld () {\n  echo "world"\n}\n\nhello\n')])])]),s("h4",{attrs:{id:"参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参数"}},[t._v("#")]),t._v(" 参数")]),t._v(" "),s("p",[t._v("位置参数是在调用一个函数并传给它参数时创建的变量，见上文 Shell 特殊变量。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('#!/bin/bash\n\nfunWithParam () {\n  echo "第1个参数：$1"\n  echo "第2个参数：$2"\n  echo "第3个参数：$3"\n  echo "错误的获取第10个参数：$10"\n  # $10 不能获取第10个参数，需要用 ${10}，当 n>=10 时，需要使用 ${n} 获取参数。(其中有兼容性，某些Shell解释器两种都能获取到)\n  echo "正确的获取第10个参数：${10}"\n  echo "获取第11个参数：${11}"\n  echo "获取传参的个数：$#"\n  echo "获取所有的传参：$*"\n  echo "当前函数的名称是：$FUNCNAME"\n}\n\nfunWithParam 1 2 3 4 5 6 7 8 9 34 73\n')])])]),s("h3",{attrs:{id:"输入输出重定向"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#输入输出重定向"}},[t._v("#")]),t._v(" 输入输出重定向")]),t._v(" "),s("p",[t._v("Unix 命令默认从标准输入设备（stdin）获取输入，将结果输出到标准输出设备（stdout）显示。一般情况下，标准输入设备就是键盘，标准输出设备就是显示器。")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://images.cnblogs.com/cnblogs_com/chengmo/WindowsLiveWriter/linuxshell_EB66/image_2.png",alt:""}})]),t._v(" "),s("h4",{attrs:{id:"输入输出流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#输入输出流"}},[t._v("#")]),t._v(" 输入输出流")]),t._v(" "),s("p",[t._v("shell 接收输入，并以字符序列或字符流的形式产生输出。这些流能被重定向到文件或另一个流中。")]),t._v(" "),s("p",[t._v("一般情况下，每个 Unix/Linux 命令都会打开三个文件：标准输入文件、标准输出文件、标准错误文件，三个文件描述符：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("代码")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("描述符")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("0")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("stdin")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("标准输入")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("1")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("stdout")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("标准输出")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("2")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("stderr")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("标准错误输出")])])])]),t._v(" "),s("h4",{attrs:{id:"重定向"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重定向"}},[t._v("#")]),t._v(" 重定向")]),t._v(" "),s("p",[t._v("重定向让我们可以控制一个命令的输入来自哪里，输出结果到什么地方。")]),t._v(" "),s("p",[t._v("输出重定向：命令的输出不仅可以是显示器，还可以很容的转义到文件，这被称为输出重定向。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("语法：\n\ncommand > file  此语法会覆盖文件内容\n\ncommand >> file 如果不希望文件被覆盖，可以使用 >> 追加到文件末尾\n")])])]),s("p",[t._v("输入重定向：使 Unix 命令也可以从文件获取输入，这样本来要从键盘获取输入的命令会转移到文件读取内容。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("语法：\ncommand < file\n")])])]),s("p",[t._v("有一个文件是 test.sh，用两种方式输出文件的行数")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("wc -l ./test.sh\n#输出：14 ./test.sh\n\nwc -l < ./test.sh\n#输出：14  没有文件名\n")])])]),s("p",[t._v("第一个例子会输出文件名，第二个不会，因为它仅仅知道从标准输入读取的内容。")]),t._v(" "),s("p",[t._v("以下操作符在控制流的重定向时会被用到：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("操作符")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v(">")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("重定向输出")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v(">>")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("将输出已追加的方式重定向")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v(">&")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("将两个输出文件合并")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("2>")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("错误重定向")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("&>")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("输出重定向与错误重定向同时实现")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("<&")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("将两个输入文件合并")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("<")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("重定向输入")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("<<")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Here 文档语法（见下文扩展），将开始标记 tag 和结束标记 tag 之间的内容作为输入")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("<<<")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Here 字符串")])])])]),t._v(" "),s("p",[t._v("如果希望 stderr 重定向到 file，可以这样写：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("command 2 > file\n")])])]),s("p",[t._v("如果希望将 stdout 和 stderr 合并后重定向的 file，可以这样写：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("#&[n] 代表是已经存在的文件描述符，&1 代表输出 &2代表错误输出 &-代表关闭与它绑定的描述符\ncommand > file 2>&1\n")])])]),s("p",[t._v("如果希望 stdin 和 stdout 都重定向，可以这样写：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("command < file1 > file2\n\n#例如：\ncat < test.sh  > catfile\n\n#提一下 << 这个连续两个小符号， 他代表的是『结束的输入字符』的意思。这样当空行输入eof字符，输入自动结束，不用ctrl+D\n#例如：\ncat <<eof >catfile\n")])])]),s("p",[s("strong",[t._v("如果希望执行某个命令，但又不希望在屏幕上显示输出结果，那么可以将输出重定向到 /dev/null。")])]),t._v(" "),s("p",[t._v('/dev/null 是一个特殊的文件，写入到它的内容都会被丢弃，如果尝试从该文件读取内容，那么什么也读不到。但是 /dev/null 文件非常有用，将命令的输出重定向到它，会起到"禁止输出"的效果。')]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("#test1.sh 没有的情况下，将错误输出信息关闭掉\nls test.sh test1.sh 2>/dev/null\n\nls test.sh test1.sh 2>&-\n\n#关闭所有输出\nls test.sh test1.sh  1>&- 2>&-\nls test.sh test1.sh  2>/dev/null 1>/dev/null\n\n#将错误输出2 绑定给 正确输出 1，然后将 正确输出 发送给 /dev/null设备  这种常用\nls test.sh test1.sh >/dev/null 2>&1\n#& 代表标准输出 ，错误输出 将所有标准输出与错误输出 输入到/dev/null文件\nls test.sh test1.sh &>/dev/null\n")])])]),s("h3",{attrs:{id:"加载外部脚本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#加载外部脚本"}},[t._v("#")]),t._v(" 加载外部脚本")]),t._v(" "),s("p",[t._v("像其他语言一样，Shell 也可以加载外部脚本，将外部脚本的内容合并到当前脚本。shell 中加载外部脚本有两种写法。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("第一种：. filename\n\n第二种：source filename\n")])])]),s("p",[t._v("两种方式效果相同，简单起见，一般使用点号（.），但是！"),s("strong",[t._v("注意点号（.）和文件名中间有一个空格")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("#!/bin/bash\n\n. ./pre_test.sh\n\necho $a\n# 输出：100\n")])])]),s("h3",{attrs:{id:"debug"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#debug"}},[t._v("#")]),t._v(" Debug")]),t._v(" "),s("h4",{attrs:{id:"全局-debug"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#全局-debug"}},[t._v("#")]),t._v(" 全局 Debug")]),t._v(" "),s("p",[t._v("shell 提供了用于 debug 脚本的工具。如果想采用 debug 模式运行某脚本，可以在其 shebang 中使用一个特殊的选项。（有些 shell 不支持）")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("#!/bin/bash [options]\n")])])]),s("p",[t._v("或者在执行 Bash 脚本的时候，从命令行传入这些参数")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("bash -euxo pipefail test.sh\n")])])]),s("h4",{attrs:{id:"局部-debug"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#局部-debug"}},[t._v("#")]),t._v(" 局部 Debug")]),t._v(" "),s("p",[t._v("有时我们只需要 debug 脚本的一部分。这种情况下，使用 set 命令会很方便。这个命令可以启用或禁用选项。 使用 "),s("code",[t._v("-")]),t._v(" 启用选项，使用 "),s("code",[t._v("+")]),t._v(" 禁用选项。")]),t._v(" "),s("p",[t._v("1、用来在运行结果之前，先输出执行的那一行命令")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("set -x\n#或者\nset -o xtrace\n")])])]),s("p",[t._v("2、执行脚本时，如果遇到不存在的变量会报错，并停止执行。（默认是忽略报错的）")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("set  -u\n#或者\nset  -o nounset\n")])])]),s("p",[s("strong",[t._v("顺便说一下，如果命令行下不带任何参数，直接运行"),s("code",[t._v("set")]),t._v("，会显示所有的环境变量和 Shell 函数。")])]),t._v(" "),s("p",[t._v("3、执行脚本时，发生错误就终止执行。（默认是继续执行的）")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("set  -e\n#或者\nset -o errexit\n\n#可以用下面的方法\ncommand || exit 1\n#或者\ncommand1 && command2\n")])])]),s("p",[s("code",[t._v("set -e")]),t._v(" 根据返回值来判断，一个命令是否运行失败。但是，某些命令的非零返回值可能不表示失败，或者开发者希望在命令失败的情况下，脚本继续执行下去。这时可以暂时关闭 "),s("code",[t._v("set +e")]),t._v("，该命令执行结束后，再重新打开 "),s("code",[t._v("set -e")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("set +e\ncommand1\ncommand2\nset -e\n\n#也可以用下面的方法\ncommand || true\n")])])]),s("p",[t._v("4、管道命令执行失败，脚本终止执行")]),t._v(" "),s("p",[t._v("管道命令就是多个子命令通过管道运算符（"),s("code",[t._v("|")]),t._v("）组合成为一个大的命令。Bash 会把最后一个子命令的返回值，作为整个命令的返回值。最后一个子命令不失败，管道命令就总是会执行成功的，因此 "),s("code",[t._v("set -e")]),t._v(" 会失效，后面的命令会继续执行。")]),t._v(" "),s("p",[s("code",[t._v("set -o pipefail")]),t._v(" 用来解决这个情况，搭配 "),s("code",[t._v("-e")]),t._v(" 只要一个子命令失败，整个管道命令就会失败，脚本就会终止执行。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("set -eo pipefail\n")])])]),s("p",[t._v("上面的命令可以放在一起使用：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("set -euxo pipefail\n#或者\nset -eux\nset -o pipefail\n")])])]),s("h2",{attrs:{id:"扩展"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#扩展"}},[t._v("#")]),t._v(" 扩展")]),t._v(" "),s("h3",{attrs:{id:"脚本解释器在环境变量中指定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#脚本解释器在环境变量中指定"}},[t._v("#")]),t._v(" 脚本解释器在环境变量中指定")]),t._v(" "),s("p",[t._v("除了比较常见的用路径指定脚本解释器的方式，还有一种是指定环境变量中的脚本解释器。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("指定脚本解释器的路径\n#!/bin/bash`\n\n指定环境变量中的脚本解释器\n#!/usr/bin/env bash\n")])])]),s("p",[t._v("这样做的好处是，系统会自动在 "),s("code",[t._v("PATH")]),t._v(" 环境变量中查找指定的程序（如例子中的 bash）。因为程序的路径是不确定的，比如安装完新版本的 bash 后，我们有可能会把这个新的路径添加到"),s("code",[t._v("PATH")]),t._v("中，来“隐藏”老版本的 bash。所以操作系统的"),s("code",[t._v("PATH")]),t._v("变量有可能被配置为指向程序的另一个版本，如果还是直接用 "),s("code",[t._v("#!/bin/bash")]),t._v("，那么系统还是会选择老版本的 bash 来执行脚本，如果用"),s("code",[t._v("#!/usr/bin/env bash")]),t._v("，就会使用新版本了。")]),t._v(" "),s("h3",{attrs:{id:"环境变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#环境变量"}},[t._v("#")]),t._v(" 环境变量")]),t._v(" "),s("p",[t._v("所有的程序，包括 Shell 启动的程序运行时都可以访问的变量就是环境变量。在 shell 脚本中使用 "),s("code",[t._v("export")]),t._v(" 可以定义环境变量，但是只在当前运行的 shell 进程中有效，结束进程就没了。如果想持久化，需要将环境变量定义在一些列配置文件中。")]),t._v(" "),s("p",[t._v("配置文件的加载顺序和 shell 进程是否运行在 Interactive 和 Login 模式有关。")]),t._v(" "),s("h4",{attrs:{id:"交互和非交互模式-interactive-non-interactive"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#交互和非交互模式-interactive-non-interactive"}},[t._v("#")]),t._v(" 交互和非交互模式（Interactive & Non-Interactive）")]),t._v(" "),s("ul",[s("li",[t._v("Interactive 模式：通常是指读写数据都是从用户的命令行终端（terminal），用户输入命令，并在回车后立即执行的 shell。")]),t._v(" "),s("li",[t._v("Non-Interactive 模式：通常是指执行一个 shell 脚本，或 "),s("code",[t._v("bash -c")]),t._v(" 执行命令")])]),t._v(" "),s("p",[t._v("检测当前 shell 运行的环境是不是 Interactive 模式")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('[[ $- == *i* ]] && echo "Interactive" || echo "Non-interactive"\n')])])]),s("h4",{attrs:{id:"登录和非登录模式-login-non-login"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#登录和非登录模式-login-non-login"}},[t._v("#")]),t._v(" 登录和非登录模式（Login & Non-Login）")]),t._v(" "),s("ul",[s("li",[t._v("Login 模式：应用在终端登陆时，ssh 连接时，"),s("code",[t._v("su --login <username>")]),t._v(" 切换用户时，指的是用户成功登录后开启的 Shell 进程，此时会读取 "),s("code",[t._v("/etc/passwd")]),t._v(" 下用户所属的 shell 执行。")]),t._v(" "),s("li",[t._v("Non-Login 模式：应用在直接运行 bash 时，su "),s("code",[t._v("<username>")]),t._v(" 切换用户时（前面没有加 --login）。指的是非登录用户状态下开启的 shell 进程。")])]),t._v(" "),s("p",[t._v("检测当前 shell 运行的环境是不是 Login 模式")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('shopt -q login_shell && echo "Login shell" || echo "Not login shell"\n\n#如果是zsh，没有shopt命令\n[[ -o login ]] && echo "Login shell" || echo "Not login shell"\n')])])]),s("p",[t._v("进入 bash 交互模式时也可以用 "),s("code",[t._v("--login")]),t._v(" 参数来决定是否是登录模式：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('$> bash\n$> shopt -q login_shell && echo "Login shell" || echo "Not login shell"\nNot login shell\n$> exit\n$> bash --login\n$> shopt -q login_shell && echo "Login shell" || echo "Not login shell"\nLogin shell\n$> exit\n')])])]),s("p",[t._v("Login 模式模式下可以用 logout 和 exit 退出，Non-Login 模式下只能用 exit 退出。")]),t._v(" "),s("h4",{attrs:{id:"配置文件-启动文件-加载顺序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置文件-启动文件-加载顺序"}},[t._v("#")]),t._v(" 配置文件（启动文件）加载顺序")]),t._v(" "),s("p",[t._v("bash 支持的配置文件有 /etc/profile、~/.bash.rc 等。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(487),alt:"配置文件加载顺序"}})]),t._v(" "),s("p",[t._v("如上图加载顺序所示")]),t._v(" "),s("ul",[s("li",[t._v("Interactive&Login 模式：/etc/profile —>( ~/.bash_profile, ~/.bash_login, ~/.profile)其中之一 —>~/.bash_loginout(退出 shell 时调用)")]),t._v(" "),s("li",[t._v("Interactive&Non-Login 模式：/etc/bash.bashrc —>~/.bashrc")]),t._v(" "),s("li",[t._v("Non-Interactive 模式：通常就是执行脚本（script）的时候，此时配置项是从环境变量中读取和执行的，也就是 "),s("code",[t._v("env")]),t._v(" 或者 "),s("code",[t._v("printenv")]),t._v(" 命令输出的配置项。")])]),t._v(" "),s("p",[s("strong",[t._v("现在的系统一般都没有 ~/.bash_profile 文件了，只保留 ~/.bashrc 文件,所有的系统里，~/.bash_profile 都会有这样的逻辑，避免登陆时 ~/.bashrc 被跳过的情况：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('# login shell will execute this\nif [ -n "$BASH_VERSION" ]; then\n\t# include .bashrc if it exists\n\tif [ -f "$HOME/.bashrc" ]; then\n\t\t. "$HOME/.bashrc"\n\tfi\nfi\n')])])]),s("p",[t._v("在发行版的 Linux 系统中，Interactive&Login 模式下的 ~/.bash_profile, ~/.bash_login， ~/.profile 并不一定是三选一，看一下这三个脚本的内容会发现他们会继续调用下一个它想调用的配置文件，这样就可以避免配置项可能需要在不同的配置文件多次配置。如 centos7.2 中 ~/.bash_profile 文件中实际调用了 ~/.bashrc 文件。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# .bash_profile\n\n# Get the aliases and functions\nif [ -f ~/.bashrc ]; then\n\t. ~/.bashrc\nfi\n\n# User specific environment and startup programs\n\nPATH=$PATH:$HOME/.local/bin:$HOME/bin\n\nexport PATH\n")])])]),s("p",[s("img",{attrs:{src:a(488),alt:""}})]),t._v(" "),s("p",[t._v("如上图所示，开启一个 Shell 进程时，有一些参数的值也会影响到配置文件的加载。如"),s("code",[t._v("--rcfile")]),t._v("，"),s("code",[t._v("--norc")]),t._v(" 等。")]),t._v(" "),s("p",[t._v("常用的 shell 环境变量：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("变量名")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("PATH")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("命令搜索路径，以冒号为分隔符")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("HOME")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("用户主目录的路径名，是 cd 命令的默认参数")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("SHELL")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("当前运行的 Shell 的全路径名")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("TERM")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("终端类型")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("LOGNAME")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("当前的登录名")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("PWD")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("当前工作目录")])])])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("#输出个别的环境变量值的两种方式\n\nprintenv HOME\n\necho $HOME\n")])])]),s("p",[t._v("全局变量是对所有用户都需要使用的变量，可以将新的变量或修改过的变量设置放在"),s("code",[t._v("/etc/profile")]),t._v("文件中，但升级了发行版该文件也会更新，所以这点要注意 （对所有用户）。")]),t._v(" "),s("p",[t._v("最好是在"),s("code",[t._v("/etc/profile.d")]),t._v("目录中创建一个以"),s("code",[t._v(".sh")]),t._v("结尾的文件，把所有新的变量或修改过的变量全部放在此文件中（对所有用户）。")]),t._v(" "),s("p",[t._v("对于存储个人用户永久性 bash shell 变量的地方是"),s("code",[t._v("$HOME/.bashrc")]),t._v("文件。这一点适用于所有类型的 Shell 进程（仅对当前用户）。")]),t._v(" "),s("h3",{attrs:{id:"和-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#和-的区别"}},[t._v("#")]),t._v(" "),s("code",[t._v("$*")]),t._v(" 和 "),s("code",[t._v("$@")]),t._v(" 的区别")]),t._v(" "),s("p",[s("code",[t._v("$*")]),t._v(" 和 "),s("code",[t._v("$@")]),t._v(" 都表示传递给函数或脚本的所有参数，不被双引号"),s("code",[t._v('""')]),t._v("包含时，都是以"),s("code",[t._v('"$1" "$2" ... "\\$n"')]),t._v("形式把所有参数一个一个单独输出。")]),t._v(" "),s("p",[t._v("但是当他们被双引号包含是，"),s("code",[t._v('"$*"')]),t._v(" 会将所有的参数作为一个整体，以"),s("code",[t._v('"$1 $2 ... $n"')]),t._v("的形式输出所有参数。"),s("code",[t._v('"$@"')]),t._v(" 还是跟之前一样，把所有参数分开，一个一个的输出。")]),t._v(" "),s("p",[t._v("例如："),s("code",[t._v("./test.sh a b c d")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('\n#/bin/bash\n\necho "打印出没有引号的 $*"\nfor var in $*\ndo\necho "$var"\ndone\n#输出：打印出没有引号的 $*\n# a\n# b\n# c\n# d\n\necho "打印出有引号的 \\"$*\\""\nfor var in "$*"\ndo\necho "$var"\ndone\n#输出：打印出有引号的 "$*"\n# a b c d\n\n\necho "打印出没有引号的 $@"\nfor var in $@\ndo\necho "$var"\ndone\n#输出：打印出没有引号的 $@\n# a\n# b\n# c\n# d\n\necho "打印出有引号的 \\"$@\\""\nfor var in "$@"\ndo\necho "$var"\ndone\n#输出：打印出有引号的 "$@"\n# a\n# b\n# c\n# d\n')])])]),s("h3",{attrs:{id:"shell-中的替换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#shell-中的替换"}},[t._v("#")]),t._v(" Shell 中的替换")]),t._v(" "),s("h4",{attrs:{id:"转义字符替换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#转义字符替换"}},[t._v("#")]),t._v(" 转义字符替换")]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("echo")]),t._v(" 命令时，使用 "),s("code",[t._v("-e")]),t._v(" 可以对转义字符进行替换。使用 "),s("code",[t._v("-E")]),t._v(" 可以禁止转义，默认也是不转义的；使用 "),s("code",[t._v("-n")]),t._v(" 选项可以禁止插入换行符。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("转义字符")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("\\b")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("退格（删除键）")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("\\f")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("换页（FF），将当前位置移到下页开头")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("\\n")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("换行")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("\\c")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("显示不换行")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("\\r")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("回车")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("\\t")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("水平制表符（tab 键）")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("\\v")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("垂直制表符")])])])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('\n#/bin/bash\n\na=1\nb=2\n\necho -e "${a}\\n${b}" #输出：1\n\n# 2\n\n')])])]),s("h4",{attrs:{id:"命令替换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命令替换"}},[t._v("#")]),t._v(" 命令替换")]),t._v(" "),s("p",[t._v("命令替换是指 Shell 可以先执行命令，将输出结果暂时保存，在适当的地方输出。")]),t._v(" "),s("p",[t._v("命令替换的语法是：反引号 ``。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('\n#!/bin/bash\n\nDATE=`date`\necho "日期是：\\$DATE" #输出：日期是：Sun Oct 18 16:27:42 CST 2020\n\n')])])]),s("h3",{attrs:{id:"和"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#和"}},[t._v("#")]),t._v(" () 和 (())")]),t._v(" "),s("h4",{attrs:{id:"先说一下"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#先说一下"}},[t._v("#")]),t._v(" 先说一下 ()")]),t._v(" "),s("p",[t._v("在 bash 中，"),s("code",[t._v("$()")]),t._v("与 ``（反引号）都是用来作命令替换的。先完成引号里的命令行，然后将其结果替换出来，再重组成新的命令行。")]),t._v(" "),s("p",[t._v("相同点："),s("code",[t._v("$()")]),t._v(" 与 `` 在操作上，这两者都是达到相应的效果")]),t._v(" "),s("p",[t._v("不同点：")]),t._v(" "),s("p",[t._v("`` 很容易与''搞混乱，尤其对初学者来说。")]),t._v(" "),s("p",[t._v("而"),s("code",[t._v("$()")]),t._v(" 比较直观；不过 "),s("code",[t._v("$()")]),t._v(" 有兼容性问题，有些类 Unix 系统不支持。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("echo $(expr 1 + 2)\n")])])]),s("h4",{attrs:{id:"再说"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#再说"}},[t._v("#")]),t._v(" 再说 (())")]),t._v(" "),s("p",[t._v("1、(()) 可直接用于整数计算")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("echo $((1 + 2))\n")])])]),s("p",[t._v("2、(()) 可重新定义变量值，用于判断条件或计算等")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('#!/bin/bash\n\na=10\nb=50\n\n((a++))\necho $a\n#输出：11\n\n((a > b)) && echo "a > b"\n\n((a < b)) && echo "a < b"\n\n# 输出：a < b\n')])])]),s("p",[t._v("3、(()) 可用于进制转换")]),t._v(" "),s("p",[t._v("$(())可以将其他进制转成十进制数显示出来。语法："),s("code",[t._v("$((N#xx))")]),t._v("，其中，N 为进制，xx 为该进制下某个数值，命令执行后可以得到该进制数转成十进制后的值。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("echo $((2#110))\n#输出：6\necho $((8#11))\n#输出：9\necho $((16#1a))\n#输出：26\n")])])]),s("h3",{attrs:{id:"test-、-和"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#test-、-和"}},[t._v("#")]),t._v(" test 、[] 和 [[]]")]),t._v(" "),s("p",[t._v("type 命令检查")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('type "test" "[" "[["\n#输出：\n#test is a shell builtin\n#[ is a shell builtin\n#[[ is a reserved word\n')])])]),s("p",[t._v("从上面可以看出，"),s("code",[t._v("test")]),t._v("和"),s("code",[t._v("[")]),t._v("属于 Shell 的内置命令，"),s("code",[t._v("[[")]),t._v("属于 Shell 的保留关键字。")]),t._v(" "),s("p",[t._v("在使用上，"),s("code",[t._v("test")]),t._v("和"),s("code",[t._v("[")]),t._v("是等价的，因为是命令，所以需要跟它的参数使用空格隔开。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("test -f /etc/hosts && echo True\n#输出：True\n\n[ -f /etc/hosts ] && echo True\n#输出：True\n")])])]),s("p",[t._v("因为 "),s("code",[t._v("]")]),t._v(" 作为最后一个参数表示条件结束，而像"),s("code",[t._v("<")]),t._v("、"),s("code",[t._v(">")]),t._v("符号会被理解为重定向，导致错误")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("[ 1 < 2 ]\n#输出：line 13: 2: No such file or directory\n")])])]),s("p",[s("code",[t._v("[[")]),t._v("是关键字，能够按照常规的语义理解其中的内容，双中括号中的表达式看作一个单独的语句，并返回其状态码。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("[[ 1 < 2 ]] && echo True || echo False\n#输出：True\n")])])]),s("p",[t._v("推荐使用"),s("code",[t._v("[[")]),t._v(" 来进行各种判断，可以避免很多错误。")]),t._v(" "),s("p",[t._v("如下展示单中括号会引发的错误")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("[ $a == 1 && $b == 1 ] && echo True || echo False\n#输出：[: missing `]'\n\n#例如$a为空，就会报语法错误，因为 [ 命令拿到的实际上只有 ==、1、] 三个参数\n[ $a == 1 ]\n#输出：[: ==: unary operator expected\n")])])]),s("h3",{attrs:{id:"here-document"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#here-document"}},[t._v("#")]),t._v(" Here Document")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://tldp.org/LDP/abs/html/here-docs.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Here Document"),s("OutboundLink")],1),t._v(" 可以理解为“嵌入文档”。Here Document 是 Shell 中的一种特殊的重定向方式，它的基本形式如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\ncommand <<delimiter\ndocument\ndelimiter\n\n")])])]),s("p",[t._v("作用是将两个 delimiter 之间的内容(document)作为输入传递给 command。")]),t._v(" "),s("p",[s("strong",[t._v("注意：")])]),t._v(" "),s("ul",[s("li",[t._v("结尾的 delimiter 一定要顶格写，前面不能有任何字符，后面也不能有任何字符，包括空格和 tab 缩进。")]),t._v(" "),s("li",[t._v("开始的 delimiter 前后的空格会被忽略掉。")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("#!/bin/bash\n\nwc -l << EOF\nline 1\nline 2\nline 3\nEOF #输出：3\n")])])]),s("h2",{attrs:{id:"参考文档"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[t._v("#")]),t._v(" 参考文档")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://mp.weixin.qq.com/s/UofKYTb9hp2FXYIKM5Q3Qw",target:"_blank",rel:"noopener noreferrer"}},[t._v("Shell 中傻傻分不清楚的 TOP3"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/47819029",target:"_blank",rel:"noopener noreferrer"}},[t._v("千万别混淆 Bash/Zsh 的四种运行模式"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.im/post/6844903784158593038",target:"_blank",rel:"noopener noreferrer"}},[t._v("一篇文章让你彻底掌握 shell 语言"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2017/11/bash-set.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bash 脚本 set 命令教程"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.cnblogs.com/chengmo/archive/2010/10/20/1855805.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("linux shell 数据重定向（输入重定向与输出重定向）详细分析"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.cnblogs.com/chengmo/archive/2010/10/21/1856577.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("linux shell 管道命令(pipe)使用及与 shell 重定向区别"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.linuxidc.com/Linux/2018-09/154325.htm",target:"_blank",rel:"noopener noreferrer"}},[t._v("Linux 系统环境变量位置， 环境变量持久化"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://mp.weixin.qq.com/s/dle27qPDYXYcalfy0RGJeQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("手把手教你为 Mac 配一个好用的终端"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzA5MjUyMzY0MA==&mid=2247483813&idx=1&sn=cba56cec12616415f7bcececcfacd79c&chksm=906a9cb2a71d15a411e6b6ff661b07b64b3b77454b1aee6c593646e4ba113a6daa9ea028f62c&token=166666239&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"}},[t._v("打造 Mac OS 最强终端利器 iTerm2"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.jianshu.com/p/0d4d5c0c31a1",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mac 终端增强技能"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://xiaozhou.net/learn-the-command-line-iterm-and-zsh-2017-06-23.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("iTerm 与 Zsh 篇"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=n.exports}}]);