(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{462:function(e,n,a){e.exports=a.p+"assets/img/123.28ad3121.png"},463:function(e,n,a){e.exports=a.p+"assets/img/image1.851bca4a.jpg"},642:function(e,n,a){"use strict";a.r(n);var t=a(45),r=Object(t.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"javascript-的模块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javascript-的模块"}},[e._v("#")]),e._v(" JavaScript 的模块")]),e._v(" "),t("h2",{attrs:{id:"介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[e._v("#")]),e._v(" 介绍")]),e._v(" "),t("p",[e._v("模块通常是指编程语言所提供的代码组织机制，利用此机制可将程序拆解为独立且通用的代码单元。")]),e._v(" "),t("p",[e._v("模块化这个词最早出现在一本研究工程设计的探路性质的书《Design Rules》中。")]),e._v(" "),t("p",[e._v("软件模块化是随着软件的复杂性诞生的。模块化的意义在于降低软件的复杂性，不至于随着软件或系统变大而不可控，使其可控，可维护，可扩展。")]),e._v(" "),t("p",[e._v("无论那种语言，封装是写模块的首要特质。即模块不会暴露自身的实现细节，不会调用其它模块的实现代码，不会共享全局变量。一切只靠接口通信。模块化和封装是密不可分的")]),e._v(" "),t("p",[e._v("所谓模块化主要是解决代码分割、作用域隔离、模块之间的依赖管理以及发布到生产环境时的自动化打包与处理等多个方面。")]),e._v(" "),t("h3",{attrs:{id:"模块的优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模块的优点"}},[e._v("#")]),e._v(" 模块的优点")]),e._v(" "),t("ol",[t("li",[t("strong",[e._v("可维护性。")]),e._v(" 因为模块是独立的，一个设计良好的模块会让外面的代码对自己的依赖越少越好，这样自己就可以独立去更新和改进。")]),e._v(" "),t("li",[t("strong",[e._v("命名空间。")]),e._v(" 在 JavaScript 里面，如果一个变量在最顶级的函数之外声明，它就直接变成全局可用。因此，常常不小心出现命名冲突的情况。使用模块化开发来封装变量，可以避免污染全局环境。")]),e._v(" "),t("li",[t("strong",[e._v("重用代码。")]),e._v(" 我们有时候会喜欢从之前写过的项目中拷贝代码到新的项目，这没有问题，但是更好的方法是，通过模块引用的方式，来避免重复的代码库。我们可以在更新了模块之后，让引用了该模块的所有项目都同步更新，还能指定版本号，避免 API 变更带来的麻烦。")])]),e._v(" "),t("h2",{attrs:{id:"commonjs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#commonjs"}},[e._v("#")]),e._v(" CommonJS")]),e._v(" "),t("p",[e._v("CommonJS 最开始是 Mozilla 的工程师于 2009 年开始的一个项目，它的目的是让浏览器之外的 JavaScript （比如服务器端或者桌面端）能够通过模块化的方式来开发和协作。")]),e._v(" "),t("p",[e._v("在 CommonJS 的规范中，每个 JavaScript 文件就是一个独立的模块上下文（module context），在这个上下文中默认创建的属性都是私有的。也就是说，在一个文件定义的变量（还包括函数和类），都是私有的，对其他文件是不可见的。")]),e._v(" "),t("p",[e._v("需要注意的是，CommonJS 规范的主要适用场景是服务器端编程，所以采用同步加载模块的策略。如果我们依赖 3 个模块，代码会一个一个依次加载它们。")]),e._v(" "),t("p",[e._v("该模块实现方案主要包含 require 与 module 这两个关键字，其允许某个模块对外暴露部分接口并且由其他模块导入使用。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//sayModule.js\nfunction SayModule () {\n    this.hello = function () {\n        console.log('hello');\n    };\n\n    this.goodbye = function () {\n        console.log('goodbye');\n    };\n}\n\nmodule.exports = SayModule;\n\n//main.js 引入sayModule.js\nvar Say = require('./sayModule.js');\nvar sayer = new Say();\nsayer.hello(); //hello\n")])])]),t("p",[e._v("作为一个服务器端的解决方案，CommonJS 需要一个兼容的脚本加载器作为前提条件。该脚本加载器必须支持名为 require 和 module.exports 的函数，它们将模块相互导入导出。")]),e._v(" "),t("h3",{attrs:{id:"node-js"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#node-js"}},[e._v("#")]),e._v(" "),t("code",[e._v("Node.js")])]),e._v(" "),t("p",[e._v("Node 从 CommonJS 的一些创意中，创造出自己的模块化实现。由于 Node 在服务端的流行，Node 的模块形式被（不正确地）称为 CommonJS。")]),e._v(" "),t("p",[e._v("Node.js 模块可以分为两大类，一类是核心模块，另一类是文件模块。\n"),t("strong",[e._v("核心模块")]),e._v(" 就是 Node.js 标准的 API 中提供的模块，如 fs、http、net 等，这些都是由 Node.js 官方提供的模块，编译成了二进制代码，可以直接通过 require 获取核心模块，例如 require('fs')，核心模块拥有最高的加载优先级，如果有模块与核心模块命名冲突，Node.js 总是会加载核心模块。\n"),t("strong",[e._v("文件模块")]),e._v(" 是存储为单独的文件（或文件夹）的模块，可能是 JavaScript 代码、JSON 或编译好的 C/C++代码。在不显式指定文件模块扩展名的时候，Node.js 会分别试图加上.js、.json、.node(编译好的 C/C++代码)。")]),e._v(" "),t("blockquote",[t("p",[e._v("加载方式")])]),e._v(" "),t("ul",[t("li",[t("p",[e._v('按路径加载模块\n如果 require 参数以"/"开头，那么就以绝对路径的方式查找模块名称，如果参数以"./"、"../"开头，那么则是以相对路径的方式来查找模块。')])]),e._v(" "),t("li",[t("p",[e._v('通过查找 node_modules 目录加载模块\n如果 require 参数不以"/"、"./"、"../"开头，而该模块又不是核心模块，那么就要通过查找 node_modules 加载模块了。我们使用的 npm 获取的包通常就是以这种方式加载的。')])])]),e._v(" "),t("blockquote",[t("p",[e._v("加载缓存")])]),e._v(" "),t("p",[e._v("Node.js 模块不会被重复加载，这是因为 Node.js 通过文件名缓存所有加载过的文件模块，所以以后再访问到时就不会重新加载了。\n"),t("em",[e._v("注意：")]),e._v(" Node.js 是根据实际文件名缓存的，而不是 require()提供的参数缓存的，也就是说即使你分别通过 require('express')和 require('./node_modules/express')加载两次，也不会重复加载，因为尽管两次参数不同，解析到的文件却是同一个。")]),e._v(" "),t("p",[e._v("Node.js 中的模块在加载之后是以单例化运行，并且遵循值传递原则：如果是一个对象，就相当于这个对象的引用。")]),e._v(" "),t("blockquote",[t("p",[e._v("模块载入过程")])]),e._v(" "),t("p",[e._v("加载文件模块的工作，主要由原生模块 module 来实现和完成，该原生模块在启动时已经被加载，进程直接调用到 runMain 静态方法。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("例如运行： node app.js\n\nModule.runMain = function () {\n    // Load the main module--the command line argument.\n    Module._load(process.argv[1], null, true);\n};\n\n//_load静态方法在分析文件名之后执行\nvar module = new Module(id, parent);\n\n//并根据文件路径缓存当前模块对象，该模块实例对象则根据文件名加载。\nmodule.load(filename);\n")])])]),t("p",[e._v("具体说一下上文提到了文件模块的三类模块,这三类文件模块以后缀来区分，Node.js 会根据后缀名来决定加载方法，具体的加载方法在下文"),t("code",[e._v("require.extensions")]),e._v("中会介绍。")]),e._v(" "),t("ul",[t("li",[t("code",[e._v(".js")]),e._v(" 通过 fs 模块同步读取 js 文件并编译执行。")]),e._v(" "),t("li",[t("code",[e._v(".node")]),e._v(" 通过 C/C++进行编写的 Addon。通过 dlopen 方法进行加载。")]),e._v(" "),t("li",[t("code",[e._v(".json")]),e._v(" 读取文件，调用 JSON.parse 解析加载。")])]),e._v(" "),t("p",[e._v("接下来详细描述 js 后缀的编译过程。Node.js 在编译 js 文件的过程中实际完成的步骤有对 js 文件内容进行头尾包装。以 app.js 为例，包装之后的 app.js 将会变成以下形式：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//circle.js\nvar PI = Math.PI;\nexports.area = function (r) {\n    return PI * r * r;\n};\nexports.circumference = function (r) {\n    return 2 * PI * r;\n};\n\n//app.js\nvar circle = require('./circle.js');\nconsole.log( 'The area of a circle of radius 4 is ' + circle.area(4));\n\n//app包装后\n(function (exports, require, module, __filename, __dirname) {\n    var circle = require('./circle.js');\n    console.log('The area of a circle of radius 4 is ' + circle.area(4));\n});\n\n//这段代码会通过vm原生模块的runInThisContext方法执行（类似eval，只是具有明确上下文，不污染全局），返回为一个具体的function对象。最后传入module对象的exports，require方法，module，文件名，目录名作为实参并执行。\n")])])]),t("p",[e._v("这就是为什么 require 并没有定义在 app.js 文件中，但是这个方法却存在的原因。从 Node.js 的 API 文档中可以看到还有"),t("code",[e._v("__filename")]),e._v("、"),t("code",[e._v("__dirname")]),e._v("、"),t("code",[e._v("module")]),e._v("、"),t("code",[e._v("exports")]),e._v("几个没有定义但是却存在的变量。其中"),t("code",[e._v("__filename")]),e._v("和"),t("code",[e._v("__dirname")]),e._v("在查找文件路径的过程中分析得到后传入的。"),t("code",[e._v("module")]),e._v("变量是这个模块对象自身，"),t("code",[e._v("exports")]),e._v("是在 module 的构造函数中初始化的一个空对象（{}，而不是 null）。\n在这个主文件中，可以通过 require 方法去引入其余的模块。而其实这个 require 方法实际调用的就是 module._load 方法。\nload 方法在载入、编译、缓存了 module 后，返回 module 的 exports 对象。这就是 circle.js 文件中只有定义在 exports 对象上的方法才能被外部调用的原因。")]),e._v(" "),t("p",[t("strong",[e._v("以上所描述的模块载入机制均定义在 lib/module.js 中。")])]),e._v(" "),t("blockquote",[t("p",[e._v("require 函数")])]),e._v(" "),t("p",[e._v("require 引入的对象主要是函数。当 Node 调用 require() 函数，并且传递一个文件路径给它的时候，Node 会经历如下几个步骤：")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("Resolving：找到文件的绝对路径；")])]),e._v(" "),t("li",[t("p",[e._v("Loading：判断文件内容类型；")])]),e._v(" "),t("li",[t("p",[e._v("Wrapping：打包，给这个文件赋予一个私有作用范围。这是使 require 和 module 模块在本地引用的一种方法；")])]),e._v(" "),t("li",[t("p",[e._v("Evaluating：VM 对加载的代码进行处理的地方；")])]),e._v(" "),t("li",[t("p",[e._v("Caching：当再次需要用这个文件的时候，不需要重复一遍上面步骤。")])])]),e._v(" "),t("blockquote",[t("p",[e._v("require.extensions 来查看对三种文件的支持情况\n"),t("img",{attrs:{src:a(462),alt:"require.extensions"}}),e._v("\n可以清晰地看到 Node 对每种扩展名所使用的函数及其操作：对 .js 文件使用 module._compile；对 .json 文件使用 JSON.parse；对 .node 文件使用 process.dlopen。")])]),e._v(" "),t("p",[t("em",[e._v("文件查找策略")])]),e._v(" "),t("ul",[t("li",[t("p",[e._v("从文件模块缓存中加载\n尽管原生模块与文件模块的优先级不同，但是优先级最高的是从文件模块的缓存中加载已经存在的模块。")])]),e._v(" "),t("li",[t("p",[e._v("从原生模块加载\n原生模块的优先级仅次于文件模块缓存的优先级。require 方法在解析文件名之后，优先检查模块是否在原生模块列表中。以 http 模块为例，尽管在目录下存在一个"),t("code",[e._v("http")]),e._v("、"),t("code",[e._v("http.js")]),e._v("、"),t("code",[e._v("http.node")]),e._v("、"),t("code",[e._v("http.json")]),e._v("文件，"),t("code",[e._v("require(“http”)")]),e._v("都不会从这些文件中加载，而是从原生模块中加载。\n原生模块也有一个缓存区，同样也是优先从缓存区加载。如果缓存区没有被加载过，则调用原生模块的加载方式进行加载和执行。")])]),e._v(" "),t("li",[t("p",[e._v("从文件加载\n当文件模块缓存中不存在，而且不是原生模块的时候，Node.js 会解析 require 方法传入的参数，并从文件系统中加载实际的文件，加载过程中的包装和编译细节在前面说过是调用 load 方法。\n··")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('当 Node 遇到 require(X) 时，按下面的顺序处理。\n\n（1）如果 X 是内置模块（比如 require(\'http\'）)\n　　a. 返回该模块。\n　　b. 不再继续执行。\n\n（2）如果 X 以 "./" 或者 "/" 或者 "../" 开头\n　　a. 根据 X 所在的父模块，确定 X 的绝对路径。\n　　b. 将 X 当成文件，依次查找下面文件，只要其中有一个存在，就返回该文件，不再继续执行。\n        X\n        X.js\n        X.json\n        X.node\n\n　　c. 将 X 当成目录，依次查找下面文件，只要其中有一个存在，就返回该文件，不再继续执行。\n        X/package.json（main字段）\n        X/index.js\n        X/index.json\n        X/index.node\n\n（3）如果 X 不带路径\n　　a. 根据 X 所在的父模块，确定 X 可能的安装目录。\n　　b. 依次在每个目录中，将 X 当成文件名或目录名加载。\n\n（4） 抛出 "not found"\n')])])]),t("p",[t("img",{attrs:{src:a(463),alt:"图示"}})]),e._v(" "),t("br"),e._v(" "),t("p",[e._v("// TODO 要改")]),e._v(" "),t("blockquote",[t("p",[e._v("模块循环依赖")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//创建两个文件，module1.js 和 module2.js，并且让它们相互引用\n// module1.js\nexports.a = 1;\nrequire('./module2');\nexports.b = 2;\nexports.c = 3;\n\n// module2.js\nconst Module1 = require('./module1');\nconsole.log('Module1 is partially loaded here', Module1);\n\n//执行 node module2.js 打印： {a:1,b:2,c:3}\n//执行 node module1.js 打印： {a:1}\n")])])]),t("p",[e._v("在 module1 完全加载之前需要先加载 module2，而 module2 的加载又需要 module1。这种状态下，我们从 exports 对象中能得到的就是在发生循环依赖之前的这部分。上面代码中，只有 a 属性被引入，因为 b 和 c 都需要在引入 module2 之后才能加载进来。")]),e._v(" "),t("p",[e._v("Node 使这个问题简单化，在一个模块加载期间开始创建 exports 对象。如果它需要引入其他模块，并且有循环依赖，那么只能部分引入，也就是只能引入发生循环依赖之前所定义的这部分。")]),e._v(" "),t("h2",{attrs:{id:"amd"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#amd"}},[e._v("#")]),e._v(" AMD")]),e._v(" "),t("p",[e._v("AMD 是 Asynchronous Module Definition 的简称，即“异步模块定义”，是从 CommonJS 讨论中诞生的。AMD 优先照顾浏览器的模块加载场景，使用了异步加载和回调的方式。")]),e._v(" "),t("p",[e._v("AMD 和 CommonJS 一样需要脚本加载器，尽管 AMD 只需要对 define 方法的支持。define 方法需要三个参数：模块名称，模块运行的依赖数组，所有依赖都可用之后执行的函数（该函数按照依赖声明的顺序，接收依赖作为参数）。只有函数参数是必须的。define 既是一种引用模块的方式，也是定义模块的方式。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// file lib/sayModule.js\ndefine(function (){\n    return {\n        sayHello: function () {\n            console.log('hello');\n        }\n    };\n});\n\n//file main.js\ndefine(['./lib/sayModule'], function (say){\n    say.sayHello(); //hello\n})\n")])])]),t("p",[e._v("main.js 作为整个应用的入口模块，我们使用 define 关键字声明了该模块以及外部依赖(没有生命模块名称)；当我们执行该模块代码时，也就是执行 define 函数的第二个参数中定义的函数功能，其会在框架将所有的其他依赖模块加载完毕后被执行。这种延迟代码执行的技术也就保证了依赖的并发加载。")]),e._v(" "),t("h3",{attrs:{id:"requirejs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#requirejs"}},[e._v("#")]),e._v(" "),t("code",[e._v("RequireJS")])]),e._v(" "),t("p",[e._v("RequireJS 是一个前端的模块化管理的工具库，遵循 AMD 规范,通过一个函数来将所有所需要的或者说所依赖的模块实现装载进来，然后返回一个新的函数（模块），我们所有的关于新模块的业务代码都在这个函数内部操作，其内部也可无限制的使用已经加载进来的以来的模块。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<script data-main='scripts/main' src='scripts/require.js'><\/script>\n//scripts下的main.js则是指定的主代码脚本文件，所有的依赖模块代码文件都将从该文件开始异步加载进入执行。\n")])])]),t("p",[e._v("defined 用于定义模块，RequireJS 要求每个模块均放在独立的文件之中。按照是否有依赖其他模块的情况分为独立模块和非独立模块。\n"),t("strong",[e._v("1、独立模块 不依赖其他模块。直接定义")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("define({\n    methodOne: function (){},\n    methodTwo: function (){}\n});\n\n//等价于\n\ndefine(function (){\n    return {\n        methodOne: function (){},\n        methodTwo: function (){}\n    };\n});\n")])])]),t("p",[t("strong",[e._v("2、非独立模块，对其他模块有依赖")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("define([ 'moduleOne', 'moduleTwo' ], function(mOne, mTwo){\n    ...\n});\n\n//或者\n\ndefine( function( require ){\n    var mOne = require( 'moduleOne' ),\n        mTwo = require( 'moduleTwo' );\n    ...\n});\n")])])]),t("p",[e._v("如上代码， define 中有依赖模块数组的 和 没有依赖模块数组用 require 加载 这两种定义模块，调用模块的方法合称为 AMD 模式，定义模块清晰，不会污染全局变量，清楚的显示依赖关系。AMD 模式可以用于浏览器环境并且允许非同步加载模块，也可以按需动态加载模块。")]),e._v(" "),t("h2",{attrs:{id:"cmd"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cmd"}},[e._v("#")]),e._v(" CMD")]),e._v(" "),t("p",[e._v("CMD（Common Module Definition），在 CMD 中，一个模块就是一个文件。")]),e._v(" "),t("p",[e._v("全局函数 define，用来定义模块。\n参数 factory 可以是一个函数，也可以为对象或者字符串。\n当 factory 为对象、字符串时，表示模块的接口就是该对象、字符串。")]),e._v(" "),t("p",[t("em",[e._v("定义 JSON 数据模块：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('define({ "foo": "bar" });\n')])])]),t("p",[t("em",[e._v("factory 为函数的时候，表示模块的构造方法，执行构造方法便可以得到模块向外提供的接口。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("define( function(require, exports, module) {\n    // 模块代码\n});\n")])])]),t("h3",{attrs:{id:"seajs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#seajs"}},[e._v("#")]),e._v(" "),t("code",[e._v("SeaJS")])]),e._v(" "),t("p",[t("strong",[e._v("sea.js 核心特征：")])]),e._v(" "),t("ol",[t("li",[e._v("遵循 CMD 规范，与 NodeJS 般的书写模块代码。")]),e._v(" "),t("li",[e._v("依赖自动加载，配置清晰简洁。")])]),e._v(" "),t("p",[t("code",[e._v("seajs.use")]),e._v(" 用来在页面中加载一个或者多个模块")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" // 加载一个模块\nseajs.use('./a');\n\n// 加载模块，加载完成时执行回调\nseajs.use('./a'，function(a){\n    a.doSomething();\n});\n\n// 加载多个模块执行回调\nseajs.use(['./a','./b']，function(a , b){\n    a.doSomething();\n    b.doSomething();\n});\n")])])]),t("blockquote",[t("p",[t("code",[e._v("AMD和CMD最大的区别是对依赖模块的执行时机处理不同，注意不是加载的时机或者方式不同。")]),e._v("\n很多人说 requireJS 是异步加载模块，SeaJS 是同步加载模块，这么理解实际上是不准确的，其实加载模块都是异步的，只不过 AMD 依赖前置，js 可以方便知道依赖模块是谁，立即加载，而 CMD 就近依赖，需要使用把模块变为字符串解析一遍才知道依赖了那些模块，这也是很多人诟病 CMD 的一点，牺牲性能来带来开发的便利性，实际上解析模块用的时间短到可以忽略。")])]),e._v(" "),t("blockquote",[t("p",[t("code",[e._v("为什么说是执行时机处理不同？")]),e._v("\n同样都是异步加载模块，AMD 在加载模块完成后就会执行该模块，所有模块都加载执行完后会进入回调函数，执行主逻辑，这样的效果就是依赖模块的执行顺序和书写顺序不一定一致，看网络速度，哪个先下载下来，哪个先执行，但是主逻辑一定在所有依赖加载完成后才执行。\nCMD 加载完某个依赖模块后并不执行，只是下载而已，在所有依赖模块加载完成后进入主逻辑，遇到 require 语句的时候才执行对应的模块，这样模块的执行顺序和书写顺序是完全一致的。")])]),e._v(" "),t("h2",{attrs:{id:"umd"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#umd"}},[e._v("#")]),e._v(" UMD")]),e._v(" "),t("p",[e._v("统一模块定义（UMD：Universal Module Definition ）就是将 AMD 和 CommonJS 合在一起的一种尝试，常见的做法是将 CommonJS 语法包裹在兼容 AMD 的代码中。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("(function(define) {\n    define(function () {\n        return {\n            sayHello: function () {\n                console.log('hello');\n            }\n        };\n    });\n}(\n    typeof module === 'object' && module.exports && typeof define !== 'function' ?\n    function (factory) { module.exports = factory(); } :\n    define\n));\n")])])]),t("p",[e._v("该模式的核心思想在于所谓的 IIFE（Immediately Invoked Function Expression），该函数会根据环境来判断需要的参数类别")]),e._v(" "),t("h2",{attrs:{id:"es6-模块-module"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es6-模块-module"}},[e._v("#")]),e._v(" ES6 模块(module)")]),e._v(" "),t("h3",{attrs:{id:"严格模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#严格模式"}},[e._v("#")]),e._v(" 严格模式")]),e._v(" "),t("p",[e._v('ES6 的模块自动采用严格模式，不管有没有在模块头部加上"use strict";。\n严格模式主要有以下限制。')]),e._v(" "),t("ul",[t("li",[e._v("变量必须声明后再使用")]),e._v(" "),t("li",[e._v("函数的参数不能有同名属性，否则报错")]),e._v(" "),t("li",[e._v("不能使用 with 语句")]),e._v(" "),t("li",[e._v("不能对只读属性赋值，否则报错")]),e._v(" "),t("li",[e._v("不能使用前缀 0 表示八进制数，否则报错")]),e._v(" "),t("li",[e._v("不能删除不可删除的属性，否则报错")]),e._v(" "),t("li",[e._v("不能删除变量 delete prop，会报错，只能删除属性 delete global[prop]")]),e._v(" "),t("li",[e._v("eval 不会在它的外层作用域引入变量")]),e._v(" "),t("li",[e._v("eval 和 arguments 不能被重新赋值")]),e._v(" "),t("li",[e._v("arguments 不会自动反映函数参数的变化")]),e._v(" "),t("li",[e._v("不能使用 arguments.callee")]),e._v(" "),t("li",[e._v("不能使用 arguments.caller")]),e._v(" "),t("li",[e._v("禁止 this 指向全局对象")]),e._v(" "),t("li",[e._v("不能使用 fn.caller 和 fn.arguments 获取函数调用的堆栈")]),e._v(" "),t("li",[e._v("增加了保留字（比如 protected、static 和 interface）")])]),e._v(" "),t("h3",{attrs:{id:"模块-module"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模块-module"}},[e._v("#")]),e._v(" 模块 Module")]),e._v(" "),t("p",[e._v("一个模块，就是一个对其他模块暴露自己的属性或者方法的文件。")]),e._v(" "),t("h3",{attrs:{id:"导出-export"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#导出-export"}},[e._v("#")]),e._v(" 导出 Export")]),e._v(" "),t("p",[e._v("作为一个模块，它可以选择性地给其他模块暴露（提供）自己的属性和方法，供其他模块使用。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// profile.js\nexport var firstName = 'chen';\nexport var lastName = 'fangxu';\nexport var year = 1991;\n\n//等价于\n\nvar firstName = 'chen';\nvar lastName = 'fangxu';\nvar year = 1991;\nexport {firstName, lastName, year}\n\n")])])]),t("p",[t("code",[e._v("1、 通常情况下，export输出的变量就是本来的名字，但是可以使用as关键字重命名。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function v1() { ... }\nfunction v2() { ... }\n\nexport {\n  v1 as streamV1,\n  v2 as streamV2,\n  v2 as streamLatestVersion\n};\n\n//上面代码使用as关键字，重命名了函数v1和v2的对外接口。重命名后，v2可以用不同的名字输出两次。\n")])])]),t("p",[t("code",[e._v("2、 需要特别注意的是，export命令规定的是对外的接口，必须与模块内部的变量建立一一对应关系。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 报错\nexport 1;\n\n// 报错\nvar m = 1;\nexport m;\n\n//上面两种写法都会报错，因为没有提供对外的接口。第一种写法直接输出1，第二种写法通过变量m，还是直接输出1。1只是一个值，不是接口。\n\n// 写法一\nexport var m = 1;\n\n// 写法二\nvar m = 1;\nexport {m};\n\n// 写法三\nvar n = 1;\nexport {n as m};\n\n//上面三种写法都是正确的，规定了对外的接口m。其他脚本可以通过这个接口，取到值1。它们的实质是，在接口名与模块内部变量之间，建立了一一对应的关系。\n")])])]),t("p",[t("code",[e._v("3、最后，export命令可以出现在模块的任何位置，只要处于模块顶层就可以。如果处于块级作用域内，就会报错，接下来说的import命令也是如此。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function foo() {\n  export default 'bar' // SyntaxError\n}\nfoo()\n")])])]),t("h3",{attrs:{id:"导入-import"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#导入-import"}},[e._v("#")]),e._v(" 导入 import")]),e._v(" "),t("p",[e._v("作为一个模块，可以根据需要，引入其他模块的提供的属性或者方法，供自己模块使用。")]),e._v(" "),t("p",[t("code",[e._v("1、 import命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同。如果想为输入的变量重新取一个名字，import命令要使用as关键字，将输入的变量重命名。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import { lastName as surename } from './profile';\n")])])]),t("p",[t("code",[e._v("2、import后面的from指定模块文件的位置，可以是相对路径，也可以是绝对路径，.js路径可以省略。如果只是模块名，不带有路径，那么必须有配置文件，告诉 JavaScript 引擎该模块的位置。")])]),e._v(" "),t("p",[t("code",[e._v("3、注意，import命令具有提升效果，会提升到整个模块的头部，首先执行。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("foo();\n\nimport { foo } from 'my_module';\n\n//上面的代码不会报错，因为import的执行早于foo的调用。这种行为的本质是，import命令是编译阶段执行的，在代码运行之前。\n")])])]),t("p",[t("code",[e._v("4、由于import是静态执行，所以不能使用表达式和变量，这些只有在运行时才能得到结果的语法结构。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 报错\nimport { 'f' + 'oo' } from 'my_module';\n\n// 报错\nlet module = 'my_module';\nimport { foo } from module;\n\n// 报错\nif (x === 1) {\n  import { foo } from 'module1';\n} else {\n  import { foo } from 'module2';\n}\n")])])]),t("p",[t("code",[e._v("5、最后，import语句会执行所加载的模块，因此可以有下面的写法。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import 'lodash';\n//上面代码仅仅执行lodash模块，但是不输出任何值。\n")])])]),t("h2",{attrs:{id:"默认导出-export-default"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#默认导出-export-default"}},[e._v("#")]),e._v(" 默认导出(export default)")]),e._v(" "),t("p",[e._v("每个模块支持我们导出"),t("code",[e._v("一个")]),e._v("没有名字的变量，使用关键语句 export default 来实现.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('export default function(){\n            console.log("I am default Fn");\n        }\n//使用export default关键字对外导出一个匿名函数，导入这个模块的时候，可以为这个匿名函数取任意的名字\n\n//取任意名字均可\nimport sayDefault from "./module-B.js";\nsayDefault();\n//结果：I am default Fn\n')])])]),t("p",[t("code",[e._v("1、默认输出和正常输出的比较")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 第一组\nexport default function diff() { // 输出\n  // ...\n}\n\nimport diff from 'diff'; // 输入\n\n// 第二组\nexport function diff() { // 输出\n  // ...\n};\n\nimport {diff} from 'diff'; // 输入\n\n//上面代码的两组写法，第一组是使用export default时，对应的import语句不需要使用大括号；第二组是不使用export default时，对应的import语句需要使用大括号。\n")])])]),t("blockquote",[t("p",[e._v("export default 命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此 export default 命令只能使用一次。所以，import 命令后面才不用加大括号，因为只可能对应一个方法。")])]),e._v(" "),t("br"),e._v(" "),t("p",[t("code",[e._v("2、因为export default本质是将该命令后面的值，赋给default变量以后再默认，所以直接将一个值写在export default之后。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/ 正确\nexport default 42;\n\n// 报错\nexport 42;\n\n//上面代码中，后一句报错是因为没有指定对外的接口，而前一句指定外对接口为default。\n")])])]),t("p",[t("code",[e._v("3、如果想在一条import语句中，同时输入默认方法和其他变量，可以写成下面这样。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import _, { each } from 'lodash';\n\n//对应上面代码的export语句如下\nexport default function (){\n    //...\n}\nexport function each (obj, iterator, context){\n    //...\n}\n")])])]),t("h2",{attrs:{id:"export-与-import-的复合写法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#export-与-import-的复合写法"}},[e._v("#")]),e._v(" export 与 import 的复合写法")]),e._v(" "),t("p",[e._v("如果在一个模块之中，先输入后输出同一个模块，import 语句可以与 export 语句写在一起。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("export { foo, bar } from 'my_module';\n\n// 等同于\nimport { foo, bar } from 'my_module';\nexport { foo, bar };\n\n/ 接口改名\nexport { foo as myFoo } from 'my_module';\n\n// 整体输出\nexport * from 'my_module';\n")])])]),t("blockquote",[t("p",[e._v("注意事项\n1、声明的变量，对外都是只读的。但是导出的是对象类型的值，就可修改。\n2、导入不存在的变量，值为 undefined。")])]),e._v(" "),t("h3",{attrs:{id:"es6-中的循环引用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es6-中的循环引用"}},[e._v("#")]),e._v(" ES6 中的循环引用")]),e._v(" "),t("p",[e._v("ES6 中，imports 是 exports 的只读视图，直白一点就是，imports 都指向 exports 原本的数据，比如：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//------ lib.js ------\nexport let counter = 3;\nexport function incCounter() {\n    counter++;\n}\n\n//------ main.js ------\nimport { counter, incCounter } from './lib';\n\n// The imported value `counter` is live\nconsole.log(counter); // 3\nincCounter();\nconsole.log(counter); // 4\n\n// The imported value can’t be changed\ncounter++; // TypeError\n")])])]),t("p",[e._v("因此在 ES6 中处理循环引用特别简单，看下面这段代码：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//------ a.js ------\nimport {bar} from 'b'; // (1)\nexport function foo() {\n  bar(); // (2)\n}\n\n//------ b.js ------\nimport {foo} from 'a'; // (3)\nexport function bar() {\n  if (Math.random()) {\n    foo(); // (4)\n  }\n}\n")])])]),t("p",[e._v("假设先加载模块 a，在模块 a 加载完成之后，bar 间接性地指向的是模块 b 中的 bar。无论是加载完成的 imports 还是未完成的 imports，imports 和 exports 之间都有一个间接的联系，所以总是可以正常工作。")]),e._v(" "),t("h3",{attrs:{id:"实例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实例"}},[e._v("#")]),e._v(" 实例")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//---module-B.js文件---\n//导出变量：name\nexport var name = "cfangxu";\n\nmoduleA模块代码：\n//导入 模块B的属性 name    \nimport { name } from "./module-B.js";   \nconsole.log(name)\n//打印结果：cfangxu\n')])])]),t("p",[t("em",[e._v("批量导出")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//属性name\nvar name = "cfangxu";\n//属性age\nvar age  = 26;\n//方法 say\nvar say = function(){\n            console.log("say hello");\n         }\n//批量导出\nexport {name,age,say}\n')])])]),t("p",[t("em",[e._v("批量导入")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('//导入 模块B的属性\nimport { name,age,say } from "./module-B.js";\nconsole.log(name)\n//打印结果：cfangxu\nconsole.log(age)\n//打印结果：26\nsay()\n//打印结果：say hello\n')])])]),t("p",[t("em",[e._v("重命名导入变量")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import {name as myName} from './module-B.js';\nconsole.log(myName) //cfangxu\n")])])]),t("p",[t("em",[e._v("整体导入")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('/使用*实现整体导入\nimport * as obj from "./module-B.js";\n\nconsole.log(obj.name)\n//结果："cfangxu"\nconsole.log(obj.age)\n//结果：26\nobj.say();\n//结果：say hello\n')])])]),t("h2",{attrs:{id:"推荐资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#推荐资料"}},[e._v("#")]),e._v(" 推荐资料")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"http://blog.chinaunix.net/uid-26672038-id-4112229.html",target:"_blank",rel:"noopener noreferrer"}},[e._v(" JavaSript 模块规范 - AMD 规范与 CMD 规范介绍 "),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MjM5MTA1MjAxMQ==&mid=2651226355&idx=1&sn=aedf47d5a3be53f6c7d5562977624861&chksm=bd4959778a3ed06198cbb746067393cd0f189612f4fc577417e0741df3a2b620373ea025978b&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[e._v("JavaScript 模块演化简史"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2015/05/require.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("require() 源码解读"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://segmentfault.com/a/1190000009060866#articleHeader0",target:"_blank",rel:"noopener noreferrer"}},[e._v("在 Node.js 中引入模块：你所需要知道的一切都在这里"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"http://www.infoq.com/cn/articles/nodejs-module-mechanism#",target:"_blank",rel:"noopener noreferrer"}},[e._v("深入浅出 Node.js（三）：深入 Node.js 的模块机制"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://mp.weixin.qq.com/s/wxUz5E1Xs5dqYFPRPOnAlw",target:"_blank",rel:"noopener noreferrer"}},[e._v("ESModule 加载与运行机制"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);n.default=r.exports}}]);