(window.webpackJsonp=window.webpackJsonp||[]).push([[189],{674:function(s,n,t){"use strict";t.r(n);var a=t(45),e=Object(a.a)({},(function(){var s=this,n=s.$createElement,t=s._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"nginx-操作命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nginx-操作命令"}},[s._v("#")]),s._v(" Nginx 操作命令")]),s._v(" "),t("h2",{attrs:{id:"启动-nginx-准备工作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启动-nginx-准备工作"}},[s._v("#")]),s._v(" 启动 Nginx 准备工作")]),s._v(" "),t("p",[s._v("安装 Nginx 之后，如果系统开启了防火墙，需要在防火墙中加入需要开放的端口。")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#可以先查看防火墙的开启状态，如果显示 running 则是正在运行\nsystemctl status firewalld\n\n#关闭防火墙，不用配置端口，但是不安全\nsystemctl  stop firewalld\n\n#开启防火墙\nsystemctl start firewalld\n\n#添加开启端口，--permanent表示永久打开，不加是临时打开重启之后失效\nfirewall-cmd --permanent --zone=public --add-port=8080/tcp\n#重启防火墙，永久打开端口需要reload一下\nfirewall-cmd --reload\n#查看防火墙，添加的端口也可以看到\nfirewall-cmd --list-all\n")])])]),t("h2",{attrs:{id:"启动-nginx"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启动-nginx"}},[s._v("#")]),s._v(" 启动 Nginx")]),s._v(" "),t("h3",{attrs:{id:"配置-nginx-全局可用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置-nginx-全局可用"}},[s._v("#")]),s._v(" 配置 Nginx 全局可用")]),s._v(" "),t("p",[s._v("使用 yum 安装的 Nginx，可以直接使用 nginx 命令。但是编译安装的 Nginx 必须到安装后的目录下执行，例如当前我们安装的路径 "),t("code",[s._v("/usr/local/nginx/sbin")]),s._v(" ，在这个目录下运行 "),t("code",[s._v("./nginx")]),s._v(" 加上需要的参数和指令才可以，否则会报错："),t("code",[s._v("-bash: nginx: command not found")]),s._v("。")]),s._v(" "),t("p",[s._v("通过编译安装的 Nginx，可以通过配置环境变量的方式，达到用 nginx 执行命令的目的。步骤如下：")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#编辑 /etc/profile")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("vi")]),s._v(" /etc/profile\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#在最后一行添加配置，:wq 保存")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("PATH")])]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$PATH")]),s._v(":/usr/local/nginx/sbin\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#使配置立即生效")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("source")]),s._v(" /etc/profile\n")])])]),t("h3",{attrs:{id:"端口-80-占用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#端口-80-占用"}},[s._v("#")]),s._v(" 端口 80 占用")]),s._v(" "),t("p",[s._v("报错信息："),t("code",[s._v("nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)")])]),s._v(" "),t("h4",{attrs:{id:"场景一-有-nginx-在运行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#场景一-有-nginx-在运行"}},[s._v("#")]),s._v(" 场景一：有 Nginx 在运行")]),s._v(" "),t("ol",[t("li",[s._v("查找 Nginx 的主进程的进程 ID，然后使用 kill 关闭")])]),s._v(" "),t("p",[s._v("第一种方法，使用 ps，可以看到 Nginx 主进程 ID 是 1124")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#查看所有正在运行的 Nginx 进程")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" -ax "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" nginx "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" -v "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#结果为：")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#1124 ?        Ss     0:00 nginx: master process /usr/sbin/nginx")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#1126 ?        S      0:00 nginx: worker process")]),s._v("\n")])])]),t("p",[s._v("第二种方法，因为 nginx 的主进程 ID 是写死在 nginx.pid 文件中的，该文件通常放在 "),t("code",[s._v("/usr/local/nginx/logs")]),s._v("或者 "),t("code",[s._v("/var/run")]),s._v(" 目录下。")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" /var/run/nginx.pid\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#结果为：1124")]),s._v("\n")])])]),t("p",[s._v("使用 kill 命令，后面跟要发送的信号和要关闭的 Nginx 进程 ID，信号会被发送给 Nginx 进程。通过上面的操作，我们看到了 Nginx 进程 ID 为 1124，发送 "),t("code",[s._v("QUIT")]),s._v(" 信号使 Nginx 优雅退出：")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("kill")]),s._v(" -s QUIT "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1124")]),s._v("\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[s._v("使用 nginx 命令关闭")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#等待当前子进程处理完正在执行的请求后，结束 Nginx 进程")]),s._v("\nnginx -s quit\n")])])]),t("h4",{attrs:{id:"场景二-服务占用-包括场景一"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#场景二-服务占用-包括场景一"}},[s._v("#")]),s._v(" 场景二：服务占用（包括场景一）")]),s._v(" "),t("p",[s._v("不用管占用的服务是不是 Nginx，通过命令查看本机网络地址和端口等一些信息，找到被占用的 80 端口的 tcp 连接，直接 kill 掉进程。")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("netstat")]),s._v(" -ntpl\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("kill")]),s._v(" 进程PID\n")])])]),t("h3",{attrs:{id:"配置-nginx-开机自启"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置-nginx-开机自启"}},[s._v("#")]),s._v(" 配置 Nginx 开机自启")]),s._v(" "),t("h4",{attrs:{id:"利用-systemctl-命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#利用-systemctl-命令"}},[s._v("#")]),s._v(" 利用 systemctl 命令")]),s._v(" "),t("p",[s._v("如果是用 yum install 命令安装的 Nginx，yum 命令会自动创建 nginx.service 文件，直接用以下命令就可以设置开机自启")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("systemctl "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("enable")]),s._v(" nginx "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#设置开机启动 Nginx")]),s._v("\nsystemctl disable nginx "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#关闭开机启动 Nginx")]),s._v("\n")])])]),t("p",[s._v("如果是源码编译安装的 Nginx，需要在系统服务目录里创建 nginx.service 文件。")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#创建并打开 nginx.service 文件")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("vim")]),s._v(" /lib/systemd/system/nginx.service\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#内容如下")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("Unit"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("Description")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("nginx\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("After")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("network.target\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("Service"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("Type")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("forking\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ExecStart")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/usr/local/nginx/sbin/nginx\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ExecReload")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/usr/local/nginx/sbin/nginx -s reload\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ExecStop")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/usr/local/nginx/sbin/nginx -s quit\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("PrivateTmp")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("true\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("Install"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("WantedBy")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("multi-user.target\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# :wq 保存")]),s._v("\nsystemctl daemon-reload "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#使文件生效")]),s._v("\n")])])]),t("p",[s._v("这样就可以通过以下命令操作 nginx 了：")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("systemctl start nginx "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 启动nginx服务")]),s._v("\nsystemctl restart nginx "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 重新启动服务")]),s._v("\nsystemctl reload nginx "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 重新加载 Nginx，用于修改配置后")]),s._v("\nsystemctl "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("enable")]),s._v(" nginx "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置开机启动")]),s._v("\nsystemctl is-enabled nginx "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#查询服务是否开机启动")]),s._v("\nsystemctl disable nginx "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 停止开机自启动")]),s._v("\nsystemctl status nginx "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看服务当前状态")]),s._v("\n")])])]),t("p",[s._v("还有一种通过开机启动命令脚本实现开机自启，"),t("a",{attrs:{href:"https://mp.weixin.qq.com/s/LmtHTOVOvdcnMBuxv7a9_A",target:"_blank",rel:"noopener noreferrer"}},[s._v("点击查看"),t("OutboundLink")],1)]),s._v(" "),t("h2",{attrs:{id:"nginx-常用命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nginx-常用命令"}},[s._v("#")]),s._v(" Nginx 常用命令")]),s._v(" "),t("p",[s._v("如果 Nginx 已经开启，就可以通过使用 "),t("code",[s._v("-s")]),s._v(" 参数的可执行命令控制。")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("nginx -s stop "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#快速关闭")]),s._v("\nnginx -s quit "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#优雅关闭，等待工作进程处理完成后关闭")]),s._v("\nnginx -s reload "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#向主进程发送信号，重新加载配置文件，热重启")]),s._v("\nnginx -s reopen "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#重启 Nginx，重新开始记录日志文件，配合定时任务，用于日志切割")]),s._v("\n\nnginx -T "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#查看当前 Nginx 最终的配置")]),s._v("\nnginx -t -c "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("配置路径"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#检查配置是否有问题，如果已经在配置目录，则不需要 -c，此命令也可以间接查看nginx的配置文件路径")]),s._v("\n\nnginx -v "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#查看 Nginx 的版本信息")]),s._v("\nnginx -V "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#查看 Nginx 的编译信息")]),s._v("\n")])])]),t("p",[s._v("另外 "),t("code",[s._v("nginx -h")]),s._v(" 或者 "),t("code",[s._v("nginx -?")]),s._v("，可以列出所有的命令。")]),s._v(" "),t("h2",{attrs:{id:"使用-kill-关闭-nginx"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-kill-关闭-nginx"}},[s._v("#")]),s._v(" 使用 kill 关闭 Nginx")]),s._v(" "),t("p",[s._v("Nginx 信号控制：")]),s._v(" "),t("ul",[t("li",[s._v("TERM,INT：快速关闭")]),s._v(" "),t("li",[s._v("QUIT：优雅关闭")]),s._v(" "),t("li",[s._v("HUP：平滑重启，重新加载配置文件")]),s._v(" "),t("li",[s._v("USR1：重新打开日志文件，在切割日志时用途较大，跟 nginx -s reopen 类似")]),s._v(" "),t("li",[s._v("USR2：平滑升级可执行程序")]),s._v(" "),t("li",[s._v("WINCH：从容关闭工作进程")])]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#首先找到 Nginx 的 master 对应的进程ID")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" -ax "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" nginx "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" -v "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#结果为：")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#1124 ?        Ss     0:00 nginx: master process /usr/sbin/nginx")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#1126 ?        S      0:00 nginx: worker process")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("kill")]),s._v(" -"),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("TERM")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1124")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#快速停止")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("kill")]),s._v(" -QUIT "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1124")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#优雅停止")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#强制停止所有nginx进程")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("pkill")]),s._v(" -9 nginx\n")])])]),t("h2",{attrs:{id:"热部署-nginx-进行版本升级"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#热部署-nginx-进行版本升级"}},[s._v("#")]),s._v(" 热部署 Nginx，进行版本升级")]),s._v(" "),t("p",[s._v("把之前的 "),t("code",[s._v("/usr/local/nginx/sbin/nginx")]),s._v(" 二进制文件备份，然后把新编译好的 "),t("code",[s._v("objs/nginx")]),s._v(" 二进制文件替换原来的。")]),s._v(" "),t("p",[s._v("然后执行："),t("code",[s._v("kill -USR2 1124")]),s._v("，会平滑的将请求过渡到新的 Nginx 进程，会看到新开启了一个 Nginx master 进程，不过旧的 Nginx master 也在运行，不过已经已经不再监听 80 和 443 端口。")]),s._v(" "),t("p",[s._v("然后执行："),t("code",[s._v("kill -WINCH 1124")]),s._v("，优雅的关闭所有旧的 Nginx worker 进程。")]),s._v(" "),t("p",[s._v("最后，虽然所有旧的 Nginx worker 进程都关闭了，但是旧的 Nginx master 进程还存在，这是为了便于回退。")])])}),[],!1,null,null,null);n.default=e.exports}}]);